/**
 * ResourceAdminServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6-wso2v1 Built on : Apr 27, 2010 (12:11:11
 * UTC)
 */
package org.wso2.developerstudio.eclipse.carbonserver.base.services;

/*
 * ResourceAdminServiceStub java implementation
 */

public class ResourceAdminServiceStub extends org.apache.axis2.client.Stub {
	protected org.apache.axis2.description.AxisOperation[] _operations;

	// hashmaps to keep the fault mapping
	private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
	private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
	private java.util.HashMap faultMessageMap = new java.util.HashMap();

	private static int counter = 0;

	private static synchronized java.lang.String getUniqueSuffix() {
		// reset the counter if it is greater than 99999
		if (counter > 99999) {
			counter = 0;
		}
		counter = counter + 1;
		return java.lang.Long.toString(System.currentTimeMillis()) + "_" + counter;
	}

	private void populateAxisService() throws org.apache.axis2.AxisFault {

		// creating the Service with a unique name
		_service = new org.apache.axis2.description.AxisService("ResourceAdminService" + getUniqueSuffix());
		addAnonymousOperations();

		// creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations = new org.apache.axis2.description.AxisOperation[33];

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "moveResource"));
		_service.addOperation(__operation);

		_operations[0] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getResourceTreeEntry"));
		_service.addOperation(__operation);

		_operations[1] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "setSessionResourcePath"));
		_service.addOperation(__operation);

		_operations[2] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getProperty"));
		_service.addOperation(__operation);

		_operations[3] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addSymbolicLink"));
		_service.addOperation(__operation);

		_operations[4] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getVersionsBean"));
		_service.addOperation(__operation);

		_operations[5] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getCustomUIMediatypeDefinitions"));
		_service.addOperation(__operation);

		_operations[6] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "setDescription"));
		_service.addOperation(__operation);

		_operations[7] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getSessionResourcePath"));
		_service.addOperation(__operation);

		_operations[8] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getMetadata"));
		_service.addOperation(__operation);

		_operations[9] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "changeRolePermissions"));
		_service.addOperation(__operation);

		_operations[10] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getContentBean"));
		_service.addOperation(__operation);

		_operations[11] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "restoreVersion"));
		_service.addOperation(__operation);

		_operations[12] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getResourceData"));
		_service.addOperation(__operation);

		_operations[13] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getMediatypeDefinitions"));
		_service.addOperation(__operation);

		_operations[14] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "importResource"));
		_service.addOperation(__operation);

		_operations[15] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "delete"));
		_service.addOperation(__operation);

		_operations[16] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getContentDownloadBean"));
		_service.addOperation(__operation);

		_operations[17] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addTextResource"));
		_service.addOperation(__operation);

		_operations[18] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addRolePermission"));
		_service.addOperation(__operation);

		_operations[19] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "createVersion"));
		_service.addOperation(__operation);

		_operations[20] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getTextContent"));
		_service.addOperation(__operation);

		_operations[21] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addRemoteLink"));
		_service.addOperation(__operation);

		_operations[22] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "renameResource"));
		_service.addOperation(__operation);

		_operations[23] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "changeUserPermissions"));
		_service.addOperation(__operation);

		_operations[24] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addUserPermission"));
		_service.addOperation(__operation);

		_operations[25] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "updateTextContent"));
		_service.addOperation(__operation);

		_operations[26] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getCollectionMediatypeDefinitions"));
		_service.addOperation(__operation);

		_operations[27] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "copyResource"));
		_service.addOperation(__operation);

		_operations[28] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getCollectionContent"));
		_service.addOperation(__operation);

		_operations[29] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addCollection"));
		_service.addOperation(__operation);

		_operations[30] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "getPermissions"));
		_service.addOperation(__operation);

		_operations[31] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
		                                                  "addResource"));
		_service.addOperation(__operation);

		_operations[32] = __operation;

	}

	// populates the faults
	private void populateFaults() {

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "moveResource"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "moveResource"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "moveResource"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getResourceTreeEntry"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getResourceTreeEntry"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getResourceTreeEntry"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "setSessionResourcePath"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "setSessionResourcePath"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "setSessionResourcePath"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getProperty"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getProperty"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getProperty"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "addSymbolicLink"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "addSymbolicLink"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "addSymbolicLink"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getVersionsBean"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getVersionsBean"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getVersionsBean"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getCustomUIMediatypeDefinitions"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getCustomUIMediatypeDefinitions"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getCustomUIMediatypeDefinitions"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "setDescription"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "setDescription"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "setDescription"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getSessionResourcePath"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getSessionResourcePath"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getSessionResourcePath"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getMetadata"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getMetadata"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getMetadata"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "changeRolePermissions"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "changeRolePermissions"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "changeRolePermissions"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getContentBean"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getContentBean"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getContentBean"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "restoreVersion"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "restoreVersion"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "restoreVersion"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getResourceData"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getResourceData"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getResourceData"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getMediatypeDefinitions"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getMediatypeDefinitions"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getMediatypeDefinitions"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "importResource"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "importResource"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "importResource"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "delete"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "delete"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "delete"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getContentDownloadBean"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getContentDownloadBean"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getContentDownloadBean"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "addTextResource"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "addTextResource"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "addTextResource"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "ResourceServiceException"),
		                                                                  "addRolePermission"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "ResourceServiceException"),
		                                                                       "addRolePermission"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "ResourceServiceException"),
		                                                            "addRolePermission"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ResourceServiceExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "createVersion"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "createVersion"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "createVersion"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getTextContent"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getTextContent"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getTextContent"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "addRemoteLink"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "addRemoteLink"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "addRemoteLink"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "renameResource"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "renameResource"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "renameResource"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "changeUserPermissions"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "changeUserPermissions"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "changeUserPermissions"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "ResourceServiceException"),
		                                                                  "addUserPermission"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "ResourceServiceException"),
		                                                                       "addUserPermission"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "ResourceServiceException"),
		                                                            "addUserPermission"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ResourceServiceExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "updateTextContent"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "updateTextContent"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "updateTextContent"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getCollectionMediatypeDefinitions"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getCollectionMediatypeDefinitions"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getCollectionMediatypeDefinitions"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "copyResource"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "copyResource"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "copyResource"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getCollectionContent"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getCollectionContent"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getCollectionContent"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "addCollection"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "addCollection"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "addCollection"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "getPermissions"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "getPermissions"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "getPermissions"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://services.resource.registry.carbon.wso2.org",
		                                                                                                "Exception"),
		                                                                  "addResource"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://services.resource.registry.carbon.wso2.org",
		                                                                                                     "Exception"),
		                                                                       "addResource"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://services.resource.registry.carbon.wso2.org",
		                                                                                          "Exception"),
		                                                            "addResource"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub$ExceptionE");

	}

	/**
	 * Constructor that takes in a configContext
	 */

	public ResourceAdminServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
	                                java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(configurationContext, targetEndpoint, false);
	}

	/**
	 * Constructor that takes in a configContext and useseperate listner
	 */
	public ResourceAdminServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
	                                java.lang.String targetEndpoint, boolean useSeparateListener)
	                                                                                             throws org.apache.axis2.AxisFault {
		// To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext, _service);

		_serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

	}

	/**
	 * Default Constructor
	 */
	public ResourceAdminServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext)
	                                                                                                   throws org.apache.axis2.AxisFault {

		this(configurationContext,
		     "https://localhost:8243/services/ResourceAdminService.ResourceAdminServiceHttpsSoap11Endpoint");

	}

	/**
	 * Default Constructor
	 */
	public ResourceAdminServiceStub() throws org.apache.axis2.AxisFault {

		this("https://localhost:8243/services/ResourceAdminService.ResourceAdminServiceHttpsSoap11Endpoint");

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public ResourceAdminServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(null, targetEndpoint);
	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void moveResource(java.lang.String parentPath63, java.lang.String oldResourcePath64,
	                         java.lang.String destinationPath65, java.lang.String resourceName66

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[0].getName());
			_operationClient.getOptions().setAction("urn:moveResource");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource dummyWrappedType =
			                                                                                                                     null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath63,
			                 oldResourcePath64,
			                 destinationPath65,
			                 resourceName66,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "moveResource")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "moveResource"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "moveResource"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "moveResource"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getResourceTreeEntry
	 * @param getResourceTreeEntry67
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceTreeEntryBean getResourceTreeEntry(

	java.lang.String resourcePath68)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[1].getName());
			_operationClient.getOptions().setAction("urn:getResourceTreeEntry");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry dummyWrappedType =
			                                                                                                                             null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath68,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getResourceTreeEntry")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetResourceTreeEntryResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getResourceTreeEntry"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getResourceTreeEntry"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getResourceTreeEntry"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetResourceTreeEntry
	 * @param getResourceTreeEntry67
	 */
	public void startgetResourceTreeEntry(

	java.lang.String resourcePath68,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[1].getName());
		_operationClient.getOptions().setAction("urn:getResourceTreeEntry");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry dummyWrappedType =
		                                                                                                                             null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 resourcePath68,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getResourceTreeEntry")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetResourceTreeEntry(getGetResourceTreeEntryResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetResourceTreeEntry(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getResourceTreeEntry"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getResourceTreeEntry"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getResourceTreeEntry"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetResourceTreeEntry((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetResourceTreeEntry(new java.rmi.RemoteException(ex.getMessage(),
								                                                                       ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceTreeEntry(f);
							}
						} else {
							callback.receiveErrorgetResourceTreeEntry(f);
						}
					} else {
						callback.receiveErrorgetResourceTreeEntry(f);
					}
				} else {
					callback.receiveErrorgetResourceTreeEntry(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetResourceTreeEntry(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[1].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[1].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void setSessionResourcePath(java.lang.String resourcePath72

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[2].getName());
			_operationClient.getOptions().setAction("urn:setSessionResourcePath");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath dummyWrappedType =
			                                                                                                                               null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath72,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "setSessionResourcePath")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "setSessionResourcePath"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "setSessionResourcePath"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "setSessionResourcePath"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getProperty
	 * @param getProperty73
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String getProperty(

	java.lang.String resourcePath74, java.lang.String key75)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[3].getName());
			_operationClient.getOptions().setAction("urn:getProperty");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty dummyWrappedType =
			                                                                                                                    null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath74,
			                 key75,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getProperty")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetPropertyResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getProperty"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getProperty"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getProperty"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetProperty
	 * @param getProperty73
	 */
	public void startgetProperty(

	java.lang.String resourcePath74, java.lang.String key75,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[3].getName());
		_operationClient.getOptions().setAction("urn:getProperty");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty dummyWrappedType =
		                                                                                                                    null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 resourcePath74,
		                 key75,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getProperty")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetProperty(getGetPropertyResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetProperty(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getProperty"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getProperty"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getProperty"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetProperty((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetProperty(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetProperty(f);
							}
						} else {
							callback.receiveErrorgetProperty(f);
						}
					} else {
						callback.receiveErrorgetProperty(f);
					}
				} else {
					callback.receiveErrorgetProperty(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetProperty(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[3].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[3].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void addSymbolicLink(java.lang.String parentPath79, java.lang.String name80, java.lang.String targetPath81

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[4].getName());
			_operationClient.getOptions().setAction("urn:addSymbolicLink");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink dummyWrappedType =
			                                                                                                                        null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath79,
			                 name80,
			                 targetPath81,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addSymbolicLink")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addSymbolicLink"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addSymbolicLink"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addSymbolicLink"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getVersionsBean
	 * @param getVersionsBean82
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.VersionsBean getVersionsBean(

	java.lang.String path83)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[5].getName());
			_operationClient.getOptions().setAction("urn:getVersionsBean");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean dummyWrappedType =
			                                                                                                                        null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path83,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getVersionsBean")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetVersionsBeanResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getVersionsBean"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getVersionsBean"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getVersionsBean"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetVersionsBean
	 * @param getVersionsBean82
	 */
	public void startgetVersionsBean(

	java.lang.String path83,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[5].getName());
		_operationClient.getOptions().setAction("urn:getVersionsBean");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean dummyWrappedType =
		                                                                                                                        null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path83,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getVersionsBean")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetVersionsBean(getGetVersionsBeanResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetVersionsBean(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getVersionsBean"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getVersionsBean"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getVersionsBean"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetVersionsBean((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetVersionsBean(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetVersionsBean(f);
							}
						} else {
							callback.receiveErrorgetVersionsBean(f);
						}
					} else {
						callback.receiveErrorgetVersionsBean(f);
					}
				} else {
					callback.receiveErrorgetVersionsBean(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetVersionsBean(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[5].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[5].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getCustomUIMediatypeDefinitions
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String getCustomUIMediatypeDefinitions(

	)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[6].getName());
			_operationClient.getOptions().setAction("urn:getCustomUIMediatypeDefinitions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			// Style is taken to be "document". No input parameters
			// according to the WS-Basic profile in this case we have to send an
			// empty soap message
			org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
			env = factory.getDefaultEnvelope();

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetCustomUIMediatypeDefinitionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getCustomUIMediatypeDefinitions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getCustomUIMediatypeDefinitions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getCustomUIMediatypeDefinitions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetCustomUIMediatypeDefinitions
	 */
	public void startgetCustomUIMediatypeDefinitions(

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[6].getName());
		_operationClient.getOptions().setAction("urn:getCustomUIMediatypeDefinitions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is taken to be "document". No input parameters
		// according to the WS-Basic profile in this case we have to send an
		// empty soap message
		org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
		env = factory.getDefaultEnvelope();

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetCustomUIMediatypeDefinitions(getGetCustomUIMediatypeDefinitionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetCustomUIMediatypeDefinitions(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getCustomUIMediatypeDefinitions"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getCustomUIMediatypeDefinitions"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getCustomUIMediatypeDefinitions"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetCustomUIMediatypeDefinitions((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetCustomUIMediatypeDefinitions(new java.rmi.RemoteException(
								                                                                                  ex.getMessage(),
								                                                                                  ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
							}
						} else {
							callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
						}
					} else {
						callback.receiveErrorgetCustomUIMediatypeDefinitions(f);
					}
				} else {
					callback.receiveErrorgetCustomUIMediatypeDefinitions(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetCustomUIMediatypeDefinitions(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[6].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[6].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void setDescription(java.lang.String path90, java.lang.String description91

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[7].getName());
			_operationClient.getOptions().setAction("urn:setDescription");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path90,
			                 description91,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "setDescription")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "setDescription"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "setDescription"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "setDescription"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getSessionResourcePath
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String getSessionResourcePath(

	)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[8].getName());
			_operationClient.getOptions().setAction("urn:getSessionResourcePath");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			// Style is taken to be "document". No input parameters
			// according to the WS-Basic profile in this case we have to send an
			// empty soap message
			org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
			env = factory.getDefaultEnvelope();

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetSessionResourcePathResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getSessionResourcePath"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getSessionResourcePath"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getSessionResourcePath"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetSessionResourcePath
	 */
	public void startgetSessionResourcePath(

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[8].getName());
		_operationClient.getOptions().setAction("urn:getSessionResourcePath");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is taken to be "document". No input parameters
		// according to the WS-Basic profile in this case we have to send an
		// empty soap message
		org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
		env = factory.getDefaultEnvelope();

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetSessionResourcePath(getGetSessionResourcePathResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetSessionResourcePath(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getSessionResourcePath"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getSessionResourcePath"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getSessionResourcePath"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetSessionResourcePath((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetSessionResourcePath(new java.rmi.RemoteException(
								                                                                         ex.getMessage(),
								                                                                         ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetSessionResourcePath(f);
							}
						} else {
							callback.receiveErrorgetSessionResourcePath(f);
						}
					} else {
						callback.receiveErrorgetSessionResourcePath(f);
					}
				} else {
					callback.receiveErrorgetSessionResourcePath(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetSessionResourcePath(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[8].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[8].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getMetadata
	 * @param getMetadata95
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MetadataBean getMetadata(

	java.lang.String path96)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[9].getName());
			_operationClient.getOptions().setAction("urn:getMetadata");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata dummyWrappedType =
			                                                                                                                    null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path96,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getMetadata")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetMetadataResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getMetadata"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getMetadata"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getMetadata"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetMetadata
	 * @param getMetadata95
	 */
	public void startgetMetadata(

	java.lang.String path96,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[9].getName());
		_operationClient.getOptions().setAction("urn:getMetadata");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata dummyWrappedType =
		                                                                                                                    null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path96,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getMetadata")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetMetadata(getGetMetadataResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetMetadata(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getMetadata"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getMetadata"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getMetadata"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetMetadata((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetMetadata(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMetadata(f);
							}
						} else {
							callback.receiveErrorgetMetadata(f);
						}
					} else {
						callback.receiveErrorgetMetadata(f);
					}
				} else {
					callback.receiveErrorgetMetadata(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetMetadata(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[9].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[9].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#changeRolePermissions
	 * @param changeRolePermissions99
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public boolean changeRolePermissions(

	java.lang.String resourcePath100, java.lang.String permissionsInput101)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[10].getName());
			_operationClient.getOptions().setAction("urn:changeRolePermissions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions dummyWrappedType =
			                                                                                                                              null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath100,
			                 permissionsInput101,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "changeRolePermissions")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getChangeRolePermissionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "changeRolePermissions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "changeRolePermissions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "changeRolePermissions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startchangeRolePermissions
	 * @param changeRolePermissions99
	 */
	public void startchangeRolePermissions(

	java.lang.String resourcePath100, java.lang.String permissionsInput101,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[10].getName());
		_operationClient.getOptions().setAction("urn:changeRolePermissions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions dummyWrappedType =
		                                                                                                                              null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 resourcePath100,
		                 permissionsInput101,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "changeRolePermissions")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultchangeRolePermissions(getChangeRolePermissionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorchangeRolePermissions(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "changeRolePermissions"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "changeRolePermissions"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "changeRolePermissions"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorchangeRolePermissions((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorchangeRolePermissions(new java.rmi.RemoteException(
								                                                                        ex.getMessage(),
								                                                                        ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeRolePermissions(f);
							}
						} else {
							callback.receiveErrorchangeRolePermissions(f);
						}
					} else {
						callback.receiveErrorchangeRolePermissions(f);
					}
				} else {
					callback.receiveErrorchangeRolePermissions(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorchangeRolePermissions(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[10].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[10].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getContentBean
	 * @param getContentBean104
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ContentBean getContentBean(

	java.lang.String path105)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[11].getName());
			_operationClient.getOptions().setAction("urn:getContentBean");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path105,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getContentBean")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetContentBeanResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getContentBean"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getContentBean"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getContentBean"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetContentBean
	 * @param getContentBean104
	 */
	public void startgetContentBean(

	java.lang.String path105,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[11].getName());
		_operationClient.getOptions().setAction("urn:getContentBean");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean dummyWrappedType =
		                                                                                                                       null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path105,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getContentBean")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetContentBean(getGetContentBeanResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetContentBean(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getContentBean"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getContentBean"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getContentBean"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetContentBean((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetContentBean(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentBean(f);
							}
						} else {
							callback.receiveErrorgetContentBean(f);
						}
					} else {
						callback.receiveErrorgetContentBean(f);
					}
				} else {
					callback.receiveErrorgetContentBean(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetContentBean(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[11].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[11].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void restoreVersion(java.lang.String versionPath109

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[12].getName());
			_operationClient.getOptions().setAction("urn:restoreVersion");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 versionPath109,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "restoreVersion")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "restoreVersion"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "restoreVersion"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "restoreVersion"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getResourceData
	 * @param getResourceData110
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceData[] getResourceData(

	java.lang.String[] paths111)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[13].getName());
			_operationClient.getOptions().setAction("urn:getResourceData");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData dummyWrappedType =
			                                                                                                                        null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 paths111,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getResourceData")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetResourceDataResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getResourceData"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getResourceData"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getResourceData"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetResourceData
	 * @param getResourceData110
	 */
	public void startgetResourceData(

	java.lang.String[] paths111,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[13].getName());
		_operationClient.getOptions().setAction("urn:getResourceData");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData dummyWrappedType =
		                                                                                                                        null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 paths111,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getResourceData")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetResourceData(getGetResourceDataResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetResourceData(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getResourceData"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getResourceData"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getResourceData"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetResourceData((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetResourceData(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetResourceData(f);
							}
						} else {
							callback.receiveErrorgetResourceData(f);
						}
					} else {
						callback.receiveErrorgetResourceData(f);
					}
				} else {
					callback.receiveErrorgetResourceData(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetResourceData(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[13].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[13].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getMediatypeDefinitions
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String getMediatypeDefinitions(

	)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[14].getName());
			_operationClient.getOptions().setAction("urn:getMediatypeDefinitions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			// Style is taken to be "document". No input parameters
			// according to the WS-Basic profile in this case we have to send an
			// empty soap message
			org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
			env = factory.getDefaultEnvelope();

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetMediatypeDefinitionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getMediatypeDefinitions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getMediatypeDefinitions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getMediatypeDefinitions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetMediatypeDefinitions
	 */
	public void startgetMediatypeDefinitions(

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[14].getName());
		_operationClient.getOptions().setAction("urn:getMediatypeDefinitions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is taken to be "document". No input parameters
		// according to the WS-Basic profile in this case we have to send an
		// empty soap message
		org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
		env = factory.getDefaultEnvelope();

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetMediatypeDefinitions(getGetMediatypeDefinitionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetMediatypeDefinitions(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getMediatypeDefinitions"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getMediatypeDefinitions"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getMediatypeDefinitions"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetMediatypeDefinitions((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetMediatypeDefinitions(new java.rmi.RemoteException(
								                                                                          ex.getMessage(),
								                                                                          ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetMediatypeDefinitions(f);
							}
						} else {
							callback.receiveErrorgetMediatypeDefinitions(f);
						}
					} else {
						callback.receiveErrorgetMediatypeDefinitions(f);
					}
				} else {
					callback.receiveErrorgetMediatypeDefinitions(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetMediatypeDefinitions(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[14].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[14].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void importResource(java.lang.String parentPath118, java.lang.String resourceName119,
	                           java.lang.String mediaType120, java.lang.String description121,
	                           java.lang.String fetchURL122, java.lang.String symlinkLocation123

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[15].getName());
			_operationClient.getOptions().setAction("urn:importResource");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath118,
			                 resourceName119,
			                 mediaType120,
			                 description121,
			                 fetchURL122,
			                 symlinkLocation123,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "importResource")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "importResource"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "importResource"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "importResource"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void delete(java.lang.String pathToDelete125

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[16].getName());
			_operationClient.getOptions().setAction("urn:delete");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete dummyWrappedType =
			                                                                                                               null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 pathToDelete125,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "delete")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "delete"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "delete"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "delete"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getContentDownloadBean
	 * @param getContentDownloadBean126
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ContentDownloadBean getContentDownloadBean(

	java.lang.String path127)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[17].getName());
			_operationClient.getOptions().setAction("urn:getContentDownloadBean");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean dummyWrappedType =
			                                                                                                                               null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path127,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getContentDownloadBean")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetContentDownloadBeanResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getContentDownloadBean"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getContentDownloadBean"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getContentDownloadBean"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetContentDownloadBean
	 * @param getContentDownloadBean126
	 */
	public void startgetContentDownloadBean(

	java.lang.String path127,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[17].getName());
		_operationClient.getOptions().setAction("urn:getContentDownloadBean");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean dummyWrappedType =
		                                                                                                                               null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path127,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getContentDownloadBean")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetContentDownloadBean(getGetContentDownloadBeanResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetContentDownloadBean(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getContentDownloadBean"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getContentDownloadBean"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getContentDownloadBean"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetContentDownloadBean((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetContentDownloadBean(new java.rmi.RemoteException(
								                                                                         ex.getMessage(),
								                                                                         ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetContentDownloadBean(f);
							}
						} else {
							callback.receiveErrorgetContentDownloadBean(f);
						}
					} else {
						callback.receiveErrorgetContentDownloadBean(f);
					}
				} else {
					callback.receiveErrorgetContentDownloadBean(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetContentDownloadBean(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[17].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[17].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void addTextResource(java.lang.String parentPath131, java.lang.String fileName132,
	                            java.lang.String mediaType133, java.lang.String description134,
	                            java.lang.String content135

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[18].getName());
			_operationClient.getOptions().setAction("urn:addTextResource");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource dummyWrappedType =
			                                                                                                                        null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath131,
			                 fileName132,
			                 mediaType133,
			                 description134,
			                 content135,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addTextResource")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addTextResource"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addTextResource"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addTextResource"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#addRolePermission
	 * @param addRolePermission136
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException
	 *             :
	 */

	public boolean addRolePermission(

	java.lang.String pathToAuthorize137, java.lang.String roleToAuthorize138, java.lang.String actionToAuthorize139,
	                                 java.lang.String permissionType140)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[19].getName());
			_operationClient.getOptions().setAction("urn:addRolePermission");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission dummyWrappedType =
			                                                                                                                          null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 pathToAuthorize137,
			                 roleToAuthorize138,
			                 actionToAuthorize139,
			                 permissionType140,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addRolePermission")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getAddRolePermissionResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addRolePermission"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addRolePermission"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addRolePermission"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startaddRolePermission
	 * @param addRolePermission136
	 */
	public void startaddRolePermission(

	                                   java.lang.String pathToAuthorize137,
	                                   java.lang.String roleToAuthorize138,
	                                   java.lang.String actionToAuthorize139,
	                                   java.lang.String permissionType140,

	                                   final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[19].getName());
		_operationClient.getOptions().setAction("urn:addRolePermission");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission dummyWrappedType =
		                                                                                                                          null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 pathToAuthorize137,
		                 roleToAuthorize138,
		                 actionToAuthorize139,
		                 permissionType140,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "addRolePermission")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultaddRolePermission(getAddRolePermissionResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErroraddRolePermission(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "addRolePermission"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "addRolePermission"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "addRolePermission"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) {
									callback.receiveErroraddRolePermission((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) ex);
									return;
								}

								callback.receiveErroraddRolePermission(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddRolePermission(f);
							}
						} else {
							callback.receiveErroraddRolePermission(f);
						}
					} else {
						callback.receiveErroraddRolePermission(f);
					}
				} else {
					callback.receiveErroraddRolePermission(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErroraddRolePermission(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[19].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[19].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void createVersion(java.lang.String resourcePath144

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[20].getName());
			_operationClient.getOptions().setAction("urn:createVersion");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion dummyWrappedType =
			                                                                                                                      null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath144,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "createVersion")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "createVersion"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "createVersion"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "createVersion"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getTextContent
	 * @param getTextContent145
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String getTextContent(

	java.lang.String path146)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[21].getName());
			_operationClient.getOptions().setAction("urn:getTextContent");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path146,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getTextContent")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetTextContentResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getTextContent"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getTextContent"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getTextContent"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetTextContent
	 * @param getTextContent145
	 */
	public void startgetTextContent(

	java.lang.String path146,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[21].getName());
		_operationClient.getOptions().setAction("urn:getTextContent");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent dummyWrappedType =
		                                                                                                                       null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path146,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getTextContent")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetTextContent(getGetTextContentResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetTextContent(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getTextContent"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getTextContent"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getTextContent"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetTextContent((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetTextContent(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetTextContent(f);
							}
						} else {
							callback.receiveErrorgetTextContent(f);
						}
					} else {
						callback.receiveErrorgetTextContent(f);
					}
				} else {
					callback.receiveErrorgetTextContent(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetTextContent(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[21].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[21].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void addRemoteLink(java.lang.String parentPath150, java.lang.String name151, java.lang.String instance152,
	                          java.lang.String targetPath153

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[22].getName());
			_operationClient.getOptions().setAction("urn:addRemoteLink");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink dummyWrappedType =
			                                                                                                                      null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath150,
			                 name151,
			                 instance152,
			                 targetPath153,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addRemoteLink")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addRemoteLink"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addRemoteLink"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addRemoteLink"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void renameResource(java.lang.String parentPath155, java.lang.String oldResourcePath156,
	                           java.lang.String newResourceName157

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[23].getName());
			_operationClient.getOptions().setAction("urn:renameResource");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath155,
			                 oldResourcePath156,
			                 newResourceName157,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "renameResource")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "renameResource"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "renameResource"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "renameResource"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#changeUserPermissions
	 * @param changeUserPermissions158
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public boolean changeUserPermissions(

	java.lang.String resourcePath159, java.lang.String permissionInput160)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[24].getName());
			_operationClient.getOptions().setAction("urn:changeUserPermissions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions dummyWrappedType =
			                                                                                                                              null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath159,
			                 permissionInput160,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "changeUserPermissions")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getChangeUserPermissionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "changeUserPermissions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "changeUserPermissions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "changeUserPermissions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startchangeUserPermissions
	 * @param changeUserPermissions158
	 */
	public void startchangeUserPermissions(

	java.lang.String resourcePath159, java.lang.String permissionInput160,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[24].getName());
		_operationClient.getOptions().setAction("urn:changeUserPermissions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions dummyWrappedType =
		                                                                                                                              null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 resourcePath159,
		                 permissionInput160,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "changeUserPermissions")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultchangeUserPermissions(getChangeUserPermissionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorchangeUserPermissions(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "changeUserPermissions"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "changeUserPermissions"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "changeUserPermissions"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorchangeUserPermissions((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorchangeUserPermissions(new java.rmi.RemoteException(
								                                                                        ex.getMessage(),
								                                                                        ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorchangeUserPermissions(f);
							}
						} else {
							callback.receiveErrorchangeUserPermissions(f);
						}
					} else {
						callback.receiveErrorchangeUserPermissions(f);
					}
				} else {
					callback.receiveErrorchangeUserPermissions(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorchangeUserPermissions(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[24].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[24].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#addUserPermission
	 * @param addUserPermission163
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException
	 *             :
	 */

	public boolean addUserPermission(

	java.lang.String pathToAuthorize164, java.lang.String userToAuthorize165, java.lang.String actionToAuthorize166,
	                                 java.lang.String permissionType167)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[25].getName());
			_operationClient.getOptions().setAction("urn:addUserPermission");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission dummyWrappedType =
			                                                                                                                          null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 pathToAuthorize164,
			                 userToAuthorize165,
			                 actionToAuthorize166,
			                 permissionType167,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addUserPermission")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getAddUserPermissionResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addUserPermission"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addUserPermission"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addUserPermission"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startaddUserPermission
	 * @param addUserPermission163
	 */
	public void startaddUserPermission(

	                                   java.lang.String pathToAuthorize164,
	                                   java.lang.String userToAuthorize165,
	                                   java.lang.String actionToAuthorize166,
	                                   java.lang.String permissionType167,

	                                   final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[25].getName());
		_operationClient.getOptions().setAction("urn:addUserPermission");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission dummyWrappedType =
		                                                                                                                          null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 pathToAuthorize164,
		                 userToAuthorize165,
		                 actionToAuthorize166,
		                 permissionType167,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "addUserPermission")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultaddUserPermission(getAddUserPermissionResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErroraddUserPermission(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "addUserPermission"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "addUserPermission"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "addUserPermission"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) {
									callback.receiveErroraddUserPermission((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceServiceExceptionException) ex);
									return;
								}

								callback.receiveErroraddUserPermission(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddUserPermission(f);
							}
						} else {
							callback.receiveErroraddUserPermission(f);
						}
					} else {
						callback.receiveErroraddUserPermission(f);
					}
				} else {
					callback.receiveErroraddUserPermission(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErroraddUserPermission(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[25].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[25].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void updateTextContent(java.lang.String resourcePath171, java.lang.String contentText172

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[26].getName());
			_operationClient.getOptions().setAction("urn:updateTextContent");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent dummyWrappedType =
			                                                                                                                          null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 resourcePath171,
			                 contentText172,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "updateTextContent")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "updateTextContent"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "updateTextContent"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "updateTextContent"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getCollectionMediatypeDefinitions
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String getCollectionMediatypeDefinitions(

	)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[27].getName());
			_operationClient.getOptions().setAction("urn:getCollectionMediatypeDefinitions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			// Style is taken to be "document". No input parameters
			// according to the WS-Basic profile in this case we have to send an
			// empty soap message
			org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
			env = factory.getDefaultEnvelope();

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetCollectionMediatypeDefinitionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getCollectionMediatypeDefinitions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getCollectionMediatypeDefinitions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getCollectionMediatypeDefinitions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetCollectionMediatypeDefinitions
	 */
	public void startgetCollectionMediatypeDefinitions(

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[27].getName());
		_operationClient.getOptions().setAction("urn:getCollectionMediatypeDefinitions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is taken to be "document". No input parameters
		// according to the WS-Basic profile in this case we have to send an
		// empty soap message
		org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions().getSoapVersionURI());
		env = factory.getDefaultEnvelope();

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetCollectionMediatypeDefinitions(getGetCollectionMediatypeDefinitionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetCollectionMediatypeDefinitions(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getCollectionMediatypeDefinitions"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getCollectionMediatypeDefinitions"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getCollectionMediatypeDefinitions"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetCollectionMediatypeDefinitions((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetCollectionMediatypeDefinitions(new java.rmi.RemoteException(
								                                                                                    ex.getMessage(),
								                                                                                    ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionMediatypeDefinitions(f);
							}
						} else {
							callback.receiveErrorgetCollectionMediatypeDefinitions(f);
						}
					} else {
						callback.receiveErrorgetCollectionMediatypeDefinitions(f);
					}
				} else {
					callback.receiveErrorgetCollectionMediatypeDefinitions(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetCollectionMediatypeDefinitions(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[27].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[27].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void copyResource(java.lang.String parentPath177, java.lang.String oldResourcePath178,
	                         java.lang.String destinationPath179, java.lang.String resourceName180

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[28].getName());
			_operationClient.getOptions().setAction("urn:copyResource");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource dummyWrappedType =
			                                                                                                                     null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath177,
			                 oldResourcePath178,
			                 destinationPath179,
			                 resourceName180,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "copyResource")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "copyResource"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "copyResource"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "copyResource"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getCollectionContent
	 * @param getCollectionContent181
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CollectionContentBean getCollectionContent(

	java.lang.String path182)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[29].getName());
			_operationClient.getOptions().setAction("urn:getCollectionContent");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent dummyWrappedType =
			                                                                                                                             null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path182,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getCollectionContent")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetCollectionContentResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getCollectionContent"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getCollectionContent"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getCollectionContent"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetCollectionContent
	 * @param getCollectionContent181
	 */
	public void startgetCollectionContent(

	java.lang.String path182,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[29].getName());
		_operationClient.getOptions().setAction("urn:getCollectionContent");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent dummyWrappedType =
		                                                                                                                             null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path182,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getCollectionContent")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetCollectionContent(getGetCollectionContentResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetCollectionContent(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getCollectionContent"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getCollectionContent"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getCollectionContent"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetCollectionContent((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetCollectionContent(new java.rmi.RemoteException(ex.getMessage(),
								                                                                       ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetCollectionContent(f);
							}
						} else {
							callback.receiveErrorgetCollectionContent(f);
						}
					} else {
						callback.receiveErrorgetCollectionContent(f);
					}
				} else {
					callback.receiveErrorgetCollectionContent(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetCollectionContent(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[29].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[29].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#addCollection
	 * @param addCollection185
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public java.lang.String addCollection(

	java.lang.String parentPath186, java.lang.String collectionName187, java.lang.String mediaType188,
	                                      java.lang.String description189)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[30].getName());
			_operationClient.getOptions().setAction("urn:addCollection");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection dummyWrappedType =
			                                                                                                                      null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 parentPath186,
			                 collectionName187,
			                 mediaType188,
			                 description189,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addCollection")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getAddCollectionResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addCollection"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addCollection"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addCollection"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startaddCollection
	 * @param addCollection185
	 */
	public void startaddCollection(

	                               java.lang.String parentPath186,
	                               java.lang.String collectionName187,
	                               java.lang.String mediaType188,
	                               java.lang.String description189,

	                               final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[30].getName());
		_operationClient.getOptions().setAction("urn:addCollection");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection dummyWrappedType =
		                                                                                                                      null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 parentPath186,
		                 collectionName187,
		                 mediaType188,
		                 description189,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "addCollection")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultaddCollection(getAddCollectionResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErroraddCollection(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "addCollection"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "addCollection"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "addCollection"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErroraddCollection((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErroraddCollection(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErroraddCollection(f);
							}
						} else {
							callback.receiveErroraddCollection(f);
						}
					} else {
						callback.receiveErroraddCollection(f);
					}
				} else {
					callback.receiveErroraddCollection(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErroraddCollection(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[30].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[30].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#getPermissions
	 * @param getPermissions192
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.PermissionBean getPermissions(

	java.lang.String path193)

	throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[31].getName());
			_operationClient.getOptions().setAction("urn:getPermissions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions dummyWrappedType =
			                                                                                                                       null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path193,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "getPermissions")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return getGetPermissionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse) object);

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getPermissions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getPermissions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getPermissions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminService#startgetPermissions
	 * @param getPermissions192
	 */
	public void startgetPermissions(

	java.lang.String path193,

	final org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[31].getName());
		_operationClient.getOptions().setAction("urn:getPermissions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.
		org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions dummyWrappedType =
		                                                                                                                       null;
		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
		                 path193,
		                 dummyWrappedType,
		                 optimizeContent(new javax.xml.namespace.QName(
		                                                               "http://services.resource.registry.carbon.wso2.org",
		                                                               "getPermissions")));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
			public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
				try {
					org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

					java.lang.Object object =
					                          fromOM(resultEnv.getBody().getFirstElement(),
					                                 org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse.class,
					                                 getEnvelopeNamespaces(resultEnv));
					callback.receiveResultgetPermissions(getGetPermissionsResponse_return((org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse) object));

				} catch (org.apache.axis2.AxisFault e) {
					callback.receiveErrorgetPermissions(e);
				}
			}

			public void onError(java.lang.Exception error) {
				if (error instanceof org.apache.axis2.AxisFault) {
					org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
					org.apache.axiom.om.OMElement faultElt = f.getDetail();
					if (faultElt != null) {
						if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
						                                                                              faultElt.getQName(),
						                                                                              "getPermissions"))) {
							// make the fault by reflection
							try {
								java.lang.String exceptionClassName =
								                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                                faultElt.getQName(),
								                                                                                                                                "getPermissions"));
								java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
								java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
								// message class
								java.lang.String messageClassName =
								                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
								                                                                                                                   faultElt.getQName(),
								                                                                                                                   "getPermissions"));
								java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
								java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
								java.lang.reflect.Method m =
								                             exceptionClass.getMethod("setFaultMessage",
								                                                      new java.lang.Class[] { messageClass });
								m.invoke(ex, new java.lang.Object[] { messageObject });

								if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
									callback.receiveErrorgetPermissions((org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex);
									return;
								}

								callback.receiveErrorgetPermissions(new java.rmi.RemoteException(ex.getMessage(), ex));
							} catch (java.lang.ClassCastException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							} catch (java.lang.ClassNotFoundException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							} catch (java.lang.NoSuchMethodException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							} catch (java.lang.reflect.InvocationTargetException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							} catch (java.lang.IllegalAccessException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							} catch (java.lang.InstantiationException e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							} catch (org.apache.axis2.AxisFault e) {
								// we cannot intantiate the class - throw the
								// original Axis fault
								callback.receiveErrorgetPermissions(f);
							}
						} else {
							callback.receiveErrorgetPermissions(f);
						}
					} else {
						callback.receiveErrorgetPermissions(f);
					}
				} else {
					callback.receiveErrorgetPermissions(error);
				}
			}

			public void onFault(org.apache.axis2.context.MessageContext faultContext) {
				org.apache.axis2.AxisFault fault =
				                                   org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
				onError(fault);
			}

			public void onComplete() {
				try {
					_messageContext.getTransportOut().getSender().cleanup(_messageContext);
				} catch (org.apache.axis2.AxisFault axisFault) {
					callback.receiveErrorgetPermissions(axisFault);
				}
			}
		});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[31].getMessageReceiver() == null && _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[31].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException
	 *             :
	 */
	public void addResource(java.lang.String path197, java.lang.String mediaType198, java.lang.String description199,
	                        javax.activation.DataHandler content200, java.lang.String symlinkLocation201

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[32].getName());
			_operationClient.getOptions().setAction("urn:addResource");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource dummyWrappedType =
			                                                                                                                    null;
			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 path197,
			                 mediaType198,
			                 description199,
			                 content200,
			                 symlinkLocation201,
			                 dummyWrappedType,
			                 optimizeContent(new javax.xml.namespace.QName(
			                                                               "http://services.resource.registry.carbon.wso2.org",
			                                                               "addResource")));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "addResource"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "addResource"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "addResource"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.services.ExceptionException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env) {
		java.util.Map returnMap = new java.util.HashMap();
		java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
		while (namespaceIterator.hasNext()) {
			org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
			returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
		}
		return returnMap;
	}

	private javax.xml.namespace.QName[] opNameArray = null;

	private boolean optimizeContent(javax.xml.namespace.QName opName) {

		if (opNameArray == null) {
			return false;
		}
		for (int i = 0; i < opNameArray.length; i++) {
			if (opName.equals(opNameArray[i])) {
				return true;
			}
		}
		return false;
	}

	// https://localhost:8243/services/ResourceAdminService.ResourceAdminServiceHttpsSoap11Endpoint
	public static class AddCollection implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addCollection", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for CollectionName
		 */

		protected java.lang.String localCollectionName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCollectionNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCollectionName() {
			return localCollectionName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CollectionName
		 */
		public void setCollectionName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localCollectionNameTracker = true;
			} else {
				localCollectionNameTracker = true;

			}

			this.localCollectionName = param;

		}

		/**
		 * field for MediaType
		 */

		protected java.lang.String localMediaType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediaTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediaType() {
			return localMediaType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MediaType
		 */
		public void setMediaType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediaTypeTracker = true;
			} else {
				localMediaTypeTracker = true;

			}

			this.localMediaType = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addCollection",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addCollection",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localCollectionNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "collectionName", xmlWriter);

				if (localCollectionName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localCollectionName);

				}

				xmlWriter.writeEndElement();
			}
			if (localMediaTypeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "mediaType", xmlWriter);

				if (localMediaType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediaType);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localCollectionNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "collectionName"));

				elementList.add(localCollectionName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollectionName));
			}
			if (localMediaTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "mediaType"));

				elementList.add(localMediaType == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediaType));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddCollection parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddCollection object = new AddCollection();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addCollection".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddCollection) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "collectionName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setCollectionName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "mediaType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediaType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPermissionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getPermissionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected PermissionBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return PermissionBean
		 */
		public PermissionBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(PermissionBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getPermissionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getPermissionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPermissionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				GetPermissionsResponse object = new GetPermissionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPermissionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPermissionsResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(PermissionBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RestoreVersion implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "restoreVersion", "ns3");

		/**
		 * field for VersionPath
		 */

		protected java.lang.String localVersionPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVersionPath() {
			return localVersionPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionPath
		 */
		public void setVersionPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localVersionPathTracker = true;
			} else {
				localVersionPathTracker = true;

			}

			this.localVersionPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":restoreVersion",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "restoreVersion",
					               xmlWriter);
				}

			}
			if (localVersionPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "versionPath", xmlWriter);

				if (localVersionPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localVersionPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localVersionPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "versionPath"));

				elementList.add(localVersionPath == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static RestoreVersion parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				RestoreVersion object = new RestoreVersion();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"restoreVersion".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (RestoreVersion) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "versionPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setVersionPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CollectionContentBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = CollectionContentBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for ChildCount
		 */

		protected int localChildCount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localChildCountTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getChildCount() {
			return localChildCount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ChildCount
		 */
		public void setChildCount(int param) {

			// setting primitive attribute tracker to true

			if (param == java.lang.Integer.MIN_VALUE) {
				localChildCountTracker = false;

			} else {
				localChildCountTracker = true;
			}

			this.localChildCount = param;

		}

		/**
		 * field for ChildPaths
		 * This was an Array!
		 */

		protected java.lang.String[] localChildPaths;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localChildPathsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getChildPaths() {
			return localChildPaths;
		}

		/**
		 * validate the array for ChildPaths
		 */
		protected void validateChildPaths(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ChildPaths
		 */
		public void setChildPaths(java.lang.String[] param) {

			validateChildPaths(param);

			if (param != null) {
				// update the setting tracker
				localChildPathsTracker = true;
			} else {
				localChildPathsTracker = true;

			}

			this.localChildPaths = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addChildPaths(java.lang.String param) {
			if (localChildPaths == null) {
				localChildPaths = new java.lang.String[] {};
			}

			// update the setting tracker
			localChildPathsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localChildPaths);
			list.add(param);
			this.localChildPaths = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for CollectionTypes
		 * This was an Array!
		 */

		protected java.lang.String[] localCollectionTypes;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCollectionTypesTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getCollectionTypes() {
			return localCollectionTypes;
		}

		/**
		 * validate the array for CollectionTypes
		 */
		protected void validateCollectionTypes(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CollectionTypes
		 */
		public void setCollectionTypes(java.lang.String[] param) {

			validateCollectionTypes(param);

			if (param != null) {
				// update the setting tracker
				localCollectionTypesTracker = true;
			} else {
				localCollectionTypesTracker = true;

			}

			this.localCollectionTypes = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addCollectionTypes(java.lang.String param) {
			if (localCollectionTypes == null) {
				localCollectionTypes = new java.lang.String[] {};
			}

			// update the setting tracker
			localCollectionTypesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCollectionTypes);
			list.add(param);
			this.localCollectionTypes = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for PathWithVersion
		 */

		protected java.lang.String localPathWithVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathWithVersionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathWithVersion() {
			return localPathWithVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathWithVersion
		 */
		public void setPathWithVersion(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathWithVersionTracker = true;
			} else {
				localPathWithVersionTracker = true;

			}

			this.localPathWithVersion = param;

		}

		/**
		 * field for RemoteInstances
		 * This was an Array!
		 */

		protected java.lang.String[] localRemoteInstances;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRemoteInstancesTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getRemoteInstances() {
			return localRemoteInstances;
		}

		/**
		 * validate the array for RemoteInstances
		 */
		protected void validateRemoteInstances(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RemoteInstances
		 */
		public void setRemoteInstances(java.lang.String[] param) {

			validateRemoteInstances(param);

			if (param != null) {
				// update the setting tracker
				localRemoteInstancesTracker = true;
			} else {
				localRemoteInstancesTracker = true;

			}

			this.localRemoteInstances = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addRemoteInstances(java.lang.String param) {
			if (localRemoteInstances == null) {
				localRemoteInstances = new java.lang.String[] {};
			}

			// update the setting tracker
			localRemoteInstancesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localRemoteInstances);
			list.add(param);
			this.localRemoteInstances = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for VersionView
		 */

		protected boolean localVersionView;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionViewTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getVersionView() {
			return localVersionView;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionView
		 */
		public void setVersionView(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localVersionViewTracker = false;

			} else {
				localVersionViewTracker = true;
			}

			this.localVersionView = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":CollectionContentBean", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CollectionContentBean",
					               xmlWriter);
				}

			}
			if (localChildCountTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "childCount", xmlWriter);

				if (localChildCount == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("childCount cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChildCount));
				}

				xmlWriter.writeEndElement();
			}
			if (localChildPathsTracker) {
				if (localChildPaths != null) {
					namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localChildPaths.length; i++) {

						if (localChildPaths[i] != null) {

							writeStartElement(null, namespace, "childPaths", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChildPaths[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "childPaths", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "childPaths",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localCollectionTypesTracker) {
				if (localCollectionTypes != null) {
					namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localCollectionTypes.length; i++) {

						if (localCollectionTypes[i] != null) {

							writeStartElement(null, namespace, "collectionTypes", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollectionTypes[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "collectionTypes", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "collectionTypes",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localPathWithVersionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "pathWithVersion", xmlWriter);

				if (localPathWithVersion == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathWithVersion);

				}

				xmlWriter.writeEndElement();
			}
			if (localRemoteInstancesTracker) {
				if (localRemoteInstances != null) {
					namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localRemoteInstances.length; i++) {

						if (localRemoteInstances[i] != null) {

							writeStartElement(null, namespace, "remoteInstances", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemoteInstances[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "remoteInstances", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "remoteInstances",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localVersionViewTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "versionView", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("versionView cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localChildCountTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "childCount"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChildCount));
			}
			if (localChildPathsTracker) {
				if (localChildPaths != null) {
					for (int i = 0; i < localChildPaths.length; i++) {

						if (localChildPaths[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "childPaths"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChildPaths[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "childPaths"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "childPaths"));
					elementList.add(null);

				}

			}
			if (localCollectionTypesTracker) {
				if (localCollectionTypes != null) {
					for (int i = 0; i < localCollectionTypes.length; i++) {

						if (localCollectionTypes[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "collectionTypes"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollectionTypes[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "collectionTypes"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "collectionTypes"));
					elementList.add(null);

				}

			}
			if (localPathWithVersionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "pathWithVersion"));

				elementList.add(localPathWithVersion == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathWithVersion));
			}
			if (localRemoteInstancesTracker) {
				if (localRemoteInstances != null) {
					for (int i = 0; i < localRemoteInstances.length; i++) {

						if (localRemoteInstances[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "remoteInstances"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemoteInstances[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "remoteInstances"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "remoteInstances"));
					elementList.add(null);

				}

			}
			if (localVersionViewTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "versionView"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static CollectionContentBean parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                  throws java.lang.Exception {
				CollectionContentBean object = new CollectionContentBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"CollectionContentBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CollectionContentBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list2 = new java.util.ArrayList();

					java.util.ArrayList list3 = new java.util.ArrayList();

					java.util.ArrayList list5 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "childCount").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setChildCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setChildCount(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "childPaths").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list2.add(null);

							reader.next();
						} else {
							list2.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "childPaths").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list2.add(null);

										reader.next();
									} else {
										list2.add(reader.getElementText());
									}
								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setChildPaths((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "collectionTypes").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list3.add(null);

							reader.next();
						} else {
							list3.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "collectionTypes").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list3.add(null);

										reader.next();
									} else {
										list3.add(reader.getElementText());
									}
								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setCollectionTypes((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "pathWithVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathWithVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "remoteInstances").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list5.add(null);

							reader.next();
						} else {
							list5.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone5 = false;
						while (!loopDone5) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone5 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "remoteInstances").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list5.add(null);

										reader.next();
									} else {
										list5.add(reader.getElementText());
									}
								} else {
									loopDone5 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRemoteInstances((java.lang.String[]) list5.toArray(new java.lang.String[list5.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "versionView").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setVersionView(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetContentDownloadBeanResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getContentDownloadBeanResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected ContentDownloadBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return ContentDownloadBean
		 */
		public ContentDownloadBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(ContentDownloadBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getContentDownloadBeanResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getContentDownloadBeanResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetContentDownloadBeanResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                           throws java.lang.Exception {
				GetContentDownloadBeanResponse object = new GetContentDownloadBeanResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getContentDownloadBeanResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetContentDownloadBeanResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                      reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(ContentDownloadBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetResourceTreeEntryResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getResourceTreeEntryResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected ResourceTreeEntryBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return ResourceTreeEntryBean
		 */
		public ResourceTreeEntryBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(ResourceTreeEntryBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getResourceTreeEntryResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getResourceTreeEntryResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetResourceTreeEntryResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                         throws java.lang.Exception {
				GetResourceTreeEntryResponse object = new GetResourceTreeEntryResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getResourceTreeEntryResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetResourceTreeEntryResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(ResourceTreeEntryBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RenameResource implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "renameResource", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for OldResourcePath
		 */

		protected java.lang.String localOldResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localOldResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOldResourcePath() {
			return localOldResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OldResourcePath
		 */
		public void setOldResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localOldResourcePathTracker = true;
			} else {
				localOldResourcePathTracker = true;

			}

			this.localOldResourcePath = param;

		}

		/**
		 * field for NewResourceName
		 */

		protected java.lang.String localNewResourceName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNewResourceNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNewResourceName() {
			return localNewResourceName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NewResourceName
		 */
		public void setNewResourceName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localNewResourceNameTracker = true;
			} else {
				localNewResourceNameTracker = true;

			}

			this.localNewResourceName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":renameResource",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "renameResource",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localOldResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "oldResourcePath", xmlWriter);

				if (localOldResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localOldResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localNewResourceNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "newResourceName", xmlWriter);

				if (localNewResourceName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localNewResourceName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localOldResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "oldResourcePath"));

				elementList.add(localOldResourcePath == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOldResourcePath));
			}
			if (localNewResourceNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "newResourceName"));

				elementList.add(localNewResourceName == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNewResourceName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static RenameResource parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				RenameResource object = new RenameResource();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"renameResource".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (RenameResource) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "oldResourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setOldResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "newResourceName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setNewResourceName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetCollectionContentResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getCollectionContentResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected CollectionContentBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return CollectionContentBean
		 */
		public CollectionContentBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(CollectionContentBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getCollectionContentResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getCollectionContentResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetCollectionContentResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                         throws java.lang.Exception {
				GetCollectionContentResponse object = new GetCollectionContentResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getCollectionContentResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCollectionContentResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(CollectionContentBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ContentDownloadBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = ContentDownloadBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for Content
		 */

		protected javax.activation.DataHandler localContent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContentTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return javax.activation.DataHandler
		 */
		public javax.activation.DataHandler getContent() {
			return localContent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Content
		 */
		public void setContent(javax.activation.DataHandler param) {

			if (param != null) {
				// update the setting tracker
				localContentTracker = true;
			} else {
				localContentTracker = true;

			}

			this.localContent = param;

		}

		/**
		 * field for LastUpdatedTime
		 */

		protected java.util.Calendar localLastUpdatedTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLastUpdatedTimeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getLastUpdatedTime() {
			return localLastUpdatedTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastUpdatedTime
		 */
		public void setLastUpdatedTime(java.util.Calendar param) {

			if (param != null) {
				// update the setting tracker
				localLastUpdatedTimeTracker = true;
			} else {
				localLastUpdatedTimeTracker = true;

			}

			this.localLastUpdatedTime = param;

		}

		/**
		 * field for Mediatype
		 */

		protected java.lang.String localMediatype;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediatypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediatype() {
			return localMediatype;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mediatype
		 */
		public void setMediatype(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediatypeTracker = true;
			} else {
				localMediatypeTracker = true;

			}

			this.localMediatype = param;

		}

		/**
		 * field for ResourceName
		 */

		protected java.lang.String localResourceName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourceNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourceName() {
			return localResourceName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourceName
		 */
		public void setResourceName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourceNameTracker = true;
			} else {
				localResourceNameTracker = true;

			}

			this.localResourceName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":ContentDownloadBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ContentDownloadBean",
					               xmlWriter);
				}

			}
			if (localContentTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "content", xmlWriter);

				if (localContent != null) {
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localContent, null,
						                                                                 true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for content", ex);
					}
				} else {

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				}

				xmlWriter.writeEndElement();
			}
			if (localLastUpdatedTimeTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "lastUpdatedTime", xmlWriter);

				if (localLastUpdatedTime == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastUpdatedTime));

				}

				xmlWriter.writeEndElement();
			}
			if (localMediatypeTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "mediatype", xmlWriter);

				if (localMediatype == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediatype);

				}

				xmlWriter.writeEndElement();
			}
			if (localResourceNameTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "resourceName", xmlWriter);

				if (localResourceName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourceName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localContentTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "content"));

				elementList.add(localContent);
			}
			if (localLastUpdatedTimeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "lastUpdatedTime"));

				elementList.add(localLastUpdatedTime == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastUpdatedTime));
			}
			if (localMediatypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "mediatype"));

				elementList.add(localMediatype == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediatype));
			}
			if (localResourceNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "resourceName"));

				elementList.add(localResourceName == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourceName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ContentDownloadBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ContentDownloadBean object = new ContentDownloadBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ContentDownloadBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ContentDownloadBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "content").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setContent(null);
							reader.next();
						} else {

							object.setContent(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "lastUpdatedTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setLastUpdatedTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "mediatype").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediatype(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "resourceName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourceName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetTextContent implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getTextContent", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getTextContent",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getTextContent",
					               xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetTextContent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetTextContent object = new GetTextContent();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getTextContent".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetTextContent) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ResourceServiceException extends Exception implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = ResourceServiceException
		 * Namespace URI =
		 * http://utils.services.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns4
		 */

		/**
		 * field for Message
		 */

		protected java.lang.String localMessage;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMessageTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMessage() {
			return localMessage;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Message
		 */
		public void setMessage(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMessageTracker = true;
			} else {
				localMessageTracker = true;

			}

			this.localMessage = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			java.lang.String namespacePrefix =
			                                   registerPrefix(xmlWriter,
			                                                  "http://utils.services.resource.registry.carbon.wso2.org/xsd");
			if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
				                                                                           ":ResourceServiceException",
				               xmlWriter);
			} else {
				writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ResourceServiceException",
				               xmlWriter);
			}

			if (localExceptionTracker) {

				if (localException != null) {
					if (localException instanceof org.apache.axis2.databinding.ADBBean) {
						((org.apache.axis2.databinding.ADBBean) localException).serialize(new javax.xml.namespace.QName(
						                                                                                                "http://services.resource.registry.carbon.wso2.org",
						                                                                                                "Exception"),
						                                                                  xmlWriter, true);
					} else {
						writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "Exception",
						                  xmlWriter);
						org.apache.axis2.databinding.utils.ConverterUtil.serializeAnyType(localException, xmlWriter);
						xmlWriter.writeEndElement();
					}
				} else {

					// write null attribute
					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "Exception", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localMessageTracker) {
				namespace = "http://utils.services.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "message", xmlWriter);

				if (localMessage == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMessage);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://utils.services.resource.registry.carbon.wso2.org/xsd")) {
				return "ns4";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName("http://utils.services.resource.registry.carbon.wso2.org/xsd",
			                                             "ResourceServiceException"));
			if (localExceptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "Exception"));

				elementList.add(localException == null ? null : localException);
			}
			if (localMessageTracker) {
				elementList.add(new javax.xml.namespace.QName(
				                                              "http://utils.services.resource.registry.carbon.wso2.org/xsd",
				                                              "message"));

				elementList.add(localMessage == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessage));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ResourceServiceException parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                     throws java.lang.Exception {
				ResourceServiceException object = new ResourceServiceException();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ResourceServiceException".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ResourceServiceException) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "Exception").equals(reader.getName())) {

						object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,
						                                                                                      ExtensionMapper.class));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://utils.services.resource.registry.carbon.wso2.org/xsd",
					                                  "message").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ChangeUserPermissionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "changeUserPermissionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				local_returnTracker = false;

			} else {
				local_returnTracker = true;
			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":changeUserPermissionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "changeUserPermissionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ChangeUserPermissionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                          throws java.lang.Exception {
				ChangeUserPermissionsResponse object = new ChangeUserPermissionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"changeUserPermissionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ChangeUserPermissionsResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                     reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPermissions implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getPermissions", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getPermissions",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getPermissions",
					               xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPermissions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetPermissions object = new GetPermissions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPermissions".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPermissions) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPropertyResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getPropertyResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getPropertyResponse",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getPropertyResponse",
					               xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPropertyResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetPropertyResponse object = new GetPropertyResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPropertyResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPropertyResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ResourceServiceExceptionE implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "ResourceServiceException",
		                                                                                       "ns3");

		/**
		 * field for ResourceServiceException
		 */

		protected ResourceServiceException localResourceServiceException;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourceServiceExceptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return ResourceServiceException
		 */
		public ResourceServiceException getResourceServiceException() {
			return localResourceServiceException;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourceServiceException
		 */
		public void setResourceServiceException(ResourceServiceException param) {

			if (param != null) {
				// update the setting tracker
				localResourceServiceExceptionTracker = true;
			} else {
				localResourceServiceExceptionTracker = true;

			}

			this.localResourceServiceException = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":ResourceServiceException", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "ResourceServiceException", xmlWriter);
				}

			}
			if (localResourceServiceExceptionTracker) {
				if (localResourceServiceException == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org",
					                  "ResourceServiceException", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					localResourceServiceException.serialize(new javax.xml.namespace.QName(
					                                                                      "http://services.resource.registry.carbon.wso2.org",
					                                                                      "ResourceServiceException"),
					                                        xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourceServiceExceptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "ResourceServiceException"));

				elementList.add(localResourceServiceException == null ? null : localResourceServiceException);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ResourceServiceExceptionE parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                      throws java.lang.Exception {
				ResourceServiceExceptionE object = new ResourceServiceExceptionE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
						// Skip the element and report the null value. It cannot
						// have subelements.
						while (!reader.isEndElement())
							reader.next();

						return null;

					}

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ResourceServiceException".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ResourceServiceExceptionE) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "ResourceServiceException").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setResourceServiceException(null);
							reader.next();

							reader.next();

						} else {

							object.setResourceServiceException(ResourceServiceException.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetSessionResourcePathResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getSessionResourcePathResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getSessionResourcePathResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getSessionResourcePathResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetSessionResourcePathResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                           throws java.lang.Exception {
				GetSessionResourcePathResponse object = new GetSessionResourcePathResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getSessionResourcePathResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetSessionResourcePathResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                      reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VersionsBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = VersionsBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for LoggedIn
		 */

		protected boolean localLoggedIn;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLoggedInTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getLoggedIn() {
			return localLoggedIn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LoggedIn
		 */
		public void setLoggedIn(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localLoggedInTracker = false;

			} else {
				localLoggedInTracker = true;
			}

			this.localLoggedIn = param;

		}

		/**
		 * field for Permalink
		 */

		protected java.lang.String localPermalink;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPermalinkTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPermalink() {
			return localPermalink;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Permalink
		 */
		public void setPermalink(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPermalinkTracker = true;
			} else {
				localPermalinkTracker = true;

			}

			this.localPermalink = param;

		}

		/**
		 * field for PutAllowed
		 */

		protected boolean localPutAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPutAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getPutAllowed() {
			return localPutAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PutAllowed
		 */
		public void setPutAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localPutAllowedTracker = false;

			} else {
				localPutAllowedTracker = true;
			}

			this.localPutAllowed = param;

		}

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 * field for VersionPaths
		 * This was an Array!
		 */

		protected VersionPath[] localVersionPaths;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionPathsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return VersionPath[]
		 */
		public VersionPath[] getVersionPaths() {
			return localVersionPaths;
		}

		/**
		 * validate the array for VersionPaths
		 */
		protected void validateVersionPaths(VersionPath[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionPaths
		 */
		public void setVersionPaths(VersionPath[] param) {

			validateVersionPaths(param);

			if (param != null) {
				// update the setting tracker
				localVersionPathsTracker = true;
			} else {
				localVersionPathsTracker = true;

			}

			this.localVersionPaths = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            VersionPath
		 */
		public void addVersionPaths(VersionPath param) {
			if (localVersionPaths == null) {
				localVersionPaths = new VersionPath[] {};
			}

			// update the setting tracker
			localVersionPathsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localVersionPaths);
			list.add(param);
			this.localVersionPaths = (VersionPath[]) list.toArray(new VersionPath[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":VersionsBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "VersionsBean",
					               xmlWriter);
				}

			}
			if (localLoggedInTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "loggedIn", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("loggedIn cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLoggedIn));
				}

				xmlWriter.writeEndElement();
			}
			if (localPermalinkTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "permalink", xmlWriter);

				if (localPermalink == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPermalink);

				}

				xmlWriter.writeEndElement();
			}
			if (localPutAllowedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "putAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("putAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localResourcePathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localVersionPathsTracker) {
				if (localVersionPaths != null) {
					for (int i = 0; i < localVersionPaths.length; i++) {
						if (localVersionPaths[i] != null) {
							localVersionPaths[i].serialize(new javax.xml.namespace.QName(
							                                                             "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                                             "versionPaths"), xmlWriter);
						} else {

							writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd",
							                  "versionPaths", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "versionPaths",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localLoggedInTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "loggedIn"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLoggedIn));
			}
			if (localPermalinkTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "permalink"));

				elementList.add(localPermalink == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPermalink));
			}
			if (localPutAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "putAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
			}
			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}
			if (localVersionPathsTracker) {
				if (localVersionPaths != null) {
					for (int i = 0; i < localVersionPaths.length; i++) {

						if (localVersionPaths[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "versionPaths"));
							elementList.add(localVersionPaths[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "versionPaths"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "versionPaths"));
					elementList.add(localVersionPaths);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static VersionsBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				VersionsBean object = new VersionsBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"VersionsBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (VersionsBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list5 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "loggedIn").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setLoggedIn(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "permalink").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPermalink(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "putAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setPutAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "versionPaths").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list5.add(null);
							reader.next();
						} else {
							list5.add(VersionPath.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone5 = false;
						while (!loopDone5) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone5 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "versionPaths").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list5.add(null);
										reader.next();
									} else {
										list5.add(VersionPath.Factory.parse(reader));
									}
								} else {
									loopDone5 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setVersionPaths((VersionPath[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VersionPath.class,
						                                                                                                       list5));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CopyResource implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "copyResource", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for OldResourcePath
		 */

		protected java.lang.String localOldResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localOldResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOldResourcePath() {
			return localOldResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OldResourcePath
		 */
		public void setOldResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localOldResourcePathTracker = true;
			} else {
				localOldResourcePathTracker = true;

			}

			this.localOldResourcePath = param;

		}

		/**
		 * field for DestinationPath
		 */

		protected java.lang.String localDestinationPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDestinationPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDestinationPath() {
			return localDestinationPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DestinationPath
		 */
		public void setDestinationPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDestinationPathTracker = true;
			} else {
				localDestinationPathTracker = true;

			}

			this.localDestinationPath = param;

		}

		/**
		 * field for ResourceName
		 */

		protected java.lang.String localResourceName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourceNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourceName() {
			return localResourceName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourceName
		 */
		public void setResourceName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourceNameTracker = true;
			} else {
				localResourceNameTracker = true;

			}

			this.localResourceName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":copyResource",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "copyResource",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localOldResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "oldResourcePath", xmlWriter);

				if (localOldResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localOldResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localDestinationPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "destinationPath", xmlWriter);

				if (localDestinationPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDestinationPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localResourceNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourceName", xmlWriter);

				if (localResourceName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourceName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localOldResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "oldResourcePath"));

				elementList.add(localOldResourcePath == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOldResourcePath));
			}
			if (localDestinationPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "destinationPath"));

				elementList.add(localDestinationPath == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDestinationPath));
			}
			if (localResourceNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourceName"));

				elementList.add(localResourceName == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourceName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static CopyResource parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				CopyResource object = new CopyResource();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"copyResource".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CopyResource) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "oldResourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setOldResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "destinationPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDestinationPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourceName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourceName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddUserPermission implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addUserPermission",
		                                                                                       "ns3");

		/**
		 * field for PathToAuthorize
		 */

		protected java.lang.String localPathToAuthorize;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathToAuthorizeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathToAuthorize() {
			return localPathToAuthorize;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathToAuthorize
		 */
		public void setPathToAuthorize(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathToAuthorizeTracker = true;
			} else {
				localPathToAuthorizeTracker = true;

			}

			this.localPathToAuthorize = param;

		}

		/**
		 * field for UserToAuthorize
		 */

		protected java.lang.String localUserToAuthorize;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localUserToAuthorizeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUserToAuthorize() {
			return localUserToAuthorize;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserToAuthorize
		 */
		public void setUserToAuthorize(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localUserToAuthorizeTracker = true;
			} else {
				localUserToAuthorizeTracker = true;

			}

			this.localUserToAuthorize = param;

		}

		/**
		 * field for ActionToAuthorize
		 */

		protected java.lang.String localActionToAuthorize;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localActionToAuthorizeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getActionToAuthorize() {
			return localActionToAuthorize;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ActionToAuthorize
		 */
		public void setActionToAuthorize(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localActionToAuthorizeTracker = true;
			} else {
				localActionToAuthorizeTracker = true;

			}

			this.localActionToAuthorize = param;

		}

		/**
		 * field for PermissionType
		 */

		protected java.lang.String localPermissionType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPermissionTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPermissionType() {
			return localPermissionType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PermissionType
		 */
		public void setPermissionType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPermissionTypeTracker = true;
			} else {
				localPermissionTypeTracker = true;

			}

			this.localPermissionType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addUserPermission",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addUserPermission",
					               xmlWriter);
				}

			}
			if (localPathToAuthorizeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "pathToAuthorize", xmlWriter);

				if (localPathToAuthorize == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathToAuthorize);

				}

				xmlWriter.writeEndElement();
			}
			if (localUserToAuthorizeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "userToAuthorize", xmlWriter);

				if (localUserToAuthorize == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localUserToAuthorize);

				}

				xmlWriter.writeEndElement();
			}
			if (localActionToAuthorizeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "actionToAuthorize", xmlWriter);

				if (localActionToAuthorize == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localActionToAuthorize);

				}

				xmlWriter.writeEndElement();
			}
			if (localPermissionTypeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "permissionType", xmlWriter);

				if (localPermissionType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPermissionType);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathToAuthorizeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "pathToAuthorize"));

				elementList.add(localPathToAuthorize == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathToAuthorize));
			}
			if (localUserToAuthorizeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "userToAuthorize"));

				elementList.add(localUserToAuthorize == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserToAuthorize));
			}
			if (localActionToAuthorizeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "actionToAuthorize"));

				elementList.add(localActionToAuthorize == null
				                                              ? null
				                                              : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActionToAuthorize));
			}
			if (localPermissionTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "permissionType"));

				elementList.add(localPermissionType == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPermissionType));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddUserPermission parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddUserPermission object = new AddUserPermission();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addUserPermission".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddUserPermission) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "pathToAuthorize").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathToAuthorize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "userToAuthorize").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setUserToAuthorize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "actionToAuthorize").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setActionToAuthorize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "permissionType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPermissionType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetVersionsBean implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getVersionsBean", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getVersionsBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getVersionsBean",
					               xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetVersionsBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetVersionsBean object = new GetVersionsBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getVersionsBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetVersionsBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExtensionMapper {

		public static java.lang.Object getTypeObject(java.lang.String namespaceURI, java.lang.String typeName,
		                                             javax.xml.stream.XMLStreamReader reader)
		                                                                                     throws java.lang.Exception {

			if ("http://services.resource.registry.carbon.wso2.org".equals(namespaceURI) &&
			    "Exception".equals(typeName)) {

				return Exception.Factory.parse(reader);

			}

			if ("http://common.registry.carbon.wso2.org/xsd".equals(namespaceURI) && "ResourceData".equals(typeName)) {

				return ResourceData.Factory.parse(reader);

			}

			if ("http://common.registry.carbon.wso2.org/xsd".equals(namespaceURI) && "WebResourcePath".equals(typeName)) {

				return WebResourcePath.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "VersionsBean".equals(typeName)) {

				return VersionsBean.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "ContentBean".equals(typeName)) {

				return ContentBean.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "CollectionContentBean".equals(typeName)) {

				return CollectionContentBean.Factory.parse(reader);

			}

			if ("http://common.registry.carbon.wso2.org/xsd".equals(namespaceURI) && "TagCount".equals(typeName)) {

				return TagCount.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "MetadataBean".equals(typeName)) {

				return MetadataBean.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "VersionPath".equals(typeName)) {

				return VersionPath.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "PermissionBean".equals(typeName)) {

				return PermissionBean.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "ContentDownloadBean".equals(typeName)) {

				return ContentDownloadBean.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "PermissionEntry".equals(typeName)) {

				return PermissionEntry.Factory.parse(reader);

			}

			if ("http://beans.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "ResourceTreeEntryBean".equals(typeName)) {

				return ResourceTreeEntryBean.Factory.parse(reader);

			}

			if ("http://utils.services.resource.registry.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "ResourceServiceException".equals(typeName)) {

				return ResourceServiceException.Factory.parse(reader);

			}

			throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class GetResourceTreeEntry implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getResourceTreeEntry",
		                                                                                       "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getResourceTreeEntry",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getResourceTreeEntry",
					               xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetResourceTreeEntry parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                 throws java.lang.Exception {
				GetResourceTreeEntry object = new GetResourceTreeEntry();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getResourceTreeEntry".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetResourceTreeEntry) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetVersionsBeanResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getVersionsBeanResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected VersionsBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return VersionsBean
		 */
		public VersionsBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(VersionsBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getVersionsBeanResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getVersionsBeanResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetVersionsBeanResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				GetVersionsBeanResponse object = new GetVersionsBeanResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getVersionsBeanResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetVersionsBeanResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(VersionsBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ChangeUserPermissions implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "changeUserPermissions",
		                                                                                       "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 * field for PermissionInput
		 */

		protected java.lang.String localPermissionInput;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPermissionInputTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPermissionInput() {
			return localPermissionInput;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PermissionInput
		 */
		public void setPermissionInput(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPermissionInputTracker = true;
			} else {
				localPermissionInputTracker = true;

			}

			this.localPermissionInput = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":changeUserPermissions", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "changeUserPermissions",
					               xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localPermissionInputTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "permissionInput", xmlWriter);

				if (localPermissionInput == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPermissionInput);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}
			if (localPermissionInputTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "permissionInput"));

				elementList.add(localPermissionInput == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPermissionInput));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ChangeUserPermissions parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                  throws java.lang.Exception {
				ChangeUserPermissions object = new ChangeUserPermissions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"changeUserPermissions".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ChangeUserPermissions) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "permissionInput").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPermissionInput(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SetSessionResourcePath implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "setSessionResourcePath",
		                                                                                       "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":setSessionResourcePath", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "setSessionResourcePath", xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static SetSessionResourcePath parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				SetSessionResourcePath object = new SetSessionResourcePath();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"setSessionResourcePath".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SetSessionResourcePath) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetResourceDataResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getResourceDataResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 * This was an Array!
		 */

		protected ResourceData[] local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return ResourceData[]
		 */
		public ResourceData[] get_return() {
			return local_return;
		}

		/**
		 * validate the array for _return
		 */
		protected void validate_return(ResourceData[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(ResourceData[] param) {

			validate_return(param);

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            ResourceData
		 */
		public void add_return(ResourceData param) {
			if (local_return == null) {
				local_return = new ResourceData[] {};
			}

			// update the setting tracker
			local_returnTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);
			list.add(param);
			this.local_return = (ResourceData[]) list.toArray(new ResourceData[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getResourceDataResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getResourceDataResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return != null) {
					for (int i = 0; i < local_return.length; i++) {
						if (local_return[i] != null) {
							local_return[i].serialize(new javax.xml.namespace.QName(
							                                                        "http://services.resource.registry.carbon.wso2.org",
							                                                        "return"), xmlWriter);
						} else {

							writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return",
							                  xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				if (local_return != null) {
					for (int i = 0; i < local_return.length; i++) {

						if (local_return[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://services.resource.registry.carbon.wso2.org",
							                                              "return"));
							elementList.add(local_return[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://services.resource.registry.carbon.wso2.org",
							                                              "return"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                              "return"));
					elementList.add(local_return);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetResourceDataResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				GetResourceDataResponse object = new GetResourceDataResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getResourceDataResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetResourceDataResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);
							reader.next();
						} else {
							list1.add(ResourceData.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
								                                  "return").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);
										reader.next();
									} else {
										list1.add(ResourceData.Factory.parse(reader));
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.set_return((ResourceData[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(ResourceData.class,
						                                                                                                   list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TagCount implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = TagCount
		 * Namespace URI = http://common.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns2
		 */

		/**
		 * field for Key
		 */

		protected java.lang.String localKey;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localKeyTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getKey() {
			return localKey;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Key
		 */
		public void setKey(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localKeyTracker = true;
			} else {
				localKeyTracker = true;

			}

			this.localKey = param;

		}

		/**
		 * field for Value
		 */

		protected long localValue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localValueTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getValue() {
			return localValue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Value
		 */
		public void setValue(long param) {

			// setting primitive attribute tracker to true

			if (param == java.lang.Long.MIN_VALUE) {
				localValueTracker = true;

			} else {
				localValueTracker = true;
			}

			this.localValue = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://common.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":TagCount", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "TagCount", xmlWriter);
				}

			}
			if (localKeyTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "key", xmlWriter);

				if (localKey == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localKey);

				}

				xmlWriter.writeEndElement();
			}
			if (localValueTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "value", xmlWriter);

				if (localValue == java.lang.Long.MIN_VALUE) {

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://common.registry.carbon.wso2.org/xsd")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localKeyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "key"));

				elementList.add(localKey == null
				                                ? null
				                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKey));
			}
			if (localValueTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "value"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static TagCount parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				TagCount object = new TagCount();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"TagCount".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (TagCount) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "key").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "value").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						} else {

							object.setValue(java.lang.Long.MIN_VALUE);

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

						object.setValue(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UpdateTextContent implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "updateTextContent",
		                                                                                       "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 * field for ContentText
		 */

		protected java.lang.String localContentText;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContentTextTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getContentText() {
			return localContentText;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ContentText
		 */
		public void setContentText(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localContentTextTracker = true;
			} else {
				localContentTextTracker = true;

			}

			this.localContentText = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":updateTextContent",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "updateTextContent",
					               xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localContentTextTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "contentText", xmlWriter);

				if (localContentText == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localContentText);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}
			if (localContentTextTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "contentText"));

				elementList.add(localContentText == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContentText));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static UpdateTextContent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				UpdateTextContent object = new UpdateTextContent();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"updateTextContent".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (UpdateTextContent) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "contentText").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setContentText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MetadataBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = MetadataBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for ActiveResourcePath
		 */

		protected java.lang.String localActiveResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localActiveResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getActiveResourcePath() {
			return localActiveResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ActiveResourcePath
		 */
		public void setActiveResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localActiveResourcePathTracker = true;
			} else {
				localActiveResourcePathTracker = true;

			}

			this.localActiveResourcePath = param;

		}

		/**
		 * field for Author
		 */

		protected java.lang.String localAuthor;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAuthorTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAuthor() {
			return localAuthor;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Author
		 */
		public void setAuthor(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localAuthorTracker = true;
			} else {
				localAuthorTracker = true;

			}

			this.localAuthor = param;

		}

		/**
		 * field for Collection
		 */

		protected boolean localCollection;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCollectionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getCollection() {
			return localCollection;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Collection
		 */
		public void setCollection(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localCollectionTracker = false;

			} else {
				localCollectionTracker = true;
			}

			this.localCollection = param;

		}

		/**
		 * field for ContentPath
		 */

		protected java.lang.String localContentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getContentPath() {
			return localContentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ContentPath
		 */
		public void setContentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localContentPathTracker = true;
			} else {
				localContentPathTracker = true;

			}

			this.localContentPath = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 * field for FormattedCreatedOn
		 */

		protected java.lang.String localFormattedCreatedOn;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFormattedCreatedOnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFormattedCreatedOn() {
			return localFormattedCreatedOn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FormattedCreatedOn
		 */
		public void setFormattedCreatedOn(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localFormattedCreatedOnTracker = true;
			} else {
				localFormattedCreatedOnTracker = true;

			}

			this.localFormattedCreatedOn = param;

		}

		/**
		 * field for FormattedLastModified
		 */

		protected java.lang.String localFormattedLastModified;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFormattedLastModifiedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFormattedLastModified() {
			return localFormattedLastModified;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FormattedLastModified
		 */
		public void setFormattedLastModified(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localFormattedLastModifiedTracker = true;
			} else {
				localFormattedLastModifiedTracker = true;

			}

			this.localFormattedLastModified = param;

		}

		/**
		 * field for LastUpdater
		 */

		protected java.lang.String localLastUpdater;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLastUpdaterTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLastUpdater() {
			return localLastUpdater;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastUpdater
		 */
		public void setLastUpdater(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localLastUpdaterTracker = true;
			} else {
				localLastUpdaterTracker = true;

			}

			this.localLastUpdater = param;

		}

		/**
		 * field for MediaType
		 */

		protected java.lang.String localMediaType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediaTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediaType() {
			return localMediaType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MediaType
		 */
		public void setMediaType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediaTypeTracker = true;
			} else {
				localMediaTypeTracker = true;

			}

			this.localMediaType = param;

		}

		/**
		 * field for NavigatablePaths
		 * This was an Array!
		 */

		protected WebResourcePath[] localNavigatablePaths;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNavigatablePathsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return WebResourcePath[]
		 */
		public WebResourcePath[] getNavigatablePaths() {
			return localNavigatablePaths;
		}

		/**
		 * validate the array for NavigatablePaths
		 */
		protected void validateNavigatablePaths(WebResourcePath[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NavigatablePaths
		 */
		public void setNavigatablePaths(WebResourcePath[] param) {

			validateNavigatablePaths(param);

			if (param != null) {
				// update the setting tracker
				localNavigatablePathsTracker = true;
			} else {
				localNavigatablePathsTracker = true;

			}

			this.localNavigatablePaths = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            WebResourcePath
		 */
		public void addNavigatablePaths(WebResourcePath param) {
			if (localNavigatablePaths == null) {
				localNavigatablePaths = new WebResourcePath[] {};
			}

			// update the setting tracker
			localNavigatablePathsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localNavigatablePaths);
			list.add(param);
			this.localNavigatablePaths = (WebResourcePath[]) list.toArray(new WebResourcePath[list.size()]);

		}

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 * field for PathWithVersion
		 */

		protected java.lang.String localPathWithVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathWithVersionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathWithVersion() {
			return localPathWithVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathWithVersion
		 */
		public void setPathWithVersion(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathWithVersionTracker = true;
			} else {
				localPathWithVersionTracker = true;

			}

			this.localPathWithVersion = param;

		}

		/**
		 * field for Permalink
		 */

		protected java.lang.String localPermalink;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPermalinkTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPermalink() {
			return localPermalink;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Permalink
		 */
		public void setPermalink(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPermalinkTracker = true;
			} else {
				localPermalinkTracker = true;

			}

			this.localPermalink = param;

		}

		/**
		 * field for PutAllowed
		 */

		protected boolean localPutAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPutAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getPutAllowed() {
			return localPutAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PutAllowed
		 */
		public void setPutAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localPutAllowedTracker = false;

			} else {
				localPutAllowedTracker = true;
			}

			this.localPutAllowed = param;

		}

		/**
		 * field for ServerBaseURL
		 */

		protected java.lang.String localServerBaseURL;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localServerBaseURLTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getServerBaseURL() {
			return localServerBaseURL;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ServerBaseURL
		 */
		public void setServerBaseURL(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localServerBaseURLTracker = true;
			} else {
				localServerBaseURLTracker = true;

			}

			this.localServerBaseURL = param;

		}

		/**
		 * field for VersionView
		 */

		protected boolean localVersionView;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionViewTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getVersionView() {
			return localVersionView;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionView
		 */
		public void setVersionView(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localVersionViewTracker = false;

			} else {
				localVersionViewTracker = true;
			}

			this.localVersionView = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":MetadataBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "MetadataBean",
					               xmlWriter);
				}

			}
			if (localActiveResourcePathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "activeResourcePath", xmlWriter);

				if (localActiveResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localActiveResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localAuthorTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "author", xmlWriter);

				if (localAuthor == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAuthor);

				}

				xmlWriter.writeEndElement();
			}
			if (localCollectionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "collection", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("collection cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollection));
				}

				xmlWriter.writeEndElement();
			}
			if (localContentPathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "contentPath", xmlWriter);

				if (localContentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localContentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if (localFormattedCreatedOnTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "formattedCreatedOn", xmlWriter);

				if (localFormattedCreatedOn == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFormattedCreatedOn);

				}

				xmlWriter.writeEndElement();
			}
			if (localFormattedLastModifiedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "formattedLastModified", xmlWriter);

				if (localFormattedLastModified == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFormattedLastModified);

				}

				xmlWriter.writeEndElement();
			}
			if (localLastUpdaterTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "lastUpdater", xmlWriter);

				if (localLastUpdater == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localLastUpdater);

				}

				xmlWriter.writeEndElement();
			}
			if (localMediaTypeTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "mediaType", xmlWriter);

				if (localMediaType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediaType);

				}

				xmlWriter.writeEndElement();
			}
			if (localNavigatablePathsTracker) {
				if (localNavigatablePaths != null) {
					for (int i = 0; i < localNavigatablePaths.length; i++) {
						if (localNavigatablePaths[i] != null) {
							localNavigatablePaths[i].serialize(new javax.xml.namespace.QName(
							                                                                 "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                                                 "navigatablePaths"),
							                                   xmlWriter);
						} else {

							writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd",
							                  "navigatablePaths", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "navigatablePaths",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localPathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localPathWithVersionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "pathWithVersion", xmlWriter);

				if (localPathWithVersion == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathWithVersion);

				}

				xmlWriter.writeEndElement();
			}
			if (localPermalinkTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "permalink", xmlWriter);

				if (localPermalink == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPermalink);

				}

				xmlWriter.writeEndElement();
			}
			if (localPutAllowedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "putAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("putAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localServerBaseURLTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "serverBaseURL", xmlWriter);

				if (localServerBaseURL == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localServerBaseURL);

				}

				xmlWriter.writeEndElement();
			}
			if (localVersionViewTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "versionView", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("versionView cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localActiveResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "activeResourcePath"));

				elementList.add(localActiveResourcePath == null
				                                               ? null
				                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActiveResourcePath));
			}
			if (localAuthorTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "author"));

				elementList.add(localAuthor == null
				                                   ? null
				                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthor));
			}
			if (localCollectionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "collection"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollection));
			}
			if (localContentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "contentPath"));

				elementList.add(localContentPath == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContentPath));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}
			if (localFormattedCreatedOnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "formattedCreatedOn"));

				elementList.add(localFormattedCreatedOn == null
				                                               ? null
				                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormattedCreatedOn));
			}
			if (localFormattedLastModifiedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "formattedLastModified"));

				elementList.add(localFormattedLastModified == null
				                                                  ? null
				                                                  : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormattedLastModified));
			}
			if (localLastUpdaterTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "lastUpdater"));

				elementList.add(localLastUpdater == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastUpdater));
			}
			if (localMediaTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "mediaType"));

				elementList.add(localMediaType == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediaType));
			}
			if (localNavigatablePathsTracker) {
				if (localNavigatablePaths != null) {
					for (int i = 0; i < localNavigatablePaths.length; i++) {

						if (localNavigatablePaths[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "navigatablePaths"));
							elementList.add(localNavigatablePaths[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "navigatablePaths"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "navigatablePaths"));
					elementList.add(localNavigatablePaths);

				}

			}
			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}
			if (localPathWithVersionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "pathWithVersion"));

				elementList.add(localPathWithVersion == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathWithVersion));
			}
			if (localPermalinkTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "permalink"));

				elementList.add(localPermalink == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPermalink));
			}
			if (localPutAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "putAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
			}
			if (localServerBaseURLTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "serverBaseURL"));

				elementList.add(localServerBaseURL == null
				                                          ? null
				                                          : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerBaseURL));
			}
			if (localVersionViewTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "versionView"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static MetadataBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				MetadataBean object = new MetadataBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"MetadataBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (MetadataBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list10 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "activeResourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setActiveResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "author").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAuthor(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "collection").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setCollection(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "contentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setContentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "formattedCreatedOn").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFormattedCreatedOn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "formattedLastModified").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFormattedLastModified(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "lastUpdater").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setLastUpdater(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "mediaType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediaType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "navigatablePaths").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list10.add(null);
							reader.next();
						} else {
							list10.add(WebResourcePath.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone10 = false;
						while (!loopDone10) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone10 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "navigatablePaths").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list10.add(null);
										reader.next();
									} else {
										list10.add(WebResourcePath.Factory.parse(reader));
									}
								} else {
									loopDone10 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setNavigatablePaths((WebResourcePath[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(WebResourcePath.class,
						                                                                                                               list10));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "pathWithVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathWithVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "permalink").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPermalink(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "putAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setPutAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "serverBaseURL").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setServerBaseURL(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "versionView").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setVersionView(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VersionPath implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = VersionPath
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for ActiveResourcePath
		 */

		protected java.lang.String localActiveResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localActiveResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getActiveResourcePath() {
			return localActiveResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ActiveResourcePath
		 */
		public void setActiveResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localActiveResourcePathTracker = true;
			} else {
				localActiveResourcePathTracker = true;

			}

			this.localActiveResourcePath = param;

		}

		/**
		 * field for CompleteVersionPath
		 */

		protected java.lang.String localCompleteVersionPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCompleteVersionPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCompleteVersionPath() {
			return localCompleteVersionPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CompleteVersionPath
		 */
		public void setCompleteVersionPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localCompleteVersionPathTracker = true;
			} else {
				localCompleteVersionPathTracker = true;

			}

			this.localCompleteVersionPath = param;

		}

		/**
		 * field for UpdatedOn
		 */

		protected java.util.Calendar localUpdatedOn;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localUpdatedOnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getUpdatedOn() {
			return localUpdatedOn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UpdatedOn
		 */
		public void setUpdatedOn(java.util.Calendar param) {

			if (param != null) {
				// update the setting tracker
				localUpdatedOnTracker = true;
			} else {
				localUpdatedOnTracker = true;

			}

			this.localUpdatedOn = param;

		}

		/**
		 * field for Updater
		 */

		protected java.lang.String localUpdater;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localUpdaterTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUpdater() {
			return localUpdater;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Updater
		 */
		public void setUpdater(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localUpdaterTracker = true;
			} else {
				localUpdaterTracker = true;

			}

			this.localUpdater = param;

		}

		/**
		 * field for VersionNumber
		 */

		protected long localVersionNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionNumberTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getVersionNumber() {
			return localVersionNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionNumber
		 */
		public void setVersionNumber(long param) {

			// setting primitive attribute tracker to true

			if (param == java.lang.Long.MIN_VALUE) {
				localVersionNumberTracker = false;

			} else {
				localVersionNumberTracker = true;
			}

			this.localVersionNumber = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":VersionPath",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "VersionPath", xmlWriter);
				}

			}
			if (localActiveResourcePathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "activeResourcePath", xmlWriter);

				if (localActiveResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localActiveResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localCompleteVersionPathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "completeVersionPath", xmlWriter);

				if (localCompleteVersionPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localCompleteVersionPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localUpdatedOnTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "updatedOn", xmlWriter);

				if (localUpdatedOn == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedOn));

				}

				xmlWriter.writeEndElement();
			}
			if (localUpdaterTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "updater", xmlWriter);

				if (localUpdater == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localUpdater);

				}

				xmlWriter.writeEndElement();
			}
			if (localVersionNumberTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "versionNumber", xmlWriter);

				if (localVersionNumber == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("versionNumber cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionNumber));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localActiveResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "activeResourcePath"));

				elementList.add(localActiveResourcePath == null
				                                               ? null
				                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActiveResourcePath));
			}
			if (localCompleteVersionPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "completeVersionPath"));

				elementList.add(localCompleteVersionPath == null
				                                                ? null
				                                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCompleteVersionPath));
			}
			if (localUpdatedOnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "updatedOn"));

				elementList.add(localUpdatedOn == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdatedOn));
			}
			if (localUpdaterTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "updater"));

				elementList.add(localUpdater == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdater));
			}
			if (localVersionNumberTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "versionNumber"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionNumber));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static VersionPath parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				VersionPath object = new VersionPath();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"VersionPath".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (VersionPath) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "activeResourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setActiveResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "completeVersionPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setCompleteVersionPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "updatedOn").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setUpdatedOn(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "updater").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setUpdater(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "versionNumber").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setVersionNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setVersionNumber(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetCollectionContent implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getCollectionContent",
		                                                                                       "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getCollectionContent",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getCollectionContent",
					               xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetCollectionContent parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                 throws java.lang.Exception {
				GetCollectionContent object = new GetCollectionContent();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getCollectionContent".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCollectionContent) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddSymbolicLink implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addSymbolicLink", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for Name
		 */

		protected java.lang.String localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localNameTracker = true;
			} else {
				localNameTracker = true;

			}

			this.localName = param;

		}

		/**
		 * field for TargetPath
		 */

		protected java.lang.String localTargetPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localTargetPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTargetPath() {
			return localTargetPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TargetPath
		 */
		public void setTargetPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localTargetPathTracker = true;
			} else {
				localTargetPathTracker = true;

			}

			this.localTargetPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addSymbolicLink",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addSymbolicLink",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "name", xmlWriter);

				if (localName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			}
			if (localTargetPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "targetPath", xmlWriter);

				if (localTargetPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localTargetPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "name"));

				elementList.add(localName == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
			}
			if (localTargetPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "targetPath"));

				elementList.add(localTargetPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTargetPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddSymbolicLink parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddSymbolicLink object = new AddSymbolicLink();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addSymbolicLink".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddSymbolicLink) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "name").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "targetPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setTargetPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PermissionEntry implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = PermissionEntry
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for AuthorizeAllow
		 */

		protected boolean localAuthorizeAllow;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAuthorizeAllowTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getAuthorizeAllow() {
			return localAuthorizeAllow;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AuthorizeAllow
		 */
		public void setAuthorizeAllow(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localAuthorizeAllowTracker = false;

			} else {
				localAuthorizeAllowTracker = true;
			}

			this.localAuthorizeAllow = param;

		}

		/**
		 * field for AuthorizeDeny
		 */

		protected boolean localAuthorizeDeny;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAuthorizeDenyTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getAuthorizeDeny() {
			return localAuthorizeDeny;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AuthorizeDeny
		 */
		public void setAuthorizeDeny(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localAuthorizeDenyTracker = false;

			} else {
				localAuthorizeDenyTracker = true;
			}

			this.localAuthorizeDeny = param;

		}

		/**
		 * field for DeleteAllow
		 */

		protected boolean localDeleteAllow;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDeleteAllowTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getDeleteAllow() {
			return localDeleteAllow;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DeleteAllow
		 */
		public void setDeleteAllow(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localDeleteAllowTracker = false;

			} else {
				localDeleteAllowTracker = true;
			}

			this.localDeleteAllow = param;

		}

		/**
		 * field for DeleteDeny
		 */

		protected boolean localDeleteDeny;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDeleteDenyTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getDeleteDeny() {
			return localDeleteDeny;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DeleteDeny
		 */
		public void setDeleteDeny(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localDeleteDenyTracker = false;

			} else {
				localDeleteDenyTracker = true;
			}

			this.localDeleteDeny = param;

		}

		/**
		 * field for ReadAllow
		 */

		protected boolean localReadAllow;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localReadAllowTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getReadAllow() {
			return localReadAllow;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReadAllow
		 */
		public void setReadAllow(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localReadAllowTracker = false;

			} else {
				localReadAllowTracker = true;
			}

			this.localReadAllow = param;

		}

		/**
		 * field for ReadDeny
		 */

		protected boolean localReadDeny;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localReadDenyTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getReadDeny() {
			return localReadDeny;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReadDeny
		 */
		public void setReadDeny(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localReadDenyTracker = false;

			} else {
				localReadDenyTracker = true;
			}

			this.localReadDeny = param;

		}

		/**
		 * field for UserName
		 */

		protected java.lang.String localUserName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localUserNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUserName() {
			return localUserName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserName
		 */
		public void setUserName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localUserNameTracker = true;
			} else {
				localUserNameTracker = true;

			}

			this.localUserName = param;

		}

		/**
		 * field for WriteAllow
		 */

		protected boolean localWriteAllow;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWriteAllowTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getWriteAllow() {
			return localWriteAllow;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WriteAllow
		 */
		public void setWriteAllow(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localWriteAllowTracker = false;

			} else {
				localWriteAllowTracker = true;
			}

			this.localWriteAllow = param;

		}

		/**
		 * field for WriteDeny
		 */

		protected boolean localWriteDeny;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWriteDenyTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getWriteDeny() {
			return localWriteDeny;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WriteDeny
		 */
		public void setWriteDeny(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localWriteDenyTracker = false;

			} else {
				localWriteDenyTracker = true;
			}

			this.localWriteDeny = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":PermissionEntry",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "PermissionEntry",
					               xmlWriter);
				}

			}
			if (localAuthorizeAllowTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "authorizeAllow", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("authorizeAllow cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorizeAllow));
				}

				xmlWriter.writeEndElement();
			}
			if (localAuthorizeDenyTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "authorizeDeny", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("authorizeDeny cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorizeDeny));
				}

				xmlWriter.writeEndElement();
			}
			if (localDeleteAllowTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "deleteAllow", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("deleteAllow cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteAllow));
				}

				xmlWriter.writeEndElement();
			}
			if (localDeleteDenyTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "deleteDeny", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("deleteDeny cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteDeny));
				}

				xmlWriter.writeEndElement();
			}
			if (localReadAllowTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "readAllow", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("readAllow cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadAllow));
				}

				xmlWriter.writeEndElement();
			}
			if (localReadDenyTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "readDeny", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("readDeny cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadDeny));
				}

				xmlWriter.writeEndElement();
			}
			if (localUserNameTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "userName", xmlWriter);

				if (localUserName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localUserName);

				}

				xmlWriter.writeEndElement();
			}
			if (localWriteAllowTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "writeAllow", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("writeAllow cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWriteAllow));
				}

				xmlWriter.writeEndElement();
			}
			if (localWriteDenyTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "writeDeny", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("writeDeny cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWriteDeny));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAuthorizeAllowTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "authorizeAllow"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorizeAllow));
			}
			if (localAuthorizeDenyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "authorizeDeny"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorizeDeny));
			}
			if (localDeleteAllowTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "deleteAllow"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteAllow));
			}
			if (localDeleteDenyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "deleteDeny"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteDeny));
			}
			if (localReadAllowTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "readAllow"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadAllow));
			}
			if (localReadDenyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "readDeny"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReadDeny));
			}
			if (localUserNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "userName"));

				elementList.add(localUserName == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserName));
			}
			if (localWriteAllowTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "writeAllow"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWriteAllow));
			}
			if (localWriteDenyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "writeDeny"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWriteDeny));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static PermissionEntry parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				PermissionEntry object = new PermissionEntry();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"PermissionEntry".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (PermissionEntry) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "authorizeAllow").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setAuthorizeAllow(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "authorizeDeny").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setAuthorizeDeny(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "deleteAllow").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setDeleteAllow(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "deleteDeny").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setDeleteDeny(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "readAllow").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setReadAllow(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "readDeny").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setReadDeny(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "userName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setUserName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "writeAllow").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setWriteAllow(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "writeDeny").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setWriteDeny(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Exception implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = Exception
		 * Namespace URI = http://services.resource.registry.carbon.wso2.org
		 * Namespace Prefix = ns3
		 */

		/**
		 * field for Exception
		 */

		protected java.lang.Object localException;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localExceptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.Object
		 */
		public java.lang.Object getException() {
			return localException;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Exception
		 */
		public void setException(java.lang.Object param) {

			if (param != null) {
				// update the setting tracker
				localExceptionTracker = true;
			} else {
				localExceptionTracker = true;

			}

			this.localException = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":Exception", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Exception", xmlWriter);
				}

			}
			if (localExceptionTracker) {

				if (localException != null) {
					if (localException instanceof org.apache.axis2.databinding.ADBBean) {
						((org.apache.axis2.databinding.ADBBean) localException).serialize(new javax.xml.namespace.QName(
						                                                                                                "http://services.resource.registry.carbon.wso2.org",
						                                                                                                "Exception"),
						                                                                  xmlWriter, true);
					} else {
						writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "Exception",
						                  xmlWriter);
						org.apache.axis2.databinding.utils.ConverterUtil.serializeAnyType(localException, xmlWriter);
						xmlWriter.writeEndElement();
					}
				} else {

					// write null attribute
					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "Exception", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localExceptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "Exception"));

				elementList.add(localException == null ? null : localException);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static Exception parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				Exception object = new Exception();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"Exception".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Exception) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "Exception").equals(reader.getName())) {

						object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,
						                                                                                      ExtensionMapper.class));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddResource implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addResource", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 * field for MediaType
		 */

		protected java.lang.String localMediaType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediaTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediaType() {
			return localMediaType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MediaType
		 */
		public void setMediaType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediaTypeTracker = true;
			} else {
				localMediaTypeTracker = true;

			}

			this.localMediaType = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 * field for Content
		 */

		protected javax.activation.DataHandler localContent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContentTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return javax.activation.DataHandler
		 */
		public javax.activation.DataHandler getContent() {
			return localContent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Content
		 */
		public void setContent(javax.activation.DataHandler param) {

			if (param != null) {
				// update the setting tracker
				localContentTracker = true;
			} else {
				localContentTracker = true;

			}

			this.localContent = param;

		}

		/**
		 * field for SymlinkLocation
		 */

		protected java.lang.String localSymlinkLocation;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localSymlinkLocationTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSymlinkLocation() {
			return localSymlinkLocation;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SymlinkLocation
		 */
		public void setSymlinkLocation(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localSymlinkLocationTracker = true;
			} else {
				localSymlinkLocationTracker = true;

			}

			this.localSymlinkLocation = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addResource",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addResource", xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localMediaTypeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "mediaType", xmlWriter);

				if (localMediaType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediaType);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if (localContentTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "content", xmlWriter);

				if (localContent != null) {
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localContent, null,
						                                                                 true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for content", ex);
					}
				} else {

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				}

				xmlWriter.writeEndElement();
			}
			if (localSymlinkLocationTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "symlinkLocation", xmlWriter);

				if (localSymlinkLocation == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localSymlinkLocation);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}
			if (localMediaTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "mediaType"));

				elementList.add(localMediaType == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediaType));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}
			if (localContentTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "content"));

				elementList.add(localContent);
			}
			if (localSymlinkLocationTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "symlinkLocation"));

				elementList.add(localSymlinkLocation == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSymlinkLocation));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddResource parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddResource object = new AddResource();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addResource".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddResource) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "mediaType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediaType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "content").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setContent(null);
							reader.next();
						} else {

							object.setContent(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "symlinkLocation").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setSymlinkLocation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetContentDownloadBean implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getContentDownloadBean",
		                                                                                       "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getContentDownloadBean", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getContentDownloadBean", xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetContentDownloadBean parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				GetContentDownloadBean object = new GetContentDownloadBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getContentDownloadBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetContentDownloadBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetCollectionMediatypeDefinitionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getCollectionMediatypeDefinitionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getCollectionMediatypeDefinitionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getCollectionMediatypeDefinitionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetCollectionMediatypeDefinitionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                                      throws java.lang.Exception {
				GetCollectionMediatypeDefinitionsResponse object = new GetCollectionMediatypeDefinitionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getCollectionMediatypeDefinitionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCollectionMediatypeDefinitionsResponse) ExtensionMapper.getTypeObject(nsUri,
								                                                                                 type,
								                                                                                 reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddRolePermissionResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addRolePermissionResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				local_returnTracker = false;

			} else {
				local_returnTracker = true;
			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":addRolePermissionResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "addRolePermissionResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddRolePermissionResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                      throws java.lang.Exception {
				AddRolePermissionResponse object = new AddRolePermissionResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addRolePermissionResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddRolePermissionResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ResourceData implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = ResourceData
		 * Namespace URI = http://common.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns2
		 */

		/**
		 * field for Absent
		 */

		protected java.lang.String localAbsent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAbsentTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAbsent() {
			return localAbsent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Absent
		 */
		public void setAbsent(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localAbsentTracker = true;
			} else {
				localAbsentTracker = true;

			}

			this.localAbsent = param;

		}

		/**
		 * field for AuthorUserName
		 */

		protected java.lang.String localAuthorUserName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAuthorUserNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAuthorUserName() {
			return localAuthorUserName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AuthorUserName
		 */
		public void setAuthorUserName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localAuthorUserNameTracker = true;
			} else {
				localAuthorUserNameTracker = true;

			}

			this.localAuthorUserName = param;

		}

		/**
		 * field for AverageRating
		 */

		protected float localAverageRating;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAverageRatingTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return float
		 */
		public float getAverageRating() {
			return localAverageRating;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AverageRating
		 */
		public void setAverageRating(float param) {

			// setting primitive attribute tracker to true

			if (java.lang.Float.isNaN(param)) {
				localAverageRatingTracker = false;

			} else {
				localAverageRatingTracker = true;
			}

			this.localAverageRating = param;

		}

		/**
		 * field for AverageStars
		 * This was an Array!
		 */

		protected java.lang.String[] localAverageStars;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAverageStarsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getAverageStars() {
			return localAverageStars;
		}

		/**
		 * validate the array for AverageStars
		 */
		protected void validateAverageStars(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AverageStars
		 */
		public void setAverageStars(java.lang.String[] param) {

			validateAverageStars(param);

			if (param != null) {
				// update the setting tracker
				localAverageStarsTracker = true;
			} else {
				localAverageStarsTracker = true;

			}

			this.localAverageStars = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addAverageStars(java.lang.String param) {
			if (localAverageStars == null) {
				localAverageStars = new java.lang.String[] {};
			}

			// update the setting tracker
			localAverageStarsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAverageStars);
			list.add(param);
			this.localAverageStars = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for CreatedOn
		 */

		protected java.util.Calendar localCreatedOn;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCreatedOnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getCreatedOn() {
			return localCreatedOn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CreatedOn
		 */
		public void setCreatedOn(java.util.Calendar param) {

			if (param != null) {
				// update the setting tracker
				localCreatedOnTracker = true;
			} else {
				localCreatedOnTracker = true;

			}

			this.localCreatedOn = param;

		}

		/**
		 * field for DeleteAllowed
		 */

		protected boolean localDeleteAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDeleteAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getDeleteAllowed() {
			return localDeleteAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DeleteAllowed
		 */
		public void setDeleteAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localDeleteAllowedTracker = false;

			} else {
				localDeleteAllowedTracker = true;
			}

			this.localDeleteAllowed = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 * field for ExternalLink
		 */

		protected boolean localExternalLink;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localExternalLinkTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getExternalLink() {
			return localExternalLink;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExternalLink
		 */
		public void setExternalLink(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localExternalLinkTracker = false;

			} else {
				localExternalLinkTracker = true;
			}

			this.localExternalLink = param;

		}

		/**
		 * field for FormattedCreatedOn
		 */

		protected java.lang.String localFormattedCreatedOn;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFormattedCreatedOnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFormattedCreatedOn() {
			return localFormattedCreatedOn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FormattedCreatedOn
		 */
		public void setFormattedCreatedOn(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localFormattedCreatedOnTracker = true;
			} else {
				localFormattedCreatedOnTracker = true;

			}

			this.localFormattedCreatedOn = param;

		}

		/**
		 * field for GetAllowed
		 */

		protected boolean localGetAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localGetAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getGetAllowed() {
			return localGetAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            GetAllowed
		 */
		public void setGetAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localGetAllowedTracker = false;

			} else {
				localGetAllowedTracker = true;
			}

			this.localGetAllowed = param;

		}

		/**
		 * field for Link
		 */

		protected boolean localLink;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLinkTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getLink() {
			return localLink;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Link
		 */
		public void setLink(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localLinkTracker = false;

			} else {
				localLinkTracker = true;
			}

			this.localLink = param;

		}

		/**
		 * field for Mounted
		 */

		protected boolean localMounted;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMountedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getMounted() {
			return localMounted;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mounted
		 */
		public void setMounted(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localMountedTracker = false;

			} else {
				localMountedTracker = true;
			}

			this.localMounted = param;

		}

		/**
		 * field for Name
		 */

		protected java.lang.String localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localNameTracker = true;
			} else {
				localNameTracker = true;

			}

			this.localName = param;

		}

		/**
		 * field for PutAllowed
		 */

		protected boolean localPutAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPutAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getPutAllowed() {
			return localPutAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PutAllowed
		 */
		public void setPutAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localPutAllowedTracker = false;

			} else {
				localPutAllowedTracker = true;
			}

			this.localPutAllowed = param;

		}

		/**
		 * field for RealPath
		 */

		protected java.lang.String localRealPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRealPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRealPath() {
			return localRealPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RealPath
		 */
		public void setRealPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localRealPathTracker = true;
			} else {
				localRealPathTracker = true;

			}

			this.localRealPath = param;

		}

		/**
		 * field for RelativePath
		 */

		protected java.lang.String localRelativePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRelativePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRelativePath() {
			return localRelativePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RelativePath
		 */
		public void setRelativePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localRelativePathTracker = true;
			} else {
				localRelativePathTracker = true;

			}

			this.localRelativePath = param;

		}

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 * field for ResourceType
		 */

		protected java.lang.String localResourceType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourceTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourceType() {
			return localResourceType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourceType
		 */
		public void setResourceType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourceTypeTracker = true;
			} else {
				localResourceTypeTracker = true;

			}

			this.localResourceType = param;

		}

		/**
		 * field for TagCounts
		 * This was an Array!
		 */

		protected TagCount[] localTagCounts;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localTagCountsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return TagCount[]
		 */
		public TagCount[] getTagCounts() {
			return localTagCounts;
		}

		/**
		 * validate the array for TagCounts
		 */
		protected void validateTagCounts(TagCount[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TagCounts
		 */
		public void setTagCounts(TagCount[] param) {

			validateTagCounts(param);

			if (param != null) {
				// update the setting tracker
				localTagCountsTracker = true;
			} else {
				localTagCountsTracker = true;

			}

			this.localTagCounts = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            TagCount
		 */
		public void addTagCounts(TagCount param) {
			if (localTagCounts == null) {
				localTagCounts = new TagCount[] {};
			}

			// update the setting tracker
			localTagCountsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localTagCounts);
			list.add(param);
			this.localTagCounts = (TagCount[]) list.toArray(new TagCount[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://common.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":ResourceData",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ResourceData",
					               xmlWriter);
				}

			}
			if (localAbsentTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "absent", xmlWriter);

				if (localAbsent == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAbsent);

				}

				xmlWriter.writeEndElement();
			}
			if (localAuthorUserNameTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "authorUserName", xmlWriter);

				if (localAuthorUserName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAuthorUserName);

				}

				xmlWriter.writeEndElement();
			}
			if (localAverageRatingTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "averageRating", xmlWriter);

				if (java.lang.Float.isNaN(localAverageRating)) {

					throw new org.apache.axis2.databinding.ADBException("averageRating cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageRating));
				}

				xmlWriter.writeEndElement();
			}
			if (localAverageStarsTracker) {
				if (localAverageStars != null) {
					namespace = "http://common.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localAverageStars.length; i++) {

						if (localAverageStars[i] != null) {

							writeStartElement(null, namespace, "averageStars", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageStars[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://common.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "averageStars", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://common.registry.carbon.wso2.org/xsd", "averageStars", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localCreatedOnTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "createdOn", xmlWriter);

				if (localCreatedOn == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedOn));

				}

				xmlWriter.writeEndElement();
			}
			if (localDeleteAllowedTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "deleteAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("deleteAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if (localExternalLinkTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "externalLink", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("externalLink cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExternalLink));
				}

				xmlWriter.writeEndElement();
			}
			if (localFormattedCreatedOnTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "formattedCreatedOn", xmlWriter);

				if (localFormattedCreatedOn == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFormattedCreatedOn);

				}

				xmlWriter.writeEndElement();
			}
			if (localGetAllowedTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "getAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("getAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localLinkTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "link", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("link cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLink));
				}

				xmlWriter.writeEndElement();
			}
			if (localMountedTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "mounted", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("mounted cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMounted));
				}

				xmlWriter.writeEndElement();
			}
			if (localNameTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "name", xmlWriter);

				if (localName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			}
			if (localPutAllowedTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "putAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("putAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localRealPathTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "realPath", xmlWriter);

				if (localRealPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localRealPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localRelativePathTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "relativePath", xmlWriter);

				if (localRelativePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localRelativePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localResourcePathTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localResourceTypeTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "resourceType", xmlWriter);

				if (localResourceType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourceType);

				}

				xmlWriter.writeEndElement();
			}
			if (localTagCountsTracker) {
				if (localTagCounts != null) {
					for (int i = 0; i < localTagCounts.length; i++) {
						if (localTagCounts[i] != null) {
							localTagCounts[i].serialize(new javax.xml.namespace.QName(
							                                                          "http://common.registry.carbon.wso2.org/xsd",
							                                                          "tagCounts"), xmlWriter);
						} else {

							writeStartElement(null, "http://common.registry.carbon.wso2.org/xsd", "tagCounts",
							                  xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://common.registry.carbon.wso2.org/xsd", "tagCounts", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://common.registry.carbon.wso2.org/xsd")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAbsentTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "absent"));

				elementList.add(localAbsent == null
				                                   ? null
				                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAbsent));
			}
			if (localAuthorUserNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "authorUserName"));

				elementList.add(localAuthorUserName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorUserName));
			}
			if (localAverageRatingTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "averageRating"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageRating));
			}
			if (localAverageStarsTracker) {
				if (localAverageStars != null) {
					for (int i = 0; i < localAverageStars.length; i++) {

						if (localAverageStars[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
							                                              "averageStars"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAverageStars[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
							                                              "averageStars"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
					                                              "averageStars"));
					elementList.add(null);

				}

			}
			if (localCreatedOnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "createdOn"));

				elementList.add(localCreatedOn == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreatedOn));
			}
			if (localDeleteAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "deleteAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteAllowed));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}
			if (localExternalLinkTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "externalLink"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExternalLink));
			}
			if (localFormattedCreatedOnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "formattedCreatedOn"));

				elementList.add(localFormattedCreatedOn == null
				                                               ? null
				                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormattedCreatedOn));
			}
			if (localGetAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "getAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetAllowed));
			}
			if (localLinkTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "link"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLink));
			}
			if (localMountedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "mounted"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMounted));
			}
			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "name"));

				elementList.add(localName == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
			}
			if (localPutAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "putAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
			}
			if (localRealPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "realPath"));

				elementList.add(localRealPath == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRealPath));
			}
			if (localRelativePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "relativePath"));

				elementList.add(localRelativePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRelativePath));
			}
			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}
			if (localResourceTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "resourceType"));

				elementList.add(localResourceType == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourceType));
			}
			if (localTagCountsTracker) {
				if (localTagCounts != null) {
					for (int i = 0; i < localTagCounts.length; i++) {

						if (localTagCounts[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
							                                              "tagCounts"));
							elementList.add(localTagCounts[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
							                                              "tagCounts"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
					                                              "tagCounts"));
					elementList.add(localTagCounts);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ResourceData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ResourceData object = new ResourceData();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ResourceData".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ResourceData) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list4 = new java.util.ArrayList();

					java.util.ArrayList list19 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "absent").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAbsent(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "authorUserName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAuthorUserName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "averageRating").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setAverageRating(org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setAverageRating(java.lang.Float.NaN);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "averageStars").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list4.add(null);

							reader.next();
						} else {
							list4.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone4 = false;
						while (!loopDone4) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone4 = true;
							} else {
								if (new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
								                                  "averageStars").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list4.add(null);

										reader.next();
									} else {
										list4.add(reader.getElementText());
									}
								} else {
									loopDone4 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAverageStars((java.lang.String[]) list4.toArray(new java.lang.String[list4.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "createdOn").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setCreatedOn(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "deleteAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setDeleteAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "externalLink").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setExternalLink(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
					                                  "formattedCreatedOn").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFormattedCreatedOn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "getAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setGetAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "link").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setLink(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "mounted").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setMounted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "name").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "putAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setPutAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "realPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setRealPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "relativePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setRelativePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "resourceType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourceType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "tagCounts").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list19.add(null);
							reader.next();
						} else {
							list19.add(TagCount.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone19 = false;
						while (!loopDone19) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone19 = true;
							} else {
								if (new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
								                                  "tagCounts").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list19.add(null);
										reader.next();
									} else {
										list19.add(TagCount.Factory.parse(reader));
									}
								} else {
									loopDone19 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setTagCounts((TagCount[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(TagCount.class,
						                                                                                                 list19));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddRemoteLink implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addRemoteLink", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for Name
		 */

		protected java.lang.String localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localNameTracker = true;
			} else {
				localNameTracker = true;

			}

			this.localName = param;

		}

		/**
		 * field for Instance
		 */

		protected java.lang.String localInstance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localInstanceTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getInstance() {
			return localInstance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Instance
		 */
		public void setInstance(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localInstanceTracker = true;
			} else {
				localInstanceTracker = true;

			}

			this.localInstance = param;

		}

		/**
		 * field for TargetPath
		 */

		protected java.lang.String localTargetPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localTargetPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTargetPath() {
			return localTargetPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TargetPath
		 */
		public void setTargetPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localTargetPathTracker = true;
			} else {
				localTargetPathTracker = true;

			}

			this.localTargetPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addRemoteLink",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addRemoteLink",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "name", xmlWriter);

				if (localName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			}
			if (localInstanceTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "instance", xmlWriter);

				if (localInstance == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localInstance);

				}

				xmlWriter.writeEndElement();
			}
			if (localTargetPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "targetPath", xmlWriter);

				if (localTargetPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localTargetPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "name"));

				elementList.add(localName == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
			}
			if (localInstanceTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "instance"));

				elementList.add(localInstance == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInstance));
			}
			if (localTargetPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "targetPath"));

				elementList.add(localTargetPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTargetPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddRemoteLink parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddRemoteLink object = new AddRemoteLink();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addRemoteLink".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddRemoteLink) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "name").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "instance").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setInstance(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "targetPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setTargetPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddTextResource implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addTextResource", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for FileName
		 */

		protected java.lang.String localFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFileNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFileName() {
			return localFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FileName
		 */
		public void setFileName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localFileNameTracker = true;
			} else {
				localFileNameTracker = true;

			}

			this.localFileName = param;

		}

		/**
		 * field for MediaType
		 */

		protected java.lang.String localMediaType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediaTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediaType() {
			return localMediaType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MediaType
		 */
		public void setMediaType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediaTypeTracker = true;
			} else {
				localMediaTypeTracker = true;

			}

			this.localMediaType = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 * field for Content
		 */

		protected java.lang.String localContent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContentTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getContent() {
			return localContent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Content
		 */
		public void setContent(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localContentTracker = true;
			} else {
				localContentTracker = true;

			}

			this.localContent = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addTextResource",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addTextResource",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localFileNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "fileName", xmlWriter);

				if (localFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localMediaTypeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "mediaType", xmlWriter);

				if (localMediaType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediaType);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if (localContentTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "content", xmlWriter);

				if (localContent == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localContent);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "fileName"));

				elementList.add(localFileName == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
			}
			if (localMediaTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "mediaType"));

				elementList.add(localMediaType == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediaType));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}
			if (localContentTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "content"));

				elementList.add(localContent == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContent));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddTextResource parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddTextResource object = new AddTextResource();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addTextResource".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddTextResource) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "fileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "mediaType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediaType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "content").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setContent(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ContentBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = ContentBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for Absent
		 */

		protected java.lang.String localAbsent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAbsentTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAbsent() {
			return localAbsent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Absent
		 */
		public void setAbsent(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localAbsentTracker = true;
			} else {
				localAbsentTracker = true;

			}

			this.localAbsent = param;

		}

		/**
		 * field for Collection
		 */

		protected boolean localCollection;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCollectionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getCollection() {
			return localCollection;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Collection
		 */
		public void setCollection(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localCollectionTracker = false;

			} else {
				localCollectionTracker = true;
			}

			this.localCollection = param;

		}

		/**
		 * field for ContentPath
		 */

		protected java.lang.String localContentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getContentPath() {
			return localContentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ContentPath
		 */
		public void setContentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localContentPathTracker = true;
			} else {
				localContentPathTracker = true;

			}

			this.localContentPath = param;

		}

		/**
		 * field for LoggedIn
		 */

		protected boolean localLoggedIn;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLoggedInTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getLoggedIn() {
			return localLoggedIn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LoggedIn
		 */
		public void setLoggedIn(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localLoggedInTracker = false;

			} else {
				localLoggedInTracker = true;
			}

			this.localLoggedIn = param;

		}

		/**
		 * field for MediaType
		 */

		protected java.lang.String localMediaType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediaTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediaType() {
			return localMediaType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MediaType
		 */
		public void setMediaType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediaTypeTracker = true;
			} else {
				localMediaTypeTracker = true;

			}

			this.localMediaType = param;

		}

		/**
		 * field for PathWithVersion
		 */

		protected java.lang.String localPathWithVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathWithVersionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathWithVersion() {
			return localPathWithVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathWithVersion
		 */
		public void setPathWithVersion(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathWithVersionTracker = true;
			} else {
				localPathWithVersionTracker = true;

			}

			this.localPathWithVersion = param;

		}

		/**
		 * field for PutAllowed
		 */

		protected boolean localPutAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPutAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getPutAllowed() {
			return localPutAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PutAllowed
		 */
		public void setPutAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localPutAllowedTracker = false;

			} else {
				localPutAllowedTracker = true;
			}

			this.localPutAllowed = param;

		}

		/**
		 * field for RealPath
		 */

		protected java.lang.String localRealPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRealPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRealPath() {
			return localRealPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RealPath
		 */
		public void setRealPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localRealPathTracker = true;
			} else {
				localRealPathTracker = true;

			}

			this.localRealPath = param;

		}

		/**
		 * field for VersionView
		 */

		protected boolean localVersionView;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionViewTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getVersionView() {
			return localVersionView;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionView
		 */
		public void setVersionView(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localVersionViewTracker = false;

			} else {
				localVersionViewTracker = true;
			}

			this.localVersionView = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":ContentBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ContentBean", xmlWriter);
				}

			}
			if (localAbsentTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "absent", xmlWriter);

				if (localAbsent == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAbsent);

				}

				xmlWriter.writeEndElement();
			}
			if (localCollectionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "collection", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("collection cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollection));
				}

				xmlWriter.writeEndElement();
			}
			if (localContentPathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "contentPath", xmlWriter);

				if (localContentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localContentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localLoggedInTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "loggedIn", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("loggedIn cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLoggedIn));
				}

				xmlWriter.writeEndElement();
			}
			if (localMediaTypeTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "mediaType", xmlWriter);

				if (localMediaType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediaType);

				}

				xmlWriter.writeEndElement();
			}
			if (localPathWithVersionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "pathWithVersion", xmlWriter);

				if (localPathWithVersion == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathWithVersion);

				}

				xmlWriter.writeEndElement();
			}
			if (localPutAllowedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "putAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("putAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localRealPathTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "realPath", xmlWriter);

				if (localRealPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localRealPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localVersionViewTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "versionView", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("versionView cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAbsentTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "absent"));

				elementList.add(localAbsent == null
				                                   ? null
				                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAbsent));
			}
			if (localCollectionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "collection"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollection));
			}
			if (localContentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "contentPath"));

				elementList.add(localContentPath == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContentPath));
			}
			if (localLoggedInTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "loggedIn"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLoggedIn));
			}
			if (localMediaTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "mediaType"));

				elementList.add(localMediaType == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediaType));
			}
			if (localPathWithVersionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "pathWithVersion"));

				elementList.add(localPathWithVersion == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathWithVersion));
			}
			if (localPutAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "putAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
			}
			if (localRealPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "realPath"));

				elementList.add(localRealPath == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRealPath));
			}
			if (localVersionViewTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "versionView"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ContentBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ContentBean object = new ContentBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ContentBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ContentBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "absent").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAbsent(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "collection").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setCollection(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "contentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setContentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "loggedIn").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setLoggedIn(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "mediaType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediaType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "pathWithVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathWithVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "putAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setPutAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "realPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setRealPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "versionView").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setVersionView(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetResourceData implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getResourceData", "ns3");

		/**
		 * field for Paths
		 * This was an Array!
		 */

		protected java.lang.String[] localPaths;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getPaths() {
			return localPaths;
		}

		/**
		 * validate the array for Paths
		 */
		protected void validatePaths(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Paths
		 */
		public void setPaths(java.lang.String[] param) {

			validatePaths(param);

			if (param != null) {
				// update the setting tracker
				localPathsTracker = true;
			} else {
				localPathsTracker = true;

			}

			this.localPaths = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addPaths(java.lang.String param) {
			if (localPaths == null) {
				localPaths = new java.lang.String[] {};
			}

			// update the setting tracker
			localPathsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localPaths);
			list.add(param);
			this.localPaths = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getResourceData",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getResourceData",
					               xmlWriter);
				}

			}
			if (localPathsTracker) {
				if (localPaths != null) {
					namespace = "http://services.resource.registry.carbon.wso2.org";
					for (int i = 0; i < localPaths.length; i++) {

						if (localPaths[i] != null) {

							writeStartElement(null, namespace, "paths", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPaths[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://services.resource.registry.carbon.wso2.org";
							writeStartElement(null, namespace, "paths", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "paths", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathsTracker) {
				if (localPaths != null) {
					for (int i = 0; i < localPaths.length; i++) {

						if (localPaths[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://services.resource.registry.carbon.wso2.org",
							                                              "paths"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPaths[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://services.resource.registry.carbon.wso2.org",
							                                              "paths"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                              "paths"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetResourceData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetResourceData object = new GetResourceData();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getResourceData".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetResourceData) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "paths").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
								                                  "paths").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPaths((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetContentBean implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getContentBean", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getContentBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getContentBean",
					               xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetContentBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetContentBean object = new GetContentBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getContentBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetContentBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddUserPermissionResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addUserPermissionResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				local_returnTracker = false;

			} else {
				local_returnTracker = true;
			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":addUserPermissionResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "addUserPermissionResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddUserPermissionResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                      throws java.lang.Exception {
				AddUserPermissionResponse object = new AddUserPermissionResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addUserPermissionResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddUserPermissionResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ChangeRolePermissions implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "changeRolePermissions",
		                                                                                       "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 * field for PermissionsInput
		 */

		protected java.lang.String localPermissionsInput;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPermissionsInputTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPermissionsInput() {
			return localPermissionsInput;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PermissionsInput
		 */
		public void setPermissionsInput(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPermissionsInputTracker = true;
			} else {
				localPermissionsInputTracker = true;

			}

			this.localPermissionsInput = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":changeRolePermissions", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "changeRolePermissions",
					               xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localPermissionsInputTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "permissionsInput", xmlWriter);

				if (localPermissionsInput == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPermissionsInput);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}
			if (localPermissionsInputTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "permissionsInput"));

				elementList.add(localPermissionsInput == null
				                                             ? null
				                                             : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPermissionsInput));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ChangeRolePermissions parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                  throws java.lang.Exception {
				ChangeRolePermissions object = new ChangeRolePermissions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"changeRolePermissions".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ChangeRolePermissions) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "permissionsInput").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPermissionsInput(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddCollectionResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addCollectionResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":addCollectionResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addCollectionResponse",
					               xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddCollectionResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                  throws java.lang.Exception {
				AddCollectionResponse object = new AddCollectionResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addCollectionResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddCollectionResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExceptionE implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "Exception", "ns3");

		/**
		 * field for Exception
		 */

		protected Exception localException;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localExceptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return Exception
		 */
		public Exception getException() {
			return localException;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Exception
		 */
		public void setException(Exception param) {

			if (param != null) {
				// update the setting tracker
				localExceptionTracker = true;
			} else {
				localExceptionTracker = true;

			}

			this.localException = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":Exception", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "Exception", xmlWriter);
				}

			}
			if (localExceptionTracker) {
				if (localException == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "Exception", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					localException.serialize(new javax.xml.namespace.QName(
					                                                       "http://services.resource.registry.carbon.wso2.org",
					                                                       "Exception"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localExceptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "Exception"));

				elementList.add(localException == null ? null : localException);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ExceptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ExceptionE object = new ExceptionE();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
					if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
						// Skip the element and report the null value. It cannot
						// have subelements.
						while (!reader.isEndElement())
							reader.next();

						return null;

					}

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"Exception".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExceptionE) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "Exception").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setException(null);
							reader.next();

							reader.next();

						} else {

							object.setException(Exception.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PermissionBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = PermissionBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for AuthorizeAllowed
		 */

		protected boolean localAuthorizeAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAuthorizeAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getAuthorizeAllowed() {
			return localAuthorizeAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AuthorizeAllowed
		 */
		public void setAuthorizeAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localAuthorizeAllowedTracker = false;

			} else {
				localAuthorizeAllowedTracker = true;
			}

			this.localAuthorizeAllowed = param;

		}

		/**
		 * field for DeleteAllowed
		 */

		protected boolean localDeleteAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDeleteAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getDeleteAllowed() {
			return localDeleteAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DeleteAllowed
		 */
		public void setDeleteAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localDeleteAllowedTracker = false;

			} else {
				localDeleteAllowedTracker = true;
			}

			this.localDeleteAllowed = param;

		}

		/**
		 * field for PathWithVersion
		 */

		protected java.lang.String localPathWithVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathWithVersionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathWithVersion() {
			return localPathWithVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathWithVersion
		 */
		public void setPathWithVersion(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathWithVersionTracker = true;
			} else {
				localPathWithVersionTracker = true;

			}

			this.localPathWithVersion = param;

		}

		/**
		 * field for PutAllowed
		 */

		protected boolean localPutAllowed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPutAllowedTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getPutAllowed() {
			return localPutAllowed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PutAllowed
		 */
		public void setPutAllowed(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localPutAllowedTracker = false;

			} else {
				localPutAllowedTracker = true;
			}

			this.localPutAllowed = param;

		}

		/**
		 * field for RoleNames
		 * This was an Array!
		 */

		protected java.lang.String[] localRoleNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRoleNamesTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getRoleNames() {
			return localRoleNames;
		}

		/**
		 * validate the array for RoleNames
		 */
		protected void validateRoleNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RoleNames
		 */
		public void setRoleNames(java.lang.String[] param) {

			validateRoleNames(param);

			if (param != null) {
				// update the setting tracker
				localRoleNamesTracker = true;
			} else {
				localRoleNamesTracker = true;

			}

			this.localRoleNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addRoleNames(java.lang.String param) {
			if (localRoleNames == null) {
				localRoleNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localRoleNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localRoleNames);
			list.add(param);
			this.localRoleNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for RolePermissions
		 * This was an Array!
		 */

		protected PermissionEntry[] localRolePermissions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRolePermissionsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return PermissionEntry[]
		 */
		public PermissionEntry[] getRolePermissions() {
			return localRolePermissions;
		}

		/**
		 * validate the array for RolePermissions
		 */
		protected void validateRolePermissions(PermissionEntry[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RolePermissions
		 */
		public void setRolePermissions(PermissionEntry[] param) {

			validateRolePermissions(param);

			if (param != null) {
				// update the setting tracker
				localRolePermissionsTracker = true;
			} else {
				localRolePermissionsTracker = true;

			}

			this.localRolePermissions = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            PermissionEntry
		 */
		public void addRolePermissions(PermissionEntry param) {
			if (localRolePermissions == null) {
				localRolePermissions = new PermissionEntry[] {};
			}

			// update the setting tracker
			localRolePermissionsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localRolePermissions);
			list.add(param);
			this.localRolePermissions = (PermissionEntry[]) list.toArray(new PermissionEntry[list.size()]);

		}

		/**
		 * field for UserNames
		 * This was an Array!
		 */

		protected java.lang.String[] localUserNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localUserNamesTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getUserNames() {
			return localUserNames;
		}

		/**
		 * validate the array for UserNames
		 */
		protected void validateUserNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserNames
		 */
		public void setUserNames(java.lang.String[] param) {

			validateUserNames(param);

			if (param != null) {
				// update the setting tracker
				localUserNamesTracker = true;
			} else {
				localUserNamesTracker = true;

			}

			this.localUserNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addUserNames(java.lang.String param) {
			if (localUserNames == null) {
				localUserNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localUserNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localUserNames);
			list.add(param);
			this.localUserNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for UserPermissions
		 * This was an Array!
		 */

		protected PermissionEntry[] localUserPermissions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localUserPermissionsTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return PermissionEntry[]
		 */
		public PermissionEntry[] getUserPermissions() {
			return localUserPermissions;
		}

		/**
		 * validate the array for UserPermissions
		 */
		protected void validateUserPermissions(PermissionEntry[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserPermissions
		 */
		public void setUserPermissions(PermissionEntry[] param) {

			validateUserPermissions(param);

			if (param != null) {
				// update the setting tracker
				localUserPermissionsTracker = true;
			} else {
				localUserPermissionsTracker = true;

			}

			this.localUserPermissions = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            PermissionEntry
		 */
		public void addUserPermissions(PermissionEntry param) {
			if (localUserPermissions == null) {
				localUserPermissions = new PermissionEntry[] {};
			}

			// update the setting tracker
			localUserPermissionsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localUserPermissions);
			list.add(param);
			this.localUserPermissions = (PermissionEntry[]) list.toArray(new PermissionEntry[list.size()]);

		}

		/**
		 * field for VersionView
		 */

		protected boolean localVersionView;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionViewTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getVersionView() {
			return localVersionView;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionView
		 */
		public void setVersionView(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localVersionViewTracker = false;

			} else {
				localVersionViewTracker = true;
			}

			this.localVersionView = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":PermissionBean",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "PermissionBean",
					               xmlWriter);
				}

			}
			if (localAuthorizeAllowedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "authorizeAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("authorizeAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorizeAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localDeleteAllowedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "deleteAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("deleteAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localPathWithVersionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "pathWithVersion", xmlWriter);

				if (localPathWithVersion == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathWithVersion);

				}

				xmlWriter.writeEndElement();
			}
			if (localPutAllowedTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "putAllowed", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("putAllowed cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
				}

				xmlWriter.writeEndElement();
			}
			if (localRoleNamesTracker) {
				if (localRoleNames != null) {
					namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localRoleNames.length; i++) {

						if (localRoleNames[i] != null) {

							writeStartElement(null, namespace, "roleNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "roleNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "roleNames",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localRolePermissionsTracker) {
				if (localRolePermissions != null) {
					for (int i = 0; i < localRolePermissions.length; i++) {
						if (localRolePermissions[i] != null) {
							localRolePermissions[i].serialize(new javax.xml.namespace.QName(
							                                                                "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                                                "rolePermissions"),
							                                  xmlWriter);
						} else {

							writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd",
							                  "rolePermissions", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "rolePermissions",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localUserNamesTracker) {
				if (localUserNames != null) {
					namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localUserNames.length; i++) {

						if (localUserNames[i] != null) {

							writeStartElement(null, namespace, "userNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "userNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "userNames",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localUserPermissionsTracker) {
				if (localUserPermissions != null) {
					for (int i = 0; i < localUserPermissions.length; i++) {
						if (localUserPermissions[i] != null) {
							localUserPermissions[i].serialize(new javax.xml.namespace.QName(
							                                                                "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                                                "userPermissions"),
							                                  xmlWriter);
						} else {

							writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd",
							                  "userPermissions", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "userPermissions",
					                  xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localVersionViewTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "versionView", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("versionView cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAuthorizeAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "authorizeAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthorizeAllowed));
			}
			if (localDeleteAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "deleteAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteAllowed));
			}
			if (localPathWithVersionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "pathWithVersion"));

				elementList.add(localPathWithVersion == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathWithVersion));
			}
			if (localPutAllowedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "putAllowed"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPutAllowed));
			}
			if (localRoleNamesTracker) {
				if (localRoleNames != null) {
					for (int i = 0; i < localRoleNames.length; i++) {

						if (localRoleNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "roleNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "roleNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "roleNames"));
					elementList.add(null);

				}

			}
			if (localRolePermissionsTracker) {
				if (localRolePermissions != null) {
					for (int i = 0; i < localRolePermissions.length; i++) {

						if (localRolePermissions[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "rolePermissions"));
							elementList.add(localRolePermissions[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "rolePermissions"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "rolePermissions"));
					elementList.add(localRolePermissions);

				}

			}
			if (localUserNamesTracker) {
				if (localUserNames != null) {
					for (int i = 0; i < localUserNames.length; i++) {

						if (localUserNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "userNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "userNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "userNames"));
					elementList.add(null);

				}

			}
			if (localUserPermissionsTracker) {
				if (localUserPermissions != null) {
					for (int i = 0; i < localUserPermissions.length; i++) {

						if (localUserPermissions[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "userPermissions"));
							elementList.add(localUserPermissions[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "userPermissions"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "userPermissions"));
					elementList.add(localUserPermissions);

				}

			}
			if (localVersionViewTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "versionView"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersionView));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static PermissionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				PermissionBean object = new PermissionBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"PermissionBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (PermissionBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list5 = new java.util.ArrayList();

					java.util.ArrayList list6 = new java.util.ArrayList();

					java.util.ArrayList list7 = new java.util.ArrayList();

					java.util.ArrayList list8 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "authorizeAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setAuthorizeAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "deleteAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setDeleteAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "pathWithVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathWithVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "putAllowed").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setPutAllowed(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "roleNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list5.add(null);

							reader.next();
						} else {
							list5.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone5 = false;
						while (!loopDone5) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone5 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "roleNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list5.add(null);

										reader.next();
									} else {
										list5.add(reader.getElementText());
									}
								} else {
									loopDone5 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRoleNames((java.lang.String[]) list5.toArray(new java.lang.String[list5.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "rolePermissions").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list6.add(null);
							reader.next();
						} else {
							list6.add(PermissionEntry.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone6 = false;
						while (!loopDone6) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone6 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "rolePermissions").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list6.add(null);
										reader.next();
									} else {
										list6.add(PermissionEntry.Factory.parse(reader));
									}
								} else {
									loopDone6 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRolePermissions((PermissionEntry[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(PermissionEntry.class,
						                                                                                                              list6));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "userNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list7.add(null);

							reader.next();
						} else {
							list7.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone7 = false;
						while (!loopDone7) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone7 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "userNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list7.add(null);

										reader.next();
									} else {
										list7.add(reader.getElementText());
									}
								} else {
									loopDone7 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setUserNames((java.lang.String[]) list7.toArray(new java.lang.String[list7.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "userPermissions").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list8.add(null);
							reader.next();
						} else {
							list8.add(PermissionEntry.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone8 = false;
						while (!loopDone8) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone8 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "userPermissions").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list8.add(null);
										reader.next();
									} else {
										list8.add(PermissionEntry.Factory.parse(reader));
									}
								} else {
									loopDone8 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setUserPermissions((PermissionEntry[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(PermissionEntry.class,
						                                                                                                              list8));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "versionView").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setVersionView(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CreateVersion implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "createVersion", "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":createVersion",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "createVersion",
					               xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static CreateVersion parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				CreateVersion object = new CreateVersion();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"createVersion".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (CreateVersion) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetMediatypeDefinitionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getMediatypeDefinitionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getMediatypeDefinitionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getMediatypeDefinitionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetMediatypeDefinitionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                            throws java.lang.Exception {
				GetMediatypeDefinitionsResponse object = new GetMediatypeDefinitionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getMediatypeDefinitionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetMediatypeDefinitionsResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                       reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SetDescription implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "setDescription", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":setDescription",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "setDescription",
					               xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static SetDescription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				SetDescription object = new SetDescription();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"setDescription".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SetDescription) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ResourceTreeEntryBean implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = ResourceTreeEntryBean
		 * Namespace URI = http://beans.resource.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for Children
		 * This was an Array!
		 */

		protected java.lang.String[] localChildren;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localChildrenTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getChildren() {
			return localChildren;
		}

		/**
		 * validate the array for Children
		 */
		protected void validateChildren(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Children
		 */
		public void setChildren(java.lang.String[] param) {

			validateChildren(param);

			if (param != null) {
				// update the setting tracker
				localChildrenTracker = true;
			} else {
				localChildrenTracker = true;

			}

			this.localChildren = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addChildren(java.lang.String param) {
			if (localChildren == null) {
				localChildren = new java.lang.String[] {};
			}

			// update the setting tracker
			localChildrenTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localChildren);
			list.add(param);
			this.localChildren = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 * field for Collection
		 */

		protected boolean localCollection;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCollectionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getCollection() {
			return localCollection;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Collection
		 */
		public void setCollection(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				localCollectionTracker = false;

			} else {
				localCollectionTracker = true;
			}

			this.localCollection = param;

		}

		/**
		 * field for Symlink
		 */

		protected java.lang.String localSymlink;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localSymlinkTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSymlink() {
			return localSymlink;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Symlink
		 */
		public void setSymlink(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localSymlinkTracker = true;
			} else {
				localSymlinkTracker = true;

			}

			this.localSymlink = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://beans.resource.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":ResourceTreeEntryBean", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ResourceTreeEntryBean",
					               xmlWriter);
				}

			}
			if (localChildrenTracker) {
				if (localChildren != null) {
					namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
					for (int i = 0; i < localChildren.length; i++) {

						if (localChildren[i] != null) {

							writeStartElement(null, namespace, "children", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChildren[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
							writeStartElement(null, namespace, "children", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://beans.resource.registry.carbon.wso2.org/xsd", "children", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			if (localCollectionTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "collection", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("collection cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollection));
				}

				xmlWriter.writeEndElement();
			}
			if (localSymlinkTracker) {
				namespace = "http://beans.resource.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "symlink", xmlWriter);

				if (localSymlink == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localSymlink);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://beans.resource.registry.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localChildrenTracker) {
				if (localChildren != null) {
					for (int i = 0; i < localChildren.length; i++) {

						if (localChildren[i] != null) {
							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "children"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChildren[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName(
							                                              "http://beans.resource.registry.carbon.wso2.org/xsd",
							                                              "children"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                              "children"));
					elementList.add(null);

				}

			}
			if (localCollectionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "collection"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCollection));
			}
			if (localSymlinkTracker) {
				elementList.add(new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
				                                              "symlink"));

				elementList.add(localSymlink == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSymlink));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ResourceTreeEntryBean parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                  throws java.lang.Exception {
				ResourceTreeEntryBean object = new ResourceTreeEntryBean();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ResourceTreeEntryBean".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ResourceTreeEntryBean) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "children").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
								                                  "children").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setChildren((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd",
					                                  "collection").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.setCollection(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://beans.resource.registry.carbon.wso2.org/xsd", "symlink").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setSymlink(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetProperty implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getProperty", "ns3");

		/**
		 * field for ResourcePath
		 */

		protected java.lang.String localResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourcePath() {
			return localResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourcePath
		 */
		public void setResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourcePathTracker = true;
			} else {
				localResourcePathTracker = true;

			}

			this.localResourcePath = param;

		}

		/**
		 * field for Key
		 */

		protected java.lang.String localKey;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localKeyTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getKey() {
			return localKey;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Key
		 */
		public void setKey(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localKeyTracker = true;
			} else {
				localKeyTracker = true;

			}

			this.localKey = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getProperty",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getProperty", xmlWriter);
				}

			}
			if (localResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourcePath", xmlWriter);

				if (localResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localKeyTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "key", xmlWriter);

				if (localKey == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localKey);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourcePath"));

				elementList.add(localResourcePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourcePath));
			}
			if (localKeyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "key"));

				elementList.add(localKey == null
				                                ? null
				                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKey));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetProperty parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetProperty object = new GetProperty();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getProperty".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetProperty) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "key").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MoveResource implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "moveResource", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for OldResourcePath
		 */

		protected java.lang.String localOldResourcePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localOldResourcePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOldResourcePath() {
			return localOldResourcePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OldResourcePath
		 */
		public void setOldResourcePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localOldResourcePathTracker = true;
			} else {
				localOldResourcePathTracker = true;

			}

			this.localOldResourcePath = param;

		}

		/**
		 * field for DestinationPath
		 */

		protected java.lang.String localDestinationPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDestinationPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDestinationPath() {
			return localDestinationPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DestinationPath
		 */
		public void setDestinationPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDestinationPathTracker = true;
			} else {
				localDestinationPathTracker = true;

			}

			this.localDestinationPath = param;

		}

		/**
		 * field for ResourceName
		 */

		protected java.lang.String localResourceName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourceNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourceName() {
			return localResourceName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourceName
		 */
		public void setResourceName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourceNameTracker = true;
			} else {
				localResourceNameTracker = true;

			}

			this.localResourceName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":moveResource",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "moveResource",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localOldResourcePathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "oldResourcePath", xmlWriter);

				if (localOldResourcePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localOldResourcePath);

				}

				xmlWriter.writeEndElement();
			}
			if (localDestinationPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "destinationPath", xmlWriter);

				if (localDestinationPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDestinationPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localResourceNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourceName", xmlWriter);

				if (localResourceName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourceName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localOldResourcePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "oldResourcePath"));

				elementList.add(localOldResourcePath == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOldResourcePath));
			}
			if (localDestinationPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "destinationPath"));

				elementList.add(localDestinationPath == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDestinationPath));
			}
			if (localResourceNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourceName"));

				elementList.add(localResourceName == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourceName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static MoveResource parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				MoveResource object = new MoveResource();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"moveResource".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (MoveResource) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "oldResourcePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setOldResourcePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "destinationPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDestinationPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourceName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourceName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Delete implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "delete", "ns3");

		/**
		 * field for PathToDelete
		 */

		protected java.lang.String localPathToDelete;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathToDeleteTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathToDelete() {
			return localPathToDelete;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathToDelete
		 */
		public void setPathToDelete(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathToDeleteTracker = true;
			} else {
				localPathToDeleteTracker = true;

			}

			this.localPathToDelete = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":delete", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "delete", xmlWriter);
				}

			}
			if (localPathToDeleteTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "pathToDelete", xmlWriter);

				if (localPathToDelete == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathToDelete);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathToDeleteTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "pathToDelete"));

				elementList.add(localPathToDelete == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathToDelete));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static Delete parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				Delete object = new Delete();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"delete".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (Delete) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "pathToDelete").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathToDelete(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetTextContentResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getTextContentResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getTextContentResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getTextContentResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetTextContentResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				GetTextContentResponse object = new GetTextContentResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getTextContentResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetTextContentResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetContentBeanResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getContentBeanResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected ContentBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return ContentBean
		 */
		public ContentBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(ContentBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getContentBeanResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getContentBeanResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetContentBeanResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				GetContentBeanResponse object = new GetContentBeanResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getContentBeanResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetContentBeanResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(ContentBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ChangeRolePermissionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "changeRolePermissionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true

			if (false) {
				local_returnTracker = false;

			} else {
				local_returnTracker = true;
			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":changeRolePermissionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "changeRolePermissionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ChangeRolePermissionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                          throws java.lang.Exception {
				ChangeRolePermissionsResponse object = new ChangeRolePermissionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"changeRolePermissionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ChangeRolePermissionsResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                     reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class WebResourcePath implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = WebResourcePath
		 * Namespace URI = http://common.registry.carbon.wso2.org/xsd
		 * Namespace Prefix = ns2
		 */

		/**
		 * field for NavigateName
		 */

		protected java.lang.String localNavigateName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNavigateNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNavigateName() {
			return localNavigateName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NavigateName
		 */
		public void setNavigateName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localNavigateNameTracker = true;
			} else {
				localNavigateNameTracker = true;

			}

			this.localNavigateName = param;

		}

		/**
		 * field for NavigatePath
		 */

		protected java.lang.String localNavigatePath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNavigatePathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNavigatePath() {
			return localNavigatePath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NavigatePath
		 */
		public void setNavigatePath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localNavigatePathTracker = true;
			} else {
				localNavigatePathTracker = true;

			}

			this.localNavigatePath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(parentQName, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://common.registry.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":WebResourcePath",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "WebResourcePath",
					               xmlWriter);
				}

			}
			if (localNavigateNameTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "navigateName", xmlWriter);

				if (localNavigateName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localNavigateName);

				}

				xmlWriter.writeEndElement();
			}
			if (localNavigatePathTracker) {
				namespace = "http://common.registry.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "navigatePath", xmlWriter);

				if (localNavigatePath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localNavigatePath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://common.registry.carbon.wso2.org/xsd")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNavigateNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "navigateName"));

				elementList.add(localNavigateName == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNavigateName));
			}
			if (localNavigatePathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd",
				                                              "navigatePath"));

				elementList.add(localNavigatePath == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNavigatePath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static WebResourcePath parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				WebResourcePath object = new WebResourcePath();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"WebResourcePath".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WebResourcePath) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "navigateName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setNavigateName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://common.registry.carbon.wso2.org/xsd", "navigatePath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setNavigatePath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetMetadataResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getMetadataResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected MetadataBean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return MetadataBean
		 */
		public MetadataBean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(MetadataBean param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getMetadataResponse",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getMetadataResponse",
					               xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://services.resource.registry.carbon.wso2.org", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName(
					                                                     "http://services.resource.registry.carbon.wso2.org",
					                                                     "return"), xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetMetadataResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetMetadataResponse object = new GetMetadataResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getMetadataResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetMetadataResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(MetadataBean.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetCustomUIMediatypeDefinitionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getCustomUIMediatypeDefinitionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				local_returnTracker = true;
			} else {
				local_returnTracker = true;

			}

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getCustomUIMediatypeDefinitionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getCustomUIMediatypeDefinitionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetCustomUIMediatypeDefinitionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                                    throws java.lang.Exception {
				GetCustomUIMediatypeDefinitionsResponse object = new GetCustomUIMediatypeDefinitionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getCustomUIMediatypeDefinitionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetCustomUIMediatypeDefinitionsResponse) ExtensionMapper.getTypeObject(nsUri,
								                                                                               type,
								                                                                               reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ImportResource implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "importResource", "ns3");

		/**
		 * field for ParentPath
		 */

		protected java.lang.String localParentPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localParentPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getParentPath() {
			return localParentPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ParentPath
		 */
		public void setParentPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localParentPathTracker = true;
			} else {
				localParentPathTracker = true;

			}

			this.localParentPath = param;

		}

		/**
		 * field for ResourceName
		 */

		protected java.lang.String localResourceName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localResourceNameTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getResourceName() {
			return localResourceName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResourceName
		 */
		public void setResourceName(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localResourceNameTracker = true;
			} else {
				localResourceNameTracker = true;

			}

			this.localResourceName = param;

		}

		/**
		 * field for MediaType
		 */

		protected java.lang.String localMediaType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMediaTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMediaType() {
			return localMediaType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MediaType
		 */
		public void setMediaType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localMediaTypeTracker = true;
			} else {
				localMediaTypeTracker = true;

			}

			this.localMediaType = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localDescriptionTracker = true;
			} else {
				localDescriptionTracker = true;

			}

			this.localDescription = param;

		}

		/**
		 * field for FetchURL
		 */

		protected java.lang.String localFetchURL;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFetchURLTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFetchURL() {
			return localFetchURL;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FetchURL
		 */
		public void setFetchURL(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localFetchURLTracker = true;
			} else {
				localFetchURLTracker = true;

			}

			this.localFetchURL = param;

		}

		/**
		 * field for SymlinkLocation
		 */

		protected java.lang.String localSymlinkLocation;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localSymlinkLocationTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSymlinkLocation() {
			return localSymlinkLocation;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SymlinkLocation
		 */
		public void setSymlinkLocation(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localSymlinkLocationTracker = true;
			} else {
				localSymlinkLocationTracker = true;

			}

			this.localSymlinkLocation = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":importResource",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "importResource",
					               xmlWriter);
				}

			}
			if (localParentPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "parentPath", xmlWriter);

				if (localParentPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localParentPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localResourceNameTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "resourceName", xmlWriter);

				if (localResourceName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localResourceName);

				}

				xmlWriter.writeEndElement();
			}
			if (localMediaTypeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "mediaType", xmlWriter);

				if (localMediaType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localMediaType);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if (localFetchURLTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "fetchURL", xmlWriter);

				if (localFetchURL == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFetchURL);

				}

				xmlWriter.writeEndElement();
			}
			if (localSymlinkLocationTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "symlinkLocation", xmlWriter);

				if (localSymlinkLocation == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localSymlinkLocation);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localParentPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "parentPath"));

				elementList.add(localParentPath == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentPath));
			}
			if (localResourceNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "resourceName"));

				elementList.add(localResourceName == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResourceName));
			}
			if (localMediaTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "mediaType"));

				elementList.add(localMediaType == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMediaType));
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "description"));

				elementList.add(localDescription == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
			}
			if (localFetchURLTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "fetchURL"));

				elementList.add(localFetchURL == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFetchURL));
			}
			if (localSymlinkLocationTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "symlinkLocation"));

				elementList.add(localSymlinkLocation == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSymlinkLocation));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ImportResource parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ImportResource object = new ImportResource();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"importResource".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ImportResource) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "parentPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setParentPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "resourceName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setResourceName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "mediaType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setMediaType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "fetchURL").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFetchURL(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "symlinkLocation").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setSymlinkLocation(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetMetadata implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "getMetadata", "ns3");

		/**
		 * field for Path
		 */

		protected java.lang.String localPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPath() {
			return localPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Path
		 */
		public void setPath(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathTracker = true;
			} else {
				localPathTracker = true;

			}

			this.localPath = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getMetadata",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getMetadata", xmlWriter);
				}

			}
			if (localPathTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "path", xmlWriter);

				if (localPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPath);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "path"));

				elementList.add(localPath == null
				                                 ? null
				                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPath));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetMetadata parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetMetadata object = new GetMetadata();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getMetadata".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetMetadata) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org", "path").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddRolePermission implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://services.resource.registry.carbon.wso2.org",
		                                                                                       "addRolePermission",
		                                                                                       "ns3");

		/**
		 * field for PathToAuthorize
		 */

		protected java.lang.String localPathToAuthorize;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPathToAuthorizeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPathToAuthorize() {
			return localPathToAuthorize;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PathToAuthorize
		 */
		public void setPathToAuthorize(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPathToAuthorizeTracker = true;
			} else {
				localPathToAuthorizeTracker = true;

			}

			this.localPathToAuthorize = param;

		}

		/**
		 * field for RoleToAuthorize
		 */

		protected java.lang.String localRoleToAuthorize;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRoleToAuthorizeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRoleToAuthorize() {
			return localRoleToAuthorize;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RoleToAuthorize
		 */
		public void setRoleToAuthorize(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localRoleToAuthorizeTracker = true;
			} else {
				localRoleToAuthorizeTracker = true;

			}

			this.localRoleToAuthorize = param;

		}

		/**
		 * field for ActionToAuthorize
		 */

		protected java.lang.String localActionToAuthorize;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localActionToAuthorizeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getActionToAuthorize() {
			return localActionToAuthorize;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ActionToAuthorize
		 */
		public void setActionToAuthorize(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localActionToAuthorizeTracker = true;
			} else {
				localActionToAuthorizeTracker = true;

			}

			this.localActionToAuthorize = param;

		}

		/**
		 * field for PermissionType
		 */

		protected java.lang.String localPermissionType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPermissionTypeTracker = false;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPermissionType() {
			return localPermissionType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PermissionType
		 */
		public void setPermissionType(java.lang.String param) {

			if (param != null) {
				// update the setting tracker
				localPermissionTypeTracker = true;
			} else {
				localPermissionTypeTracker = true;

			}

			this.localPermissionType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME, factory, dataSource);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://services.resource.registry.carbon.wso2.org");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":addRolePermission",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "addRolePermission",
					               xmlWriter);
				}

			}
			if (localPathToAuthorizeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "pathToAuthorize", xmlWriter);

				if (localPathToAuthorize == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPathToAuthorize);

				}

				xmlWriter.writeEndElement();
			}
			if (localRoleToAuthorizeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "roleToAuthorize", xmlWriter);

				if (localRoleToAuthorize == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localRoleToAuthorize);

				}

				xmlWriter.writeEndElement();
			}
			if (localActionToAuthorizeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "actionToAuthorize", xmlWriter);

				if (localActionToAuthorize == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localActionToAuthorize);

				}

				xmlWriter.writeEndElement();
			}
			if (localPermissionTypeTracker) {
				namespace = "http://services.resource.registry.carbon.wso2.org";
				writeStartElement(null, namespace, "permissionType", xmlWriter);

				if (localPermissionType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localPermissionType);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://services.resource.registry.carbon.wso2.org")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPathToAuthorizeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "pathToAuthorize"));

				elementList.add(localPathToAuthorize == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathToAuthorize));
			}
			if (localRoleToAuthorizeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "roleToAuthorize"));

				elementList.add(localRoleToAuthorize == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoleToAuthorize));
			}
			if (localActionToAuthorizeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "actionToAuthorize"));

				elementList.add(localActionToAuthorize == null
				                                              ? null
				                                              : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActionToAuthorize));
			}
			if (localPermissionTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
				                                              "permissionType"));

				elementList.add(localPermissionType == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPermissionType));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static AddRolePermission parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				AddRolePermission object = new AddRolePermission();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"addRolePermission".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (AddRolePermission) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "pathToAuthorize").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPathToAuthorize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "roleToAuthorize").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setRoleToAuthorize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "actionToAuthorize").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setActionToAuthorize(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://services.resource.registry.carbon.wso2.org",
					                                  "permissionType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setPermissionType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
							                         // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " +
						                                                    reader.getLocalName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceServiceExceptionE param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceServiceExceptionE.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource wrappedType =
			                                                                                                                new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource();

			wrappedType.setParentPath(param1);

			wrappedType.setOldResourcePath(param2);

			wrappedType.setDestinationPath(param3);

			wrappedType.setResourceName(param4);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry wrappedType =
			                                                                                                                        new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry();

			wrappedType.setResourcePath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceTreeEntryBean getGetResourceTreeEntryResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath wrappedType =
			                                                                                                                          new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath();

			wrappedType.setResourcePath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty wrappedType =
			                                                                                                               new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty();

			wrappedType.setResourcePath(param1);

			wrappedType.setKey(param2);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private java.lang.String getGetPropertyResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink wrappedType =
			                                                                                                                   new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink();

			wrappedType.setParentPath(param1);

			wrappedType.setName(param2);

			wrappedType.setTargetPath(param3);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean wrappedType =
			                                                                                                                   new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.VersionsBean getGetVersionsBeanResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse wrappedType) {

		return wrappedType.get_return();

	}

	private java.lang.String getGetCustomUIMediatypeDefinitionsResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription();

			wrappedType.setPath(param1);

			wrappedType.setDescription(param2);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private java.lang.String getGetSessionResourcePathResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata wrappedType =
			                                                                                                               new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MetadataBean getGetMetadataResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions wrappedType =
			                                                                                                                         new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions();

			wrappedType.setResourcePath(param1);

			wrappedType.setPermissionsInput(param2);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private boolean getChangeRolePermissionsResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ContentBean getGetContentBeanResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion();

			wrappedType.setVersionPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String[] param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData wrappedType =
			                                                                                                                   new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData();

			wrappedType.setPaths(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceData[] getGetResourceDataResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse wrappedType) {

		return wrappedType.get_return();

	}

	private java.lang.String getGetMediatypeDefinitionsResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      java.lang.String param5,
	                                                      java.lang.String param6,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource();

			wrappedType.setParentPath(param1);

			wrappedType.setResourceName(param2);

			wrappedType.setMediaType(param3);

			wrappedType.setDescription(param4);

			wrappedType.setFetchURL(param5);

			wrappedType.setSymlinkLocation(param6);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete wrappedType =
			                                                                                                          new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete();

			wrappedType.setPathToDelete(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean wrappedType =
			                                                                                                                          new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ContentDownloadBean getGetContentDownloadBeanResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      java.lang.String param5,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource wrappedType =
			                                                                                                                   new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource();

			wrappedType.setParentPath(param1);

			wrappedType.setFileName(param2);

			wrappedType.setMediaType(param3);

			wrappedType.setDescription(param4);

			wrappedType.setContent(param5);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission wrappedType =
			                                                                                                                     new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission();

			wrappedType.setPathToAuthorize(param1);

			wrappedType.setRoleToAuthorize(param2);

			wrappedType.setActionToAuthorize(param3);

			wrappedType.setPermissionType(param4);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private boolean getAddRolePermissionResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion wrappedType =
			                                                                                                                 new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion();

			wrappedType.setResourcePath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private java.lang.String getGetTextContentResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink wrappedType =
			                                                                                                                 new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink();

			wrappedType.setParentPath(param1);

			wrappedType.setName(param2);

			wrappedType.setInstance(param3);

			wrappedType.setTargetPath(param4);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource();

			wrappedType.setParentPath(param1);

			wrappedType.setOldResourcePath(param2);

			wrappedType.setNewResourceName(param3);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions wrappedType =
			                                                                                                                         new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions();

			wrappedType.setResourcePath(param1);

			wrappedType.setPermissionInput(param2);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private boolean getChangeUserPermissionsResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission wrappedType =
			                                                                                                                     new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission();

			wrappedType.setPathToAuthorize(param1);

			wrappedType.setUserToAuthorize(param2);

			wrappedType.setActionToAuthorize(param3);

			wrappedType.setPermissionType(param4);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private boolean getAddUserPermissionResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent wrappedType =
			                                                                                                                     new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent();

			wrappedType.setResourcePath(param1);

			wrappedType.setContentText(param2);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private java.lang.String getGetCollectionMediatypeDefinitionsResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource wrappedType =
			                                                                                                                new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource();

			wrappedType.setParentPath(param1);

			wrappedType.setOldResourcePath(param2);

			wrappedType.setDestinationPath(param3);

			wrappedType.setResourceName(param4);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent wrappedType =
			                                                                                                                        new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CollectionContentBean getGetCollectionContentResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      java.lang.String param4,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection wrappedType =
			                                                                                                                 new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection();

			wrappedType.setParentPath(param1);

			wrappedType.setCollectionName(param2);

			wrappedType.setMediaType(param3);

			wrappedType.setDescription(param4);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private java.lang.String getAddCollectionResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions wrappedType =
			                                                                                                                  new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions();

			wrappedType.setPath(param1);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	private org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.PermissionBean getGetPermissionsResponse_return(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse wrappedType) {

		return wrappedType.get_return();

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      java.lang.String param1,
	                                                      java.lang.String param2,
	                                                      java.lang.String param3,
	                                                      javax.activation.DataHandler param4,
	                                                      java.lang.String param5,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource dummyWrappedType,
	                                                      boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource wrappedType =
			                                                                                                               new org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource();

			wrappedType.setPath(param1);

			wrappedType.setMediaType(param2);

			wrappedType.setDescription(param3);

			wrappedType.setContent(param4);

			wrappedType.setSymlinkLocation(param5);

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();

			emptyEnvelope.getBody()
			             .addChild(wrappedType.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource.MY_QNAME,
			                                                factory));

			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
	}

	/* methods to provide back word compatibility */

	/**
	 * get the default envelope
	 */
	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory) {
		return factory.getDefaultEnvelope();
	}

	private java.lang.Object fromOM(org.apache.axiom.om.OMElement param, java.lang.Class type,
	                                java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault {

		try {

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.MoveResource.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntry.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceTreeEntryResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetSessionResourcePath.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetProperty.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPropertyResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddSymbolicLink.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBean.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetVersionsBeanResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCustomUIMediatypeDefinitionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.SetDescription.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetSessionResourcePathResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadata.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMetadataResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeRolePermissionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBean.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentBeanResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RestoreVersion.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceData.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetResourceDataResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetMediatypeDefinitionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ImportResource.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.Delete.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBean.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetContentDownloadBeanResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddTextResource.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermission.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRolePermissionResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceServiceExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CreateVersion.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContent.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetTextContentResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddRemoteLink.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.RenameResource.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ChangeUserPermissionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermission.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddUserPermissionResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceServiceExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ResourceServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.UpdateTextContent.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionMediatypeDefinitionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.CopyResource.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContent.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetCollectionContentResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollection.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddCollectionResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.GetPermissionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.AddResource.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.services.ResourceAdminServiceStub.ExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

		} catch (java.lang.Exception e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
		return null;
	}

}
