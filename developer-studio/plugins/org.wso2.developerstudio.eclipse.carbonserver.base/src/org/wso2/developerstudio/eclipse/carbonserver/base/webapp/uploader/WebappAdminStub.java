/**
 * WebappAdminStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.1-wso2v10 Built on : Sep 04, 2013 (02:02:54
 * UTC)
 */
package org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader;

/*
 * WebappAdminStub java implementation
 */

public class WebappAdminStub extends org.apache.axis2.client.Stub {
	protected org.apache.axis2.description.AxisOperation[] _operations;

	// hashmaps to keep the fault mapping
	private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
	private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
	private java.util.HashMap faultMessageMap = new java.util.HashMap();

	private static int counter = 0;

	private static synchronized java.lang.String getUniqueSuffix() {
		// reset the counter if it is greater than 99999
		if (counter > 99999) {
			counter = 0;
		}
		counter = counter + 1;
		return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
	}

	private void populateAxisService() throws org.apache.axis2.AxisFault {

		// creating the Service with a unique name
		_service = new org.apache.axis2.description.AxisService("WebappAdmin" + getUniqueSuffix());
		addAnonymousOperations();

		// creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations = new org.apache.axis2.description.AxisOperation[31];

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "stopAllWebapps"));
		_service.addOperation(__operation);

		_operations[0] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "getPagedFaultyWebappsSummary"));
		_service.addOperation(__operation);

		_operations[1] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteStoppedWebapps"));
		_service.addOperation(__operation);

		_operations[2] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "deleteAllStoppedWebapps"));
		_service.addOperation(__operation);

		_operations[3] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getActiveSessions"));
		_service.addOperation(__operation);

		_operations[4] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireSessions"));
		_service.addOperation(__operation);

		_operations[5] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "isUnpackWARs"));
		_service.addOperation(__operation);

		_operations[6] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "isDefaultVersionManagementEnabled"));
		_service.addOperation(__operation);

		_operations[7] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "deleteAllStartedWebapps"));
		_service.addOperation(__operation);

		_operations[8] = __operation;

		__operation = new org.apache.axis2.description.RobustOutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "changeDefaultAppVersion"));
		_service.addOperation(__operation);

		_operations[9] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "reloadWebapps"));
		_service.addOperation(__operation);

		_operations[10] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "uploadWebapp"));
		_service.addOperation(__operation);

		_operations[11] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireAllSessions"));
		_service.addOperation(__operation);

		_operations[12] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getStartedWebapp"));
		_service.addOperation(__operation);

		_operations[13] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "downloadWarFileHandler"));
		_service.addOperation(__operation);

		_operations[14] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "startAllWebapps"));
		_service.addOperation(__operation);

		_operations[15] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteFaultyWebapps"));
		_service.addOperation(__operation);

		_operations[16] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getBamConfiguration"));
		_service.addOperation(__operation);

		_operations[17] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "setBamConfiguration"));
		_service.addOperation(__operation);

		_operations[18] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireSessionsInWebapp"));
		_service.addOperation(__operation);

		_operations[19] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteAllWebApps"));
		_service.addOperation(__operation);

		_operations[20] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteStartedWebapps"));
		_service.addOperation(__operation);

		_operations[21] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getPagedWebappsSummary"));
		_service.addOperation(__operation);

		_operations[22] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "expireSessionsInWebapps"));
		_service.addOperation(__operation);

		_operations[23] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "startWebapps"));
		_service.addOperation(__operation);

		_operations[24] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                  "expireSessionsInAllWebapps"));
		_service.addOperation(__operation);

		_operations[25] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "reloadAllWebapps"));
		_service.addOperation(__operation);

		_operations[26] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteAllFaultyWebapps"));
		_service.addOperation(__operation);

		_operations[27] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "stopWebapps"));
		_service.addOperation(__operation);

		_operations[28] = __operation;

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getStoppedWebapp"));
		_service.addOperation(__operation);

		_operations[29] = __operation;

		__operation = new org.apache.axis2.description.OutOnlyAxisOperation();

		__operation.setName(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteWebapp"));
		_service.addOperation(__operation);

		_operations[30] = __operation;

	}

	// populates the faults
	private void populateFaults() {

		faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                  new javax.xml.namespace.QName(
		                                                                                                "http://org.apache.axis2/xsd",
		                                                                                                "WebappAdminArtifactMetadataException"),
		                                                                  "changeDefaultAppVersion"),
		                          "org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminArtifactMetadataException");
		faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                                       new javax.xml.namespace.QName(
		                                                                                                     "http://org.apache.axis2/xsd",
		                                                                                                     "WebappAdminArtifactMetadataException"),
		                                                                       "changeDefaultAppVersion"),
		                               "org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminArtifactMetadataException");
		faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
		                                                            new javax.xml.namespace.QName(
		                                                                                          "http://org.apache.axis2/xsd",
		                                                                                          "WebappAdminArtifactMetadataException"),
		                                                            "changeDefaultAppVersion"),
		                    "org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub$WebappAdminArtifactMetadataException");

	}

	/**
	 * Constructor that takes in a configContext
	 */

	public WebappAdminStub(org.apache.axis2.context.ConfigurationContext configurationContext,
	                       java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(configurationContext, targetEndpoint, false);
	}

	/**
	 * Constructor that takes in a configContext and useseperate listner
	 */
	public WebappAdminStub(org.apache.axis2.context.ConfigurationContext configurationContext,
	                       java.lang.String targetEndpoint, boolean useSeparateListener)
	                                                                                    throws org.apache.axis2.AxisFault {
		// To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext, _service);

		_serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

		// Set the soap version
		_serviceClient.getOptions()
		              .setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);

	}

	/**
	 * Default Constructor
	 */
	public WebappAdminStub(org.apache.axis2.context.ConfigurationContext configurationContext)
	                                                                                          throws org.apache.axis2.AxisFault {

		this(configurationContext, "https://10.100.1.69:9443/services/WebappAdmin.WebappAdminHttpsSoap12Endpoint/");

	}

	/**
	 * Default Constructor
	 */
	public WebappAdminStub() throws org.apache.axis2.AxisFault {

		this("https://10.100.1.69:9443/services/WebappAdmin.WebappAdminHttpsSoap12Endpoint/");

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public WebappAdminStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(null, targetEndpoint);
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void stopAllWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps stopAllWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[0].getName());
		_operationClient.getOptions().setAction("urn:stopAllWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), stopAllWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "stopAllWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "stopAllWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#getPagedFaultyWebappsSummary
	 * @param getPagedFaultyWebappsSummary
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse getPagedFaultyWebappsSummary(

	                                                                                                                                                            org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary getPagedFaultyWebappsSummary)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[1].getName());
			_operationClient.getOptions().setAction("urn:getPagedFaultyWebappsSummary");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 getPagedFaultyWebappsSummary,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "getPagedFaultyWebappsSummary")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                               "getPagedFaultyWebappsSummary"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getPagedFaultyWebappsSummary"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getPagedFaultyWebappsSummary"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getPagedFaultyWebappsSummary"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteStoppedWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps deleteStoppedWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[2].getName());
		_operationClient.getOptions().setAction("urn:deleteStoppedWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteStoppedWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteStoppedWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteStoppedWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteAllStoppedWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps deleteAllStoppedWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[3].getName());
		_operationClient.getOptions().setAction("urn:deleteAllStoppedWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteAllStoppedWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteAllStoppedWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteAllStoppedWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#getActiveSessions
	 * @param getActiveSessions
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse getActiveSessions(

	                                                                                                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions getActiveSessions)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[4].getName());
			_operationClient.getOptions().setAction("urn:getActiveSessions");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getActiveSessions,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "getActiveSessions")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getActiveSessions"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getActiveSessions"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getActiveSessions"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getActiveSessions"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void expireSessions(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions expireSessions

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[5].getName());
		_operationClient.getOptions().setAction("urn:expireSessions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), expireSessions,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "expireSessions")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireSessions"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#isUnpackWARs
	 * @param isUnpackWARs
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse isUnpackWARs(

	org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs isUnpackWARs)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[6].getName());
			_operationClient.getOptions().setAction("urn:isUnpackWARs");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), isUnpackWARs,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "isUnpackWARs")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "isUnpackWARs"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "isUnpackWARs"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "isUnpackWARs"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "isUnpackWARs"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#isDefaultVersionManagementEnabled
	 * @param isDefaultVersionManagementEnabled
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse isDefaultVersionManagementEnabled(

	                                                                                                                                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled isDefaultVersionManagementEnabled)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[7].getName());
			_operationClient.getOptions().setAction("urn:isDefaultVersionManagementEnabled");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
			                 isDefaultVersionManagementEnabled,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "isDefaultVersionManagementEnabled")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                               "isDefaultVersionManagementEnabled"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "isDefaultVersionManagementEnabled"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "isDefaultVersionManagementEnabled"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "isDefaultVersionManagementEnabled"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteAllStartedWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps deleteAllStartedWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[8].getName());
		_operationClient.getOptions().setAction("urn:deleteAllStartedWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteAllStartedWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteAllStartedWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteAllStartedWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @throws org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminArtifactMetadataException
	 *             :
	 */
	public void changeDefaultAppVersion(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion changeDefaultAppVersion

	) throws java.rmi.RemoteException

	, org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminArtifactMetadataException {
		org.apache.axis2.context.MessageContext _messageContext = null;

		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[9].getName());
			_operationClient.getOptions().setAction("urn:changeDefaultAppVersion");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			org.apache.axiom.soap.SOAPEnvelope env = null;
			_messageContext = new org.apache.axis2.context.MessageContext();

			// Style is Doc.

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), changeDefaultAppVersion,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "changeDefaultAppVersion")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                               "changeDefaultAppVersion"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// create message context with that soap envelope

			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			_operationClient.execute(true);

		} catch (org.apache.axis2.AxisFault f) {
			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "changeDefaultAppVersion"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "changeDefaultAppVersion"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "changeDefaultAppVersion"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						if (ex instanceof org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminArtifactMetadataException) {
							throw (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminArtifactMetadataException) ex;
						}

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void reloadWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps reloadWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[10].getName());
		_operationClient.getOptions().setAction("urn:reloadWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), reloadWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "reloadWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "reloadWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#uploadWebapp
	 * @param uploadWebapp
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse uploadWebapp(

	org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp uploadWebapp)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[11].getName());
			_operationClient.getOptions().setAction("urn:uploadWebapp");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), uploadWebapp,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "uploadWebapp")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "uploadWebapp"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "uploadWebapp"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "uploadWebapp"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "uploadWebapp"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void expireAllSessions(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions expireAllSessions

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[12].getName());
		_operationClient.getOptions().setAction("urn:expireAllSessions");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), expireAllSessions,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "expireAllSessions")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireAllSessions"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#getStartedWebapp
	 * @param getStartedWebapp
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse getStartedWebapp(

	org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp getStartedWebapp)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[13].getName());
			_operationClient.getOptions().setAction("urn:getStartedWebapp");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getStartedWebapp,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "getStartedWebapp")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getStartedWebapp"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getStartedWebapp"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getStartedWebapp"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getStartedWebapp"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#downloadWarFileHandler
	 * @param downloadWarFileHandler
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse downloadWarFileHandler(

	                                                                                                                                                org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler downloadWarFileHandler)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[14].getName());
			_operationClient.getOptions().setAction("urn:downloadWarFileHandler");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), downloadWarFileHandler,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "downloadWarFileHandler")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                               "downloadWarFileHandler"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "downloadWarFileHandler"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "downloadWarFileHandler"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "downloadWarFileHandler"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void startAllWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps startAllWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[15].getName());
		_operationClient.getOptions().setAction("urn:startAllWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), startAllWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "startAllWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "startAllWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteFaultyWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps deleteFaultyWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[16].getName());
		_operationClient.getOptions().setAction("urn:deleteFaultyWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteFaultyWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteFaultyWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteFaultyWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#getBamConfiguration
	 * @param getBamConfiguration
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse getBamConfiguration(

	                                                                                                                                          org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration getBamConfiguration)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[17].getName());
			_operationClient.getOptions().setAction("urn:getBamConfiguration");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getBamConfiguration,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "getBamConfiguration")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getBamConfiguration"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getBamConfiguration"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getBamConfiguration"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getBamConfiguration"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void setBamConfiguration(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration setBamConfiguration

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[18].getName());
		_operationClient.getOptions().setAction("urn:setBamConfiguration");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setBamConfiguration,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "setBamConfiguration")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "setBamConfiguration"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void expireSessionsInWebapp(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp expireSessionsInWebapp

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[19].getName());
		_operationClient.getOptions().setAction("urn:expireSessionsInWebapp");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), expireSessionsInWebapp,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "expireSessionsInWebapp")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireSessionsInWebapp"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteAllWebApps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps deleteAllWebApps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[20].getName());
		_operationClient.getOptions().setAction("urn:deleteAllWebApps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteAllWebApps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteAllWebApps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteAllWebApps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteStartedWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps deleteStartedWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[21].getName());
		_operationClient.getOptions().setAction("urn:deleteStartedWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteStartedWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteStartedWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteStartedWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#getPagedWebappsSummary
	 * @param getPagedWebappsSummary
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse getPagedWebappsSummary(

	                                                                                                                                                org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary getPagedWebappsSummary)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[22].getName());
			_operationClient.getOptions().setAction("urn:getPagedWebappsSummary");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getPagedWebappsSummary,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "getPagedWebappsSummary")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                               "getPagedWebappsSummary"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getPagedWebappsSummary"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getPagedWebappsSummary"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getPagedWebappsSummary"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void expireSessionsInWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps expireSessionsInWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[23].getName());
		_operationClient.getOptions().setAction("urn:expireSessionsInWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), expireSessionsInWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "expireSessionsInWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "expireSessionsInWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void startWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps startWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[24].getName());
		_operationClient.getOptions().setAction("urn:startWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), startWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "startWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "startWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void expireSessionsInAllWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps expireSessionsInAllWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[25].getName());
		_operationClient.getOptions().setAction("urn:expireSessionsInAllWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), expireSessionsInAllWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "expireSessionsInAllWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                               "expireSessionsInAllWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void reloadAllWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps reloadAllWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[26].getName());
		_operationClient.getOptions().setAction("urn:reloadAllWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), reloadAllWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "reloadAllWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "reloadAllWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteAllFaultyWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps deleteAllFaultyWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[27].getName());
		_operationClient.getOptions().setAction("urn:deleteAllFaultyWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteAllFaultyWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteAllFaultyWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteAllFaultyWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void stopWebapps(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps stopWebapps

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[28].getName());
		_operationClient.getOptions().setAction("urn:stopWebapps");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), stopWebapps,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "stopWebapps")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "stopWebapps"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdmin#getStoppedWebapp
	 * @param getStoppedWebapp
	 */

	public org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse getStoppedWebapp(

	org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp getStoppedWebapp)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient =
			                                                           _serviceClient.createClient(_operations[29].getName());
			_operationClient.getOptions().setAction("urn:getStoppedWebapp");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

			addPropertyToOperationClient(_operationClient,
			                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
			                             "&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env =
			      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getStoppedWebapp,
			                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
			                                                               "getStoppedWebapp")),
			                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "getStoppedWebapp"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext =
			                                                                _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

			java.lang.Object object =
			                          fromOM(_returnEnv.getBody().getFirstElement(),
			                                 org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse.class,
			                                 getEnvelopeNamespaces(_returnEnv));

			return (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
				                                                                              "getStoppedWebapp"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName =
						                                      (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                                faultElt.getQName(),
						                                                                                                                                "getStoppedWebapp"));
						java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
						java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
						// message class
						java.lang.String messageClassName =
						                                    (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
						                                                                                                                   faultElt.getQName(),
						                                                                                                                   "getStoppedWebapp"));
						java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
						java.lang.reflect.Method m =
						                             exceptionClass.getMethod("setFaultMessage",
						                                                      new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender().cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature
	 * 
	 */
	public void deleteWebapp(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp deleteWebapp

	) throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;

		org.apache.axis2.client.OperationClient _operationClient =
		                                                           _serviceClient.createClient(_operations[30].getName());
		_operationClient.getOptions().setAction("urn:deleteWebapp");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(_operationClient,
		                             org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
		                             "&");

		org.apache.axiom.soap.SOAPEnvelope env = null;
		_messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env =
		      toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteWebapp,
		                 optimizeContent(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org",
		                                                               "deleteWebapp")),
		                 new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org", "deleteWebapp"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope

		_messageContext.setEnvelope(env);

		// add the message contxt to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient.execute(true);

		if (_messageContext.getTransportOut() != null) {
			_messageContext.getTransportOut().getSender().cleanup(_messageContext);
		}

		return;
	}

	/**
	 * A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env) {
		java.util.Map returnMap = new java.util.HashMap();
		java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
		while (namespaceIterator.hasNext()) {
			org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
			returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
		}
		return returnMap;
	}

	private javax.xml.namespace.QName[] opNameArray = null;

	private boolean optimizeContent(javax.xml.namespace.QName opName) {

		if (opNameArray == null) {
			return false;
		}
		for (int i = 0; i < opNameArray.length; i++) {
			if (opName.equals(opNameArray[i])) {
				return true;
			}
		}
		return false;
	}

	// https://10.100.1.69:9443/services/WebappAdmin.WebappAdminHttpsSoap12Endpoint/
	public static class ExpireSessionsInAllWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "expireSessionsInAllWebapps",
		                                                                                       "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":expireSessionsInAllWebapps", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "expireSessionsInAllWebapps", xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ExpireSessionsInAllWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                       throws java.lang.Exception {
				ExpireSessionsInAllWebapps object = new ExpireSessionsInAllWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"expireSessionsInAllWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExpireSessionsInAllWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class StopWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "stopWebapps", "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":stopWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "stopWebapps", xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static StopWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				StopWebapps object = new StopWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"stopWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StopWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExpireAllSessions implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "expireAllSessions",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":expireAllSessions",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "expireAllSessions",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ExpireAllSessions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ExpireAllSessions object = new ExpireAllSessions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"expireAllSessions".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExpireAllSessions) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExpireSessionsInWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "expireSessionsInWebapps",
		                                                                                       "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":expireSessionsInWebapps", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "expireSessionsInWebapps", xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ExpireSessionsInWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				ExpireSessionsInWebapps object = new ExpireSessionsInWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"expireSessionsInWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExpireSessionsInWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPagedFaultyWebappsSummaryResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getPagedFaultyWebappsSummaryResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected WebappsWrapper local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappsWrapper
		 */
		public WebappsWrapper get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(WebappsWrapper param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getPagedFaultyWebappsSummaryResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getPagedFaultyWebappsSummaryResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://org.apache.axis2/xsd", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"),
					                       xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPagedFaultyWebappsSummaryResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                                 throws java.lang.Exception {
				GetPagedFaultyWebappsSummaryResponse object = new GetPagedFaultyWebappsSummaryResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPagedFaultyWebappsSummaryResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPagedFaultyWebappsSummaryResponse) ExtensionMapper.getTypeObject(nsUri,
								                                                                            type,
								                                                                            reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(WebappsWrapper.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DownloadWarFileHandlerResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "downloadWarFileHandlerResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected javax.activation.DataHandler local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return javax.activation.DataHandler
		 */
		public javax.activation.DataHandler get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(javax.activation.DataHandler param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":downloadWarFileHandlerResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "downloadWarFileHandlerResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return != null) {
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, local_return, null,
						                                                                 true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for return", ex);
					}
				} else {

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DownloadWarFileHandlerResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                           throws java.lang.Exception {
				DownloadWarFileHandlerResponse object = new DownloadWarFileHandlerResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"downloadWarFileHandlerResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DownloadWarFileHandlerResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                      reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();
						} else {

							object.set_return(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class WebappsWrapper implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = WebappsWrapper
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for HostName
		 */

		protected java.lang.String localHostName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localHostNameTracker = false;

		public boolean isHostNameSpecified() {
			return localHostNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getHostName() {
			return localHostName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HostName
		 */
		public void setHostName(java.lang.String param) {
			localHostNameTracker = true;

			this.localHostName = param;

		}

		/**
		 * field for HttpPort
		 */

		protected int localHttpPort;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localHttpPortTracker = false;

		public boolean isHttpPortSpecified() {
			return localHttpPortTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getHttpPort() {
			return localHttpPort;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HttpPort
		 */
		public void setHttpPort(int param) {

			// setting primitive attribute tracker to true
			localHttpPortTracker = param != java.lang.Integer.MIN_VALUE;

			this.localHttpPort = param;

		}

		/**
		 * field for HttpsPort
		 */

		protected int localHttpsPort;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localHttpsPortTracker = false;

		public boolean isHttpsPortSpecified() {
			return localHttpsPortTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getHttpsPort() {
			return localHttpsPort;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HttpsPort
		 */
		public void setHttpsPort(int param) {

			// setting primitive attribute tracker to true
			localHttpsPortTracker = param != java.lang.Integer.MIN_VALUE;

			this.localHttpsPort = param;

		}

		/**
		 * field for NumberOfCorrectWebapps
		 */

		protected int localNumberOfCorrectWebapps;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNumberOfCorrectWebappsTracker = false;

		public boolean isNumberOfCorrectWebappsSpecified() {
			return localNumberOfCorrectWebappsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfCorrectWebapps() {
			return localNumberOfCorrectWebapps;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfCorrectWebapps
		 */
		public void setNumberOfCorrectWebapps(int param) {

			// setting primitive attribute tracker to true
			localNumberOfCorrectWebappsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfCorrectWebapps = param;

		}

		/**
		 * field for NumberOfFaultyWebapps
		 */

		protected int localNumberOfFaultyWebapps;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNumberOfFaultyWebappsTracker = false;

		public boolean isNumberOfFaultyWebappsSpecified() {
			return localNumberOfFaultyWebappsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfFaultyWebapps() {
			return localNumberOfFaultyWebapps;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfFaultyWebapps
		 */
		public void setNumberOfFaultyWebapps(int param) {

			// setting primitive attribute tracker to true
			localNumberOfFaultyWebappsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfFaultyWebapps = param;

		}

		/**
		 * field for NumberOfPages
		 */

		protected int localNumberOfPages;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNumberOfPagesTracker = false;

		public boolean isNumberOfPagesSpecified() {
			return localNumberOfPagesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfPages() {
			return localNumberOfPages;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfPages
		 */
		public void setNumberOfPages(int param) {

			// setting primitive attribute tracker to true
			localNumberOfPagesTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfPages = param;

		}

		/**
		 * field for Webapps
		 * This was an Array!
		 */

		protected VersionedWebappMetadata[] localWebapps;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappsTracker = false;

		public boolean isWebappsSpecified() {
			return localWebappsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VersionedWebappMetadata[]
		 */
		public VersionedWebappMetadata[] getWebapps() {
			return localWebapps;
		}

		/**
		 * validate the array for Webapps
		 */
		protected void validateWebapps(VersionedWebappMetadata[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Webapps
		 */
		public void setWebapps(VersionedWebappMetadata[] param) {

			validateWebapps(param);

			localWebappsTracker = true;

			this.localWebapps = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            VersionedWebappMetadata
		 */
		public void addWebapps(VersionedWebappMetadata param) {
			if (localWebapps == null) {
				localWebapps = new VersionedWebappMetadata[] {};
			}

			// update the setting tracker
			localWebappsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebapps);
			list.add(param);
			this.localWebapps = (VersionedWebappMetadata[]) list.toArray(new VersionedWebappMetadata[list.size()]);

		}

		/**
		 * field for WebappsDir
		 */

		protected java.lang.String localWebappsDir;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappsDirTracker = false;

		public boolean isWebappsDirSpecified() {
			return localWebappsDirTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappsDir() {
			return localWebappsDir;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappsDir
		 */
		public void setWebappsDir(java.lang.String param) {
			localWebappsDirTracker = true;

			this.localWebappsDir = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":WebappsWrapper",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "WebappsWrapper",
					               xmlWriter);
				}

			}
			if (localHostNameTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "hostName", xmlWriter);

				if (localHostName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localHostName);

				}

				xmlWriter.writeEndElement();
			}
			if (localHttpPortTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "httpPort", xmlWriter);

				if (localHttpPort == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("httpPort cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHttpPort));
				}

				xmlWriter.writeEndElement();
			}
			if (localHttpsPortTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "httpsPort", xmlWriter);

				if (localHttpsPort == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("httpsPort cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHttpsPort));
				}

				xmlWriter.writeEndElement();
			}
			if (localNumberOfCorrectWebappsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "numberOfCorrectWebapps", xmlWriter);

				if (localNumberOfCorrectWebapps == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("numberOfCorrectWebapps cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfCorrectWebapps));
				}

				xmlWriter.writeEndElement();
			}
			if (localNumberOfFaultyWebappsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "numberOfFaultyWebapps", xmlWriter);

				if (localNumberOfFaultyWebapps == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("numberOfFaultyWebapps cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfFaultyWebapps));
				}

				xmlWriter.writeEndElement();
			}
			if (localNumberOfPagesTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "numberOfPages", xmlWriter);

				if (localNumberOfPages == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("numberOfPages cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfPages));
				}

				xmlWriter.writeEndElement();
			}
			if (localWebappsTracker) {
				if (localWebapps != null) {
					for (int i = 0; i < localWebapps.length; i++) {
						if (localWebapps[i] != null) {
							localWebapps[i].serialize(new javax.xml.namespace.QName(
							                                                        "http://mgt.webapp.carbon.wso2.org/xsd",
							                                                        "webapps"), xmlWriter);
						} else {

							writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "webapps", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "webapps", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localWebappsDirTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "webappsDir", xmlWriter);

				if (localWebappsDir == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappsDir);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localHostNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "hostName"));

				elementList.add(localHostName == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHostName));
			}
			if (localHttpPortTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "httpPort"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHttpPort));
			}
			if (localHttpsPortTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "httpsPort"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHttpsPort));
			}
			if (localNumberOfCorrectWebappsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "numberOfCorrectWebapps"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfCorrectWebapps));
			}
			if (localNumberOfFaultyWebappsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "numberOfFaultyWebapps"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfFaultyWebapps));
			}
			if (localNumberOfPagesTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfPages"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfPages));
			}
			if (localWebappsTracker) {
				if (localWebapps != null) {
					for (int i = 0; i < localWebapps.length; i++) {

						if (localWebapps[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
							                                              "webapps"));
							elementList.add(localWebapps[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
							                                              "webapps"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webapps"));
					elementList.add(localWebapps);

				}

			}
			if (localWebappsDirTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappsDir"));

				elementList.add(localWebappsDir == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappsDir));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static WebappsWrapper parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				WebappsWrapper object = new WebappsWrapper();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"WebappsWrapper".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WebappsWrapper) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list7 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "hostName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setHostName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "httpPort").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "httpPort"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setHttpPort(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setHttpPort(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "httpsPort").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "httpsPort"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setHttpsPort(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setHttpsPort(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfCorrectWebapps").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: "
							                                                    + "numberOfCorrectWebapps"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfCorrectWebapps(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfCorrectWebapps(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfFaultyWebapps").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: "
							                                                    + "numberOfFaultyWebapps"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfFaultyWebapps(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfFaultyWebapps(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfPages").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "numberOfPages"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfPages(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfPages(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webapps").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list7.add(null);
							reader.next();
						} else {
							list7.add(VersionedWebappMetadata.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone7 = false;
						while (!loopDone7) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone7 = true;
							} else {
								if (new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webapps").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list7.add(null);
										reader.next();
									} else {
										list7.add(VersionedWebappMetadata.Factory.parse(reader));
									}
								} else {
									loopDone7 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebapps((VersionedWebappMetadata[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VersionedWebappMetadata.class,
						                                                                                                              list7));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappsDir").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappsDir(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPagedFaultyWebappsSummary implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getPagedFaultyWebappsSummary",
		                                                                                       "ns3");

		/**
		 * field for WebappSearchString
		 */

		protected java.lang.String localWebappSearchString;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappSearchStringTracker = false;

		public boolean isWebappSearchStringSpecified() {
			return localWebappSearchStringTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappSearchString() {
			return localWebappSearchString;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappSearchString
		 */
		public void setWebappSearchString(java.lang.String param) {
			localWebappSearchStringTracker = true;

			this.localWebappSearchString = param;

		}

		/**
		 * field for WebappType
		 */

		protected java.lang.String localWebappType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappTypeTracker = false;

		public boolean isWebappTypeSpecified() {
			return localWebappTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappType() {
			return localWebappType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappType
		 */
		public void setWebappType(java.lang.String param) {
			localWebappTypeTracker = true;

			this.localWebappType = param;

		}

		/**
		 * field for PageNumber
		 */

		protected int localPageNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPageNumberTracker = false;

		public boolean isPageNumberSpecified() {
			return localPageNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getPageNumber() {
			return localPageNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PageNumber
		 */
		public void setPageNumber(int param) {

			// setting primitive attribute tracker to true
			localPageNumberTracker = param != java.lang.Integer.MIN_VALUE;

			this.localPageNumber = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getPagedFaultyWebappsSummary", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getPagedFaultyWebappsSummary", xmlWriter);
				}

			}
			if (localWebappSearchStringTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappSearchString", xmlWriter);

				if (localWebappSearchString == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappSearchString);

				}

				xmlWriter.writeEndElement();
			}
			if (localWebappTypeTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappType", xmlWriter);

				if (localWebappType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappType);

				}

				xmlWriter.writeEndElement();
			}
			if (localPageNumberTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "pageNumber", xmlWriter);

				if (localPageNumber == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("pageNumber cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageNumber));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappSearchStringTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappSearchString"));

				elementList.add(localWebappSearchString == null
				                                               ? null
				                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappSearchString));
			}
			if (localWebappTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappType"));

				elementList.add(localWebappType == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappType));
			}
			if (localPageNumberTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "pageNumber"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageNumber));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPagedFaultyWebappsSummary parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                         throws java.lang.Exception {
				GetPagedFaultyWebappsSummary object = new GetPagedFaultyWebappsSummary();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPagedFaultyWebappsSummary".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPagedFaultyWebappsSummary) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappSearchString").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappSearchString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "pageNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "pageNumber"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPageNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setPageNumber(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VersionedWebappMetadata implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = VersionedWebappMetadata
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for AppVersionRoot
		 */

		protected java.lang.String localAppVersionRoot;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAppVersionRootTracker = false;

		public boolean isAppVersionRootSpecified() {
			return localAppVersionRootTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAppVersionRoot() {
			return localAppVersionRoot;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AppVersionRoot
		 */
		public void setAppVersionRoot(java.lang.String param) {
			localAppVersionRootTracker = true;

			this.localAppVersionRoot = param;

		}

		/**
		 * field for VersionGroups
		 * This was an Array!
		 */

		protected WebappMetadata[] localVersionGroups;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionGroupsTracker = false;

		public boolean isVersionGroupsSpecified() {
			return localVersionGroupsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappMetadata[]
		 */
		public WebappMetadata[] getVersionGroups() {
			return localVersionGroups;
		}

		/**
		 * validate the array for VersionGroups
		 */
		protected void validateVersionGroups(WebappMetadata[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VersionGroups
		 */
		public void setVersionGroups(WebappMetadata[] param) {

			validateVersionGroups(param);

			localVersionGroupsTracker = true;

			this.localVersionGroups = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            WebappMetadata
		 */
		public void addVersionGroups(WebappMetadata param) {
			if (localVersionGroups == null) {
				localVersionGroups = new WebappMetadata[] {};
			}

			// update the setting tracker
			localVersionGroupsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localVersionGroups);
			list.add(param);
			this.localVersionGroups = (WebappMetadata[]) list.toArray(new WebappMetadata[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":VersionedWebappMetadata", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "VersionedWebappMetadata", xmlWriter);
				}

			}
			if (localAppVersionRootTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "appVersionRoot", xmlWriter);

				if (localAppVersionRoot == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAppVersionRoot);

				}

				xmlWriter.writeEndElement();
			}
			if (localVersionGroupsTracker) {
				if (localVersionGroups != null) {
					for (int i = 0; i < localVersionGroups.length; i++) {
						if (localVersionGroups[i] != null) {
							localVersionGroups[i].serialize(new javax.xml.namespace.QName(
							                                                              "http://mgt.webapp.carbon.wso2.org/xsd",
							                                                              "versionGroups"), xmlWriter);
						} else {

							writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "versionGroups", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "versionGroups", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAppVersionRootTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "appVersionRoot"));

				elementList.add(localAppVersionRoot == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppVersionRoot));
			}
			if (localVersionGroupsTracker) {
				if (localVersionGroups != null) {
					for (int i = 0; i < localVersionGroups.length; i++) {

						if (localVersionGroups[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
							                                              "versionGroups"));
							elementList.add(localVersionGroups[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
							                                              "versionGroups"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
					                                              "versionGroups"));
					elementList.add(localVersionGroups);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static VersionedWebappMetadata parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				VersionedWebappMetadata object = new VersionedWebappMetadata();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"VersionedWebappMetadata".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (VersionedWebappMetadata) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list2 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "appVersionRoot").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAppVersionRoot(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "versionGroups").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list2.add(null);
							reader.next();
						} else {
							list2.add(WebappMetadata.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
								                                  "versionGroups").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list2.add(null);
										reader.next();
									} else {
										list2.add(WebappMetadata.Factory.parse(reader));
									}
								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setVersionGroups((WebappMetadata[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(WebappMetadata.class,
						                                                                                                           list2));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IsDefaultVersionManagementEnabledResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "isDefaultVersionManagementEnabledResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":isDefaultVersionManagementEnabledResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "isDefaultVersionManagementEnabledResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static IsDefaultVersionManagementEnabledResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                                      throws java.lang.Exception {
				IsDefaultVersionManagementEnabledResponse object = new IsDefaultVersionManagementEnabledResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"isDefaultVersionManagementEnabledResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IsDefaultVersionManagementEnabledResponse) ExtensionMapper.getTypeObject(nsUri,
								                                                                                 type,
								                                                                                 reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "return"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DownloadWarFileHandler implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "downloadWarFileHandler",
		                                                                                       "ns3");

		/**
		 * field for FileName
		 */

		protected java.lang.String localFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFileNameTracker = false;

		public boolean isFileNameSpecified() {
			return localFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFileName() {
			return localFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FileName
		 */
		public void setFileName(java.lang.String param) {
			localFileNameTracker = true;

			this.localFileName = param;

		}

		/**
		 * field for WebappType
		 */

		protected java.lang.String localWebappType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappTypeTracker = false;

		public boolean isWebappTypeSpecified() {
			return localWebappTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappType() {
			return localWebappType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappType
		 */
		public void setWebappType(java.lang.String param) {
			localWebappTypeTracker = true;

			this.localWebappType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":downloadWarFileHandler", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "downloadWarFileHandler", xmlWriter);
				}

			}
			if (localFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "fileName", xmlWriter);

				if (localFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localWebappTypeTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappType", xmlWriter);

				if (localWebappType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappType);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "fileName"));

				elementList.add(localFileName == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
			}
			if (localWebappTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappType"));

				elementList.add(localWebappType == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappType));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DownloadWarFileHandler parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				DownloadWarFileHandler object = new DownloadWarFileHandler();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"downloadWarFileHandler".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DownloadWarFileHandler) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "fileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UploadWebappResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "uploadWebappResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":uploadWebappResponse",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "uploadWebappResponse",
					               xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static UploadWebappResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                 throws java.lang.Exception {
				UploadWebappResponse object = new UploadWebappResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"uploadWebappResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (UploadWebappResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "return"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetActiveSessions implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getActiveSessions",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 * field for PageNumber
		 */

		protected int localPageNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPageNumberTracker = false;

		public boolean isPageNumberSpecified() {
			return localPageNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getPageNumber() {
			return localPageNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PageNumber
		 */
		public void setPageNumber(int param) {

			// setting primitive attribute tracker to true
			localPageNumberTracker = param != java.lang.Integer.MIN_VALUE;

			this.localPageNumber = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getActiveSessions",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getActiveSessions",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localPageNumberTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "pageNumber", xmlWriter);

				if (localPageNumber == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("pageNumber cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageNumber));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}
			if (localPageNumberTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "pageNumber"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageNumber));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetActiveSessions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetActiveSessions object = new GetActiveSessions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getActiveSessions".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetActiveSessions) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "pageNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "pageNumber"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPageNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setPageNumber(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetStoppedWebappResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getStoppedWebappResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected WebappMetadata local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappMetadata
		 */
		public WebappMetadata get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(WebappMetadata param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getStoppedWebappResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getStoppedWebappResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://org.apache.axis2/xsd", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"),
					                       xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetStoppedWebappResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                     throws java.lang.Exception {
				GetStoppedWebappResponse object = new GetStoppedWebappResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getStoppedWebappResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetStoppedWebappResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(WebappMetadata.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteAllStoppedWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteAllStoppedWebapps",
		                                                                                       "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":deleteAllStoppedWebapps", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "deleteAllStoppedWebapps", xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteAllStoppedWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				DeleteAllStoppedWebapps object = new DeleteAllStoppedWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteAllStoppedWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteAllStoppedWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExtensionMapper {

		public static java.lang.Object getTypeObject(java.lang.String namespaceURI, java.lang.String typeName,
		                                             javax.xml.stream.XMLStreamReader reader)
		                                                                                     throws java.lang.Exception {

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) && "SessionsWrapper".equals(typeName)) {

				return SessionsWrapper.Factory.parse(reader);

			}

			if ("http://metadata.persistence.core.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "ArtifactMetadataException".equals(typeName)) {

				return ArtifactMetadataException.Factory.parse(reader);

			}

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) && "WebappStatistics".equals(typeName)) {

				return WebappStatistics.Factory.parse(reader);

			}

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) && "WebappMetadata".equals(typeName)) {

				return WebappMetadata.Factory.parse(reader);

			}

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) && "WebappsWrapper".equals(typeName)) {

				return WebappsWrapper.Factory.parse(reader);

			}

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) && "WebappUploadData".equals(typeName)) {

				return WebappUploadData.Factory.parse(reader);

			}

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) &&
			    "VersionedWebappMetadata".equals(typeName)) {

				return VersionedWebappMetadata.Factory.parse(reader);

			}

			if ("http://mgt.webapp.carbon.wso2.org/xsd".equals(namespaceURI) && "SessionMetadata".equals(typeName)) {

				return SessionMetadata.Factory.parse(reader);

			}

			throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class WebappAdminArtifactMetadataException implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "WebappAdminArtifactMetadataException",
		                                                                                       "ns3");

		/**
		 * field for ArtifactMetadataException
		 */

		protected ArtifactMetadataException localArtifactMetadataException;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localArtifactMetadataExceptionTracker = false;

		public boolean isArtifactMetadataExceptionSpecified() {
			return localArtifactMetadataExceptionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ArtifactMetadataException
		 */
		public ArtifactMetadataException getArtifactMetadataException() {
			return localArtifactMetadataException;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ArtifactMetadataException
		 */
		public void setArtifactMetadataException(ArtifactMetadataException param) {
			localArtifactMetadataExceptionTracker = true;

			this.localArtifactMetadataException = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":WebappAdminArtifactMetadataException", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "WebappAdminArtifactMetadataException", xmlWriter);
				}

			}
			if (localArtifactMetadataExceptionTracker) {
				if (localArtifactMetadataException == null) {

					writeStartElement(null, "http://org.apache.axis2/xsd", "ArtifactMetadataException", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					localArtifactMetadataException.serialize(new javax.xml.namespace.QName(
					                                                                       "http://org.apache.axis2/xsd",
					                                                                       "ArtifactMetadataException"),
					                                         xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localArtifactMetadataExceptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
				                                              "ArtifactMetadataException"));

				elementList.add(localArtifactMetadataException == null ? null : localArtifactMetadataException);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static WebappAdminArtifactMetadataException parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                                 throws java.lang.Exception {
				WebappAdminArtifactMetadataException object = new WebappAdminArtifactMetadataException();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"WebappAdminArtifactMetadataException".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WebappAdminArtifactMetadataException) ExtensionMapper.getTypeObject(nsUri,
								                                                                            type,
								                                                                            reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "ArtifactMetadataException").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setArtifactMetadataException(null);
							reader.next();

							reader.next();

						} else {

							object.setArtifactMetadataException(ArtifactMetadataException.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IsUnpackWARs implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "isUnpackWARs", "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":isUnpackWARs",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "isUnpackWARs",
					               xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static IsUnpackWARs parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				IsUnpackWARs object = new IsUnpackWARs();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"isUnpackWARs".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IsUnpackWARs) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class WebappMetadata implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = WebappMetadata
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for AppVersion
		 */

		protected java.lang.String localAppVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAppVersionTracker = false;

		public boolean isAppVersionSpecified() {
			return localAppVersionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAppVersion() {
			return localAppVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AppVersion
		 */
		public void setAppVersion(java.lang.String param) {
			localAppVersionTracker = true;

			this.localAppVersion = param;

		}

		/**
		 * field for Context
		 */

		protected java.lang.String localContext;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContextTracker = false;

		public boolean isContextSpecified() {
			return localContextTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getContext() {
			return localContext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Context
		 */
		public void setContext(java.lang.String param) {
			localContextTracker = true;

			this.localContext = param;

		}

		/**
		 * field for ContextPath
		 */

		protected java.lang.String localContextPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localContextPathTracker = false;

		public boolean isContextPathSpecified() {
			return localContextPathTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getContextPath() {
			return localContextPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ContextPath
		 */
		public void setContextPath(java.lang.String param) {
			localContextPathTracker = true;

			this.localContextPath = param;

		}

		/**
		 * field for DisplayName
		 */

		protected java.lang.String localDisplayName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDisplayNameTracker = false;

		public boolean isDisplayNameSpecified() {
			return localDisplayNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDisplayName() {
			return localDisplayName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DisplayName
		 */
		public void setDisplayName(java.lang.String param) {
			localDisplayNameTracker = true;

			this.localDisplayName = param;

		}

		/**
		 * field for FaultException
		 */

		protected java.lang.String localFaultException;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFaultExceptionTracker = false;

		public boolean isFaultExceptionSpecified() {
			return localFaultExceptionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFaultException() {
			return localFaultException;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FaultException
		 */
		public void setFaultException(java.lang.String param) {
			localFaultExceptionTracker = true;

			this.localFaultException = param;

		}

		/**
		 * field for Faulty
		 */

		protected boolean localFaulty;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFaultyTracker = false;

		public boolean isFaultySpecified() {
			return localFaultyTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getFaulty() {
			return localFaulty;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Faulty
		 */
		public void setFaulty(boolean param) {

			// setting primitive attribute tracker to true
			localFaultyTracker = true;

			this.localFaulty = param;

		}

		/**
		 * field for LastModifiedTime
		 */

		protected long localLastModifiedTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLastModifiedTimeTracker = false;

		public boolean isLastModifiedTimeSpecified() {
			return localLastModifiedTimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getLastModifiedTime() {
			return localLastModifiedTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastModifiedTime
		 */
		public void setLastModifiedTime(long param) {

			// setting primitive attribute tracker to true
			localLastModifiedTimeTracker = param != java.lang.Long.MIN_VALUE;

			this.localLastModifiedTime = param;

		}

		/**
		 * field for Running
		 */

		protected boolean localRunning;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRunningTracker = false;

		public boolean isRunningSpecified() {
			return localRunningTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getRunning() {
			return localRunning;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Running
		 */
		public void setRunning(boolean param) {

			// setting primitive attribute tracker to true
			localRunningTracker = true;

			this.localRunning = param;

		}

		/**
		 * field for ServiceListPath
		 */

		protected java.lang.String localServiceListPath;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localServiceListPathTracker = false;

		public boolean isServiceListPathSpecified() {
			return localServiceListPathTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getServiceListPath() {
			return localServiceListPath;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ServiceListPath
		 */
		public void setServiceListPath(java.lang.String param) {
			localServiceListPathTracker = true;

			this.localServiceListPath = param;

		}

		/**
		 * field for ServletContext
		 */

		protected java.lang.String localServletContext;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localServletContextTracker = false;

		public boolean isServletContextSpecified() {
			return localServletContextTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getServletContext() {
			return localServletContext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ServletContext
		 */
		public void setServletContext(java.lang.String param) {
			localServletContextTracker = true;

			this.localServletContext = param;

		}

		/**
		 * field for Started
		 */

		protected boolean localStarted;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localStartedTracker = false;

		public boolean isStartedSpecified() {
			return localStartedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean getStarted() {
			return localStarted;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Started
		 */
		public void setStarted(boolean param) {

			// setting primitive attribute tracker to true
			localStartedTracker = true;

			this.localStarted = param;

		}

		/**
		 * field for State
		 */

		protected java.lang.String localState;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localStateTracker = false;

		public boolean isStateSpecified() {
			return localStateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getState() {
			return localState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            State
		 */
		public void setState(java.lang.String param) {
			localStateTracker = true;

			this.localState = param;

		}

		/**
		 * field for Statistics
		 */

		protected WebappStatistics localStatistics;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localStatisticsTracker = false;

		public boolean isStatisticsSpecified() {
			return localStatisticsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappStatistics
		 */
		public WebappStatistics getStatistics() {
			return localStatistics;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Statistics
		 */
		public void setStatistics(WebappStatistics param) {
			localStatisticsTracker = true;

			this.localStatistics = param;

		}

		/**
		 * field for WebappFile
		 */

		protected java.lang.String localWebappFile;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileTracker = false;

		public boolean isWebappFileSpecified() {
			return localWebappFileTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFile() {
			return localWebappFile;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFile
		 */
		public void setWebappFile(java.lang.String param) {
			localWebappFileTracker = true;

			this.localWebappFile = param;

		}

		/**
		 * field for WebappType
		 */

		protected java.lang.String localWebappType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappTypeTracker = false;

		public boolean isWebappTypeSpecified() {
			return localWebappTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappType() {
			return localWebappType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappType
		 */
		public void setWebappType(java.lang.String param) {
			localWebappTypeTracker = true;

			this.localWebappType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":WebappMetadata",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "WebappMetadata",
					               xmlWriter);
				}

			}
			if (localAppVersionTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "appVersion", xmlWriter);

				if (localAppVersion == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAppVersion);

				}

				xmlWriter.writeEndElement();
			}
			if (localContextTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "context", xmlWriter);

				if (localContext == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localContext);

				}

				xmlWriter.writeEndElement();
			}
			if (localContextPathTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "contextPath", xmlWriter);

				if (localContextPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localContextPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localDisplayNameTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "displayName", xmlWriter);

				if (localDisplayName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localDisplayName);

				}

				xmlWriter.writeEndElement();
			}
			if (localFaultExceptionTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "faultException", xmlWriter);

				if (localFaultException == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFaultException);

				}

				xmlWriter.writeEndElement();
			}
			if (localFaultyTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "faulty", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("faulty cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFaulty));
				}

				xmlWriter.writeEndElement();
			}
			if (localLastModifiedTimeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "lastModifiedTime", xmlWriter);

				if (localLastModifiedTime == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("lastModifiedTime cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastModifiedTime));
				}

				xmlWriter.writeEndElement();
			}
			if (localRunningTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "running", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("running cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRunning));
				}

				xmlWriter.writeEndElement();
			}
			if (localServiceListPathTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "serviceListPath", xmlWriter);

				if (localServiceListPath == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localServiceListPath);

				}

				xmlWriter.writeEndElement();
			}
			if (localServletContextTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "servletContext", xmlWriter);

				if (localServletContext == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localServletContext);

				}

				xmlWriter.writeEndElement();
			}
			if (localStartedTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "started", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("started cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStarted));
				}

				xmlWriter.writeEndElement();
			}
			if (localStateTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "state", xmlWriter);

				if (localState == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localState);

				}

				xmlWriter.writeEndElement();
			}
			if (localStatisticsTracker) {
				if (localStatistics == null) {

					writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "statistics", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					localStatistics.serialize(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
					                                                        "statistics"), xmlWriter);
				}
			}
			if (localWebappFileTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "webappFile", xmlWriter);

				if (localWebappFile == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFile);

				}

				xmlWriter.writeEndElement();
			}
			if (localWebappTypeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "webappType", xmlWriter);

				if (localWebappType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappType);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAppVersionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "appVersion"));

				elementList.add(localAppVersion == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppVersion));
			}
			if (localContextTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "context"));

				elementList.add(localContext == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext));
			}
			if (localContextPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "contextPath"));

				elementList.add(localContextPath == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContextPath));
			}
			if (localDisplayNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "displayName"));

				elementList.add(localDisplayName == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisplayName));
			}
			if (localFaultExceptionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "faultException"));

				elementList.add(localFaultException == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFaultException));
			}
			if (localFaultyTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "faulty"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFaulty));
			}
			if (localLastModifiedTimeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "lastModifiedTime"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastModifiedTime));
			}
			if (localRunningTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "running"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRunning));
			}
			if (localServiceListPathTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "serviceListPath"));

				elementList.add(localServiceListPath == null
				                                            ? null
				                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServiceListPath));
			}
			if (localServletContextTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "servletContext"));

				elementList.add(localServletContext == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServletContext));
			}
			if (localStartedTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "started"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStarted));
			}
			if (localStateTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "state"));

				elementList.add(localState == null
				                                  ? null
				                                  : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localState));
			}
			if (localStatisticsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "statistics"));

				elementList.add(localStatistics == null ? null : localStatistics);
			}
			if (localWebappFileTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappFile"));

				elementList.add(localWebappFile == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFile));
			}
			if (localWebappTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappType"));

				elementList.add(localWebappType == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappType));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static WebappMetadata parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				WebappMetadata object = new WebappMetadata();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"WebappMetadata".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WebappMetadata) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "appVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAppVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "context").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setContext(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "contextPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setContextPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "displayName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setDisplayName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "faultException").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFaultException(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "faulty").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "faulty"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setFaulty(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "lastModifiedTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "lastModifiedTime"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastModifiedTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setLastModifiedTime(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "running").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "running"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRunning(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "serviceListPath").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setServiceListPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "servletContext").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setServletContext(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "started").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "started"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setStarted(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "state").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setState(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "statistics").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setStatistics(null);
							reader.next();

							reader.next();

						} else {

							object.setStatistics(WebappStatistics.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappFile").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFile(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteAllFaultyWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteAllFaultyWebapps",
		                                                                                       "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":deleteAllFaultyWebapps", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "deleteAllFaultyWebapps", xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteAllFaultyWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				DeleteAllFaultyWebapps object = new DeleteAllFaultyWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteAllFaultyWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteAllFaultyWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UploadWebapp implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "uploadWebapp", "ns3");

		/**
		 * field for WebappUploadDataList
		 * This was an Array!
		 */

		protected WebappUploadData[] localWebappUploadDataList;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappUploadDataListTracker = false;

		public boolean isWebappUploadDataListSpecified() {
			return localWebappUploadDataListTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappUploadData[]
		 */
		public WebappUploadData[] getWebappUploadDataList() {
			return localWebappUploadDataList;
		}

		/**
		 * validate the array for WebappUploadDataList
		 */
		protected void validateWebappUploadDataList(WebappUploadData[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappUploadDataList
		 */
		public void setWebappUploadDataList(WebappUploadData[] param) {

			validateWebappUploadDataList(param);

			localWebappUploadDataListTracker = true;

			this.localWebappUploadDataList = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            WebappUploadData
		 */
		public void addWebappUploadDataList(WebappUploadData param) {
			if (localWebappUploadDataList == null) {
				localWebappUploadDataList = new WebappUploadData[] {};
			}

			// update the setting tracker
			localWebappUploadDataListTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappUploadDataList);
			list.add(param);
			this.localWebappUploadDataList = (WebappUploadData[]) list.toArray(new WebappUploadData[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":uploadWebapp",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "uploadWebapp",
					               xmlWriter);
				}

			}
			if (localWebappUploadDataListTracker) {
				if (localWebappUploadDataList != null) {
					for (int i = 0; i < localWebappUploadDataList.length; i++) {
						if (localWebappUploadDataList[i] != null) {
							localWebappUploadDataList[i].serialize(new javax.xml.namespace.QName(
							                                                                     "http://org.apache.axis2/xsd",
							                                                                     "webappUploadDataList"),
							                                       xmlWriter);
						} else {

							writeStartElement(null, "http://org.apache.axis2/xsd", "webappUploadDataList", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://org.apache.axis2/xsd", "webappUploadDataList", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappUploadDataListTracker) {
				if (localWebappUploadDataList != null) {
					for (int i = 0; i < localWebappUploadDataList.length; i++) {

						if (localWebappUploadDataList[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappUploadDataList"));
							elementList.add(localWebappUploadDataList[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappUploadDataList"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappUploadDataList"));
					elementList.add(localWebappUploadDataList);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static UploadWebapp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				UploadWebapp object = new UploadWebapp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"uploadWebapp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (UploadWebapp) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappUploadDataList").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);
							reader.next();
						} else {
							list1.add(WebappUploadData.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappUploadDataList").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);
										reader.next();
									} else {
										list1.add(WebappUploadData.Factory.parse(reader));
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappUploadDataList((WebappUploadData[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(WebappUploadData.class,
						                                                                                                                    list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPagedWebappsSummary implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getPagedWebappsSummary",
		                                                                                       "ns3");

		/**
		 * field for WebappSearchString
		 */

		protected java.lang.String localWebappSearchString;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappSearchStringTracker = false;

		public boolean isWebappSearchStringSpecified() {
			return localWebappSearchStringTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappSearchString() {
			return localWebappSearchString;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappSearchString
		 */
		public void setWebappSearchString(java.lang.String param) {
			localWebappSearchStringTracker = true;

			this.localWebappSearchString = param;

		}

		/**
		 * field for WebappState
		 */

		protected java.lang.String localWebappState;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappStateTracker = false;

		public boolean isWebappStateSpecified() {
			return localWebappStateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappState() {
			return localWebappState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappState
		 */
		public void setWebappState(java.lang.String param) {
			localWebappStateTracker = true;

			this.localWebappState = param;

		}

		/**
		 * field for WebappType
		 */

		protected java.lang.String localWebappType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappTypeTracker = false;

		public boolean isWebappTypeSpecified() {
			return localWebappTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappType() {
			return localWebappType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappType
		 */
		public void setWebappType(java.lang.String param) {
			localWebappTypeTracker = true;

			this.localWebappType = param;

		}

		/**
		 * field for PageNumber
		 */

		protected int localPageNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localPageNumberTracker = false;

		public boolean isPageNumberSpecified() {
			return localPageNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getPageNumber() {
			return localPageNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PageNumber
		 */
		public void setPageNumber(int param) {

			// setting primitive attribute tracker to true
			localPageNumberTracker = param != java.lang.Integer.MIN_VALUE;

			this.localPageNumber = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getPagedWebappsSummary", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getPagedWebappsSummary", xmlWriter);
				}

			}
			if (localWebappSearchStringTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappSearchString", xmlWriter);

				if (localWebappSearchString == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappSearchString);

				}

				xmlWriter.writeEndElement();
			}
			if (localWebappStateTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappState", xmlWriter);

				if (localWebappState == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappState);

				}

				xmlWriter.writeEndElement();
			}
			if (localWebappTypeTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappType", xmlWriter);

				if (localWebappType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappType);

				}

				xmlWriter.writeEndElement();
			}
			if (localPageNumberTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "pageNumber", xmlWriter);

				if (localPageNumber == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("pageNumber cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageNumber));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappSearchStringTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappSearchString"));

				elementList.add(localWebappSearchString == null
				                                               ? null
				                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappSearchString));
			}
			if (localWebappStateTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappState"));

				elementList.add(localWebappState == null
				                                        ? null
				                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappState));
			}
			if (localWebappTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappType"));

				elementList.add(localWebappType == null
				                                       ? null
				                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappType));
			}
			if (localPageNumberTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "pageNumber"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageNumber));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPagedWebappsSummary parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				GetPagedWebappsSummary object = new GetPagedWebappsSummary();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPagedWebappsSummary".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPagedWebappsSummary) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappSearchString").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappSearchString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappState").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappState(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "pageNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "pageNumber"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPageNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setPageNumber(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetStoppedWebapp implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getStoppedWebapp",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getStoppedWebapp",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getStoppedWebapp",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetStoppedWebapp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetStoppedWebapp object = new GetStoppedWebapp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getStoppedWebapp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetStoppedWebapp) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ReloadWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "reloadWebapps", "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":reloadWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "reloadWebapps",
					               xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ReloadWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ReloadWebapps object = new ReloadWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"reloadWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReloadWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SetBamConfiguration implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "setBamConfiguration",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 * field for Value
		 */

		protected java.lang.String localValue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localValueTracker = false;

		public boolean isValueSpecified() {
			return localValueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getValue() {
			return localValue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Value
		 */
		public void setValue(java.lang.String param) {
			localValueTracker = true;

			this.localValue = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":setBamConfiguration",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "setBamConfiguration",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localValueTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "value", xmlWriter);

				if (localValue == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localValue);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}
			if (localValueTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "value"));

				elementList.add(localValue == null
				                                  ? null
				                                  : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localValue));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static SetBamConfiguration parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				SetBamConfiguration object = new SetBamConfiguration();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"setBamConfiguration".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SetBamConfiguration) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "value").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ReloadAllWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "reloadAllWebapps",
		                                                                                       "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":reloadAllWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "reloadAllWebapps",
					               xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ReloadAllWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ReloadAllWebapps object = new ReloadAllWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"reloadAllWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ReloadAllWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class StartWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "startWebapps", "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":startWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "startWebapps",
					               xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static StartWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				StartWebapps object = new StartWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"startWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StartWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteAllStartedWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteAllStartedWebapps",
		                                                                                       "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":deleteAllStartedWebapps", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "deleteAllStartedWebapps", xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteAllStartedWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				DeleteAllStartedWebapps object = new DeleteAllStartedWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteAllStartedWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteAllStartedWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class WebappStatistics implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = WebappStatistics
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for ActiveSessions
		 */

		protected int localActiveSessions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localActiveSessionsTracker = false;

		public boolean isActiveSessionsSpecified() {
			return localActiveSessionsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getActiveSessions() {
			return localActiveSessions;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ActiveSessions
		 */
		public void setActiveSessions(int param) {

			// setting primitive attribute tracker to true
			localActiveSessionsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localActiveSessions = param;

		}

		/**
		 * field for AvgSessionLifetime
		 */

		protected int localAvgSessionLifetime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAvgSessionLifetimeTracker = false;

		public boolean isAvgSessionLifetimeSpecified() {
			return localAvgSessionLifetimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getAvgSessionLifetime() {
			return localAvgSessionLifetime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AvgSessionLifetime
		 */
		public void setAvgSessionLifetime(int param) {

			// setting primitive attribute tracker to true
			localAvgSessionLifetimeTracker = param != java.lang.Integer.MIN_VALUE;

			this.localAvgSessionLifetime = param;

		}

		/**
		 * field for ExpiredSessions
		 */

		protected long localExpiredSessions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localExpiredSessionsTracker = false;

		public boolean isExpiredSessionsSpecified() {
			return localExpiredSessionsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getExpiredSessions() {
			return localExpiredSessions;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ExpiredSessions
		 */
		public void setExpiredSessions(long param) {

			// setting primitive attribute tracker to true
			localExpiredSessionsTracker = param != java.lang.Long.MIN_VALUE;

			this.localExpiredSessions = param;

		}

		/**
		 * field for MaxActiveSessions
		 */

		protected int localMaxActiveSessions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMaxActiveSessionsTracker = false;

		public boolean isMaxActiveSessionsSpecified() {
			return localMaxActiveSessionsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getMaxActiveSessions() {
			return localMaxActiveSessions;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaxActiveSessions
		 */
		public void setMaxActiveSessions(int param) {

			// setting primitive attribute tracker to true
			localMaxActiveSessionsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localMaxActiveSessions = param;

		}

		/**
		 * field for MaxSessionInactivityInterval
		 */

		protected int localMaxSessionInactivityInterval;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMaxSessionInactivityIntervalTracker = false;

		public boolean isMaxSessionInactivityIntervalSpecified() {
			return localMaxSessionInactivityIntervalTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getMaxSessionInactivityInterval() {
			return localMaxSessionInactivityInterval;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaxSessionInactivityInterval
		 */
		public void setMaxSessionInactivityInterval(int param) {

			// setting primitive attribute tracker to true
			localMaxSessionInactivityIntervalTracker = param != java.lang.Integer.MIN_VALUE;

			this.localMaxSessionInactivityInterval = param;

		}

		/**
		 * field for MaxSessionLifetime
		 */

		protected int localMaxSessionLifetime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMaxSessionLifetimeTracker = false;

		public boolean isMaxSessionLifetimeSpecified() {
			return localMaxSessionLifetimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getMaxSessionLifetime() {
			return localMaxSessionLifetime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaxSessionLifetime
		 */
		public void setMaxSessionLifetime(int param) {

			// setting primitive attribute tracker to true
			localMaxSessionLifetimeTracker = param != java.lang.Integer.MIN_VALUE;

			this.localMaxSessionLifetime = param;

		}

		/**
		 * field for RejectedSessions
		 */

		protected int localRejectedSessions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localRejectedSessionsTracker = false;

		public boolean isRejectedSessionsSpecified() {
			return localRejectedSessionsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getRejectedSessions() {
			return localRejectedSessions;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RejectedSessions
		 */
		public void setRejectedSessions(int param) {

			// setting primitive attribute tracker to true
			localRejectedSessionsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localRejectedSessions = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":WebappStatistics",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "WebappStatistics",
					               xmlWriter);
				}

			}
			if (localActiveSessionsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "activeSessions", xmlWriter);

				if (localActiveSessions == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("activeSessions cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActiveSessions));
				}

				xmlWriter.writeEndElement();
			}
			if (localAvgSessionLifetimeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "avgSessionLifetime", xmlWriter);

				if (localAvgSessionLifetime == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("avgSessionLifetime cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAvgSessionLifetime));
				}

				xmlWriter.writeEndElement();
			}
			if (localExpiredSessionsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "expiredSessions", xmlWriter);

				if (localExpiredSessions == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("expiredSessions cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExpiredSessions));
				}

				xmlWriter.writeEndElement();
			}
			if (localMaxActiveSessionsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "maxActiveSessions", xmlWriter);

				if (localMaxActiveSessions == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("maxActiveSessions cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxActiveSessions));
				}

				xmlWriter.writeEndElement();
			}
			if (localMaxSessionInactivityIntervalTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "maxSessionInactivityInterval", xmlWriter);

				if (localMaxSessionInactivityInterval == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("maxSessionInactivityInterval cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSessionInactivityInterval));
				}

				xmlWriter.writeEndElement();
			}
			if (localMaxSessionLifetimeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "maxSessionLifetime", xmlWriter);

				if (localMaxSessionLifetime == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("maxSessionLifetime cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSessionLifetime));
				}

				xmlWriter.writeEndElement();
			}
			if (localRejectedSessionsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "rejectedSessions", xmlWriter);

				if (localRejectedSessions == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("rejectedSessions cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRejectedSessions));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localActiveSessionsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "activeSessions"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActiveSessions));
			}
			if (localAvgSessionLifetimeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "avgSessionLifetime"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAvgSessionLifetime));
			}
			if (localExpiredSessionsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "expiredSessions"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExpiredSessions));
			}
			if (localMaxActiveSessionsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "maxActiveSessions"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxActiveSessions));
			}
			if (localMaxSessionInactivityIntervalTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "maxSessionInactivityInterval"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSessionInactivityInterval));
			}
			if (localMaxSessionLifetimeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "maxSessionLifetime"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSessionLifetime));
			}
			if (localRejectedSessionsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "rejectedSessions"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRejectedSessions));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static WebappStatistics parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				WebappStatistics object = new WebappStatistics();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"WebappStatistics".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WebappStatistics) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "activeSessions").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "activeSessions"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setActiveSessions(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setActiveSessions(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "avgSessionLifetime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "avgSessionLifetime"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAvgSessionLifetime(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setAvgSessionLifetime(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "expiredSessions").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "expiredSessions"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setExpiredSessions(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setExpiredSessions(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "maxActiveSessions").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "maxActiveSessions"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMaxActiveSessions(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setMaxActiveSessions(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
					                                  "maxSessionInactivityInterval").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: "
							                                                    + "maxSessionInactivityInterval"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMaxSessionInactivityInterval(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setMaxSessionInactivityInterval(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "maxSessionLifetime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "maxSessionLifetime"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMaxSessionLifetime(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setMaxSessionLifetime(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "rejectedSessions").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "rejectedSessions"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRejectedSessions(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setRejectedSessions(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetStartedWebapp implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getStartedWebapp",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getStartedWebapp",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getStartedWebapp",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetStartedWebapp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetStartedWebapp object = new GetStartedWebapp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getStartedWebapp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetStartedWebapp) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteStoppedWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteStoppedWebapps",
		                                                                                       "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":deleteStoppedWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "deleteStoppedWebapps",
					               xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteStoppedWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                 throws java.lang.Exception {
				DeleteStoppedWebapps object = new DeleteStoppedWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteStoppedWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteStoppedWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetStartedWebappResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getStartedWebappResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected WebappMetadata local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappMetadata
		 */
		public WebappMetadata get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(WebappMetadata param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getStartedWebappResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getStartedWebappResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://org.apache.axis2/xsd", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"),
					                       xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetStartedWebappResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                     throws java.lang.Exception {
				GetStartedWebappResponse object = new GetStartedWebappResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getStartedWebappResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetStartedWebappResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(WebappMetadata.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IsDefaultVersionManagementEnabled implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "isDefaultVersionManagementEnabled",
		                                                                                       "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":isDefaultVersionManagementEnabled", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "isDefaultVersionManagementEnabled", xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static IsDefaultVersionManagementEnabled parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                              throws java.lang.Exception {
				IsDefaultVersionManagementEnabled object = new IsDefaultVersionManagementEnabled();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"isDefaultVersionManagementEnabled".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IsDefaultVersionManagementEnabled) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                         reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IsUnpackWARsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "isUnpackWARsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected boolean local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return boolean
		 */
		public boolean get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(boolean param) {

			// setting primitive attribute tracker to true
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":isUnpackWARsResponse",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "isUnpackWARsResponse",
					               xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (false) {

					throw new org.apache.axis2.databinding.ADBException("return cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static IsUnpackWARsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                 throws java.lang.Exception {
				IsUnpackWARsResponse object = new IsUnpackWARsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"isUnpackWARsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (IsUnpackWARsResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "return"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteWebapp implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteWebapp", "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":deleteWebapp",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "deleteWebapp",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteWebapp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				DeleteWebapp object = new DeleteWebapp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteWebapp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteWebapp) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class StartAllWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "startAllWebapps", "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":startAllWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "startAllWebapps",
					               xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static StartAllWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				StartAllWebapps object = new StartAllWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"startAllWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StartAllWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteFaultyWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteFaultyWebapps",
		                                                                                       "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":deleteFaultyWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "deleteFaultyWebapps",
					               xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteFaultyWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				DeleteFaultyWebapps object = new DeleteFaultyWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteFaultyWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteFaultyWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetBamConfiguration implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getBamConfiguration",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":getBamConfiguration",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "getBamConfiguration",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetBamConfiguration parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				GetBamConfiguration object = new GetBamConfiguration();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getBamConfiguration".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetBamConfiguration) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetPagedWebappsSummaryResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getPagedWebappsSummaryResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected WebappsWrapper local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return WebappsWrapper
		 */
		public WebappsWrapper get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(WebappsWrapper param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getPagedWebappsSummaryResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getPagedWebappsSummaryResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://org.apache.axis2/xsd", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"),
					                       xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetPagedWebappsSummaryResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                           throws java.lang.Exception {
				GetPagedWebappsSummaryResponse object = new GetPagedWebappsSummaryResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getPagedWebappsSummaryResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetPagedWebappsSummaryResponse) ExtensionMapper.getTypeObject(nsUri, type,
								                                                                      reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(WebappsWrapper.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteStartedWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteStartedWebapps",
		                                                                                       "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":deleteStartedWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "deleteStartedWebapps",
					               xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteStartedWebapps parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                 throws java.lang.Exception {
				DeleteStartedWebapps object = new DeleteStartedWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteStartedWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteStartedWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class StopAllWebapps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "stopAllWebapps", "ns3");

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":stopAllWebapps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "stopAllWebapps",
					               xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static StopAllWebapps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				StopAllWebapps object = new StopAllWebapps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"stopAllWebapps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (StopAllWebapps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SessionMetadata implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = SessionMetadata
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for AuthType
		 */

		protected java.lang.String localAuthType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAuthTypeTracker = false;

		public boolean isAuthTypeSpecified() {
			return localAuthTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAuthType() {
			return localAuthType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AuthType
		 */
		public void setAuthType(java.lang.String param) {
			localAuthTypeTracker = true;

			this.localAuthType = param;

		}

		/**
		 * field for CreationTime
		 */

		protected long localCreationTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localCreationTimeTracker = false;

		public boolean isCreationTimeSpecified() {
			return localCreationTimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getCreationTime() {
			return localCreationTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CreationTime
		 */
		public void setCreationTime(long param) {

			// setting primitive attribute tracker to true
			localCreationTimeTracker = param != java.lang.Long.MIN_VALUE;

			this.localCreationTime = param;

		}

		/**
		 * field for LastAccessedTime
		 */

		protected long localLastAccessedTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localLastAccessedTimeTracker = false;

		public boolean isLastAccessedTimeSpecified() {
			return localLastAccessedTimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getLastAccessedTime() {
			return localLastAccessedTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastAccessedTime
		 */
		public void setLastAccessedTime(long param) {

			// setting primitive attribute tracker to true
			localLastAccessedTimeTracker = param != java.lang.Long.MIN_VALUE;

			this.localLastAccessedTime = param;

		}

		/**
		 * field for MaxInactiveInterval
		 */

		protected long localMaxInactiveInterval;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMaxInactiveIntervalTracker = false;

		public boolean isMaxInactiveIntervalSpecified() {
			return localMaxInactiveIntervalTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getMaxInactiveInterval() {
			return localMaxInactiveInterval;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaxInactiveInterval
		 */
		public void setMaxInactiveInterval(long param) {

			// setting primitive attribute tracker to true
			localMaxInactiveIntervalTracker = param != java.lang.Long.MIN_VALUE;

			this.localMaxInactiveInterval = param;

		}

		/**
		 * field for SessionId
		 */

		protected java.lang.String localSessionId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localSessionIdTracker = false;

		public boolean isSessionIdSpecified() {
			return localSessionIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSessionId() {
			return localSessionId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SessionId
		 */
		public void setSessionId(java.lang.String param) {
			localSessionIdTracker = true;

			this.localSessionId = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":SessionMetadata",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SessionMetadata",
					               xmlWriter);
				}

			}
			if (localAuthTypeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "authType", xmlWriter);

				if (localAuthType == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAuthType);

				}

				xmlWriter.writeEndElement();
			}
			if (localCreationTimeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "creationTime", xmlWriter);

				if (localCreationTime == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("creationTime cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreationTime));
				}

				xmlWriter.writeEndElement();
			}
			if (localLastAccessedTimeTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "lastAccessedTime", xmlWriter);

				if (localLastAccessedTime == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("lastAccessedTime cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastAccessedTime));
				}

				xmlWriter.writeEndElement();
			}
			if (localMaxInactiveIntervalTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "maxInactiveInterval", xmlWriter);

				if (localMaxInactiveInterval == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("maxInactiveInterval cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxInactiveInterval));
				}

				xmlWriter.writeEndElement();
			}
			if (localSessionIdTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "sessionId", xmlWriter);

				if (localSessionId == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localSessionId);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAuthTypeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "authType"));

				elementList.add(localAuthType == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthType));
			}
			if (localCreationTimeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "creationTime"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreationTime));
			}
			if (localLastAccessedTimeTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "lastAccessedTime"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastAccessedTime));
			}
			if (localMaxInactiveIntervalTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "maxInactiveInterval"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxInactiveInterval));
			}
			if (localSessionIdTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "sessionId"));

				elementList.add(localSessionId == null
				                                      ? null
				                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSessionId));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static SessionMetadata parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				SessionMetadata object = new SessionMetadata();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"SessionMetadata".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SessionMetadata) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "authType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAuthType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "creationTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "creationTime"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCreationTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setCreationTime(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "lastAccessedTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "lastAccessedTime"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastAccessedTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setLastAccessedTime(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "maxInactiveInterval").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "maxInactiveInterval"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMaxInactiveInterval(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setMaxInactiveInterval(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "sessionId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DeleteAllWebApps implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "deleteAllWebApps",
		                                                                                       "ns3");

		/**
		 * field for WebappFileNames
		 * This was an Array!
		 */

		protected java.lang.String[] localWebappFileNames;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNamesTracker = false;

		public boolean isWebappFileNamesSpecified() {
			return localWebappFileNamesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getWebappFileNames() {
			return localWebappFileNames;
		}

		/**
		 * validate the array for WebappFileNames
		 */
		protected void validateWebappFileNames(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileNames
		 */
		public void setWebappFileNames(java.lang.String[] param) {

			validateWebappFileNames(param);

			localWebappFileNamesTracker = true;

			this.localWebappFileNames = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addWebappFileNames(java.lang.String param) {
			if (localWebappFileNames == null) {
				localWebappFileNames = new java.lang.String[] {};
			}

			// update the setting tracker
			localWebappFileNamesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localWebappFileNames);
			list.add(param);
			this.localWebappFileNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":deleteAllWebApps",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "deleteAllWebApps",
					               xmlWriter);
				}

			}
			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {

							writeStartElement(null, namespace, "webappFileNames", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "webappFileNames", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "webappFileNames", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNamesTracker) {
				if (localWebappFileNames != null) {
					for (int i = 0; i < localWebappFileNames.length; i++) {

						if (localWebappFileNames[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileNames[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd",
							                                              "webappFileNames"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static DeleteAllWebApps parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				DeleteAllWebApps object = new DeleteAllWebApps();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"deleteAllWebApps".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (DeleteAllWebApps) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list1.add(null);

							reader.next();
						} else {
							list1.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileNames").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list1.add(null);

										reader.next();
									} else {
										list1.add(reader.getElementText());
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setWebappFileNames((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetBamConfigurationResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getBamConfigurationResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected java.lang.String local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(java.lang.String param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getBamConfigurationResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getBamConfigurationResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "return", xmlWriter);

				if (local_return == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(local_return);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetBamConfigurationResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                        throws java.lang.Exception {
				GetBamConfigurationResponse object = new GetBamConfigurationResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getBamConfigurationResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetBamConfigurationResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class SessionsWrapper implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = SessionsWrapper
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for NumberOfActiveSessions
		 */

		protected int localNumberOfActiveSessions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNumberOfActiveSessionsTracker = false;

		public boolean isNumberOfActiveSessionsSpecified() {
			return localNumberOfActiveSessionsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfActiveSessions() {
			return localNumberOfActiveSessions;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfActiveSessions
		 */
		public void setNumberOfActiveSessions(int param) {

			// setting primitive attribute tracker to true
			localNumberOfActiveSessionsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfActiveSessions = param;

		}

		/**
		 * field for NumberOfPages
		 */

		protected int localNumberOfPages;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localNumberOfPagesTracker = false;

		public boolean isNumberOfPagesSpecified() {
			return localNumberOfPagesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfPages() {
			return localNumberOfPages;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfPages
		 */
		public void setNumberOfPages(int param) {

			// setting primitive attribute tracker to true
			localNumberOfPagesTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfPages = param;

		}

		/**
		 * field for Sessions
		 * This was an Array!
		 */

		protected SessionMetadata[] localSessions;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localSessionsTracker = false;

		public boolean isSessionsSpecified() {
			return localSessionsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return SessionMetadata[]
		 */
		public SessionMetadata[] getSessions() {
			return localSessions;
		}

		/**
		 * validate the array for Sessions
		 */
		protected void validateSessions(SessionMetadata[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sessions
		 */
		public void setSessions(SessionMetadata[] param) {

			validateSessions(param);

			localSessionsTracker = true;

			this.localSessions = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            SessionMetadata
		 */
		public void addSessions(SessionMetadata param) {
			if (localSessions == null) {
				localSessions = new SessionMetadata[] {};
			}

			// update the setting tracker
			localSessionsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localSessions);
			list.add(param);
			this.localSessions = (SessionMetadata[]) list.toArray(new SessionMetadata[list.size()]);

		}

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":SessionsWrapper",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SessionsWrapper",
					               xmlWriter);
				}

			}
			if (localNumberOfActiveSessionsTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "numberOfActiveSessions", xmlWriter);

				if (localNumberOfActiveSessions == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("numberOfActiveSessions cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfActiveSessions));
				}

				xmlWriter.writeEndElement();
			}
			if (localNumberOfPagesTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "numberOfPages", xmlWriter);

				if (localNumberOfPages == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("numberOfPages cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfPages));
				}

				xmlWriter.writeEndElement();
			}
			if (localSessionsTracker) {
				if (localSessions != null) {
					for (int i = 0; i < localSessions.length; i++) {
						if (localSessions[i] != null) {
							localSessions[i].serialize(new javax.xml.namespace.QName(
							                                                         "http://mgt.webapp.carbon.wso2.org/xsd",
							                                                         "sessions"), xmlWriter);
						} else {

							writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "sessions", xmlWriter);

							// write the nil attribute
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null, "http://mgt.webapp.carbon.wso2.org/xsd", "sessions", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localWebappFileNameTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNumberOfActiveSessionsTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
				                                              "numberOfActiveSessions"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfActiveSessions));
			}
			if (localNumberOfPagesTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfPages"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumberOfPages));
			}
			if (localSessionsTracker) {
				if (localSessions != null) {
					for (int i = 0; i < localSessions.length; i++) {

						if (localSessions[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
							                                              "sessions"));
							elementList.add(localSessions[i]);
						} else {

							elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd",
							                                              "sessions"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "sessions"));
					elementList.add(localSessions);

				}

			}
			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static SessionsWrapper parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				SessionsWrapper object = new SessionsWrapper();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"SessionsWrapper".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (SessionsWrapper) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list3 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfActiveSessions").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: "
							                                                    + "numberOfActiveSessions"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfActiveSessions(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfActiveSessions(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "numberOfPages").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: " + "numberOfPages"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfPages(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfPages(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "sessions").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list3.add(null);
							reader.next();
						} else {
							list3.add(SessionMetadata.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "sessions").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list3.add(null);
										reader.next();
									} else {
										list3.add(SessionMetadata.Factory.parse(reader));
									}
								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setSessions((SessionMetadata[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(SessionMetadata.class,
						                                                                                                       list3));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ArtifactMetadataException implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = ArtifactMetadataException
		 * Namespace URI = http://metadata.persistence.core.carbon.wso2.org/xsd
		 * Namespace Prefix = ns2
		 */

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix =
				                                   registerPrefix(xmlWriter,
				                                                  "http://metadata.persistence.core.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":ArtifactMetadataException", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "ArtifactMetadataException", xmlWriter);
				}

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://metadata.persistence.core.carbon.wso2.org/xsd")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ArtifactMetadataException parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                      throws java.lang.Exception {
				ArtifactMetadataException object = new ArtifactMetadataException();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"ArtifactMetadataException".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ArtifactMetadataException) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GetActiveSessionsResponse implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "getActiveSessionsResponse",
		                                                                                       "ns3");

		/**
		 * field for _return
		 */

		protected SessionsWrapper local_return;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean local_returnTracker = false;

		public boolean is_returnSpecified() {
			return local_returnTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return SessionsWrapper
		 */
		public SessionsWrapper get_return() {
			return local_return;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _return
		 */
		public void set_return(SessionsWrapper param) {
			local_returnTracker = true;

			this.local_return = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":getActiveSessionsResponse", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "getActiveSessionsResponse", xmlWriter);
				}

			}
			if (local_returnTracker) {
				if (local_return == null) {

					writeStartElement(null, "http://org.apache.axis2/xsd", "return", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();
				} else {
					local_return.serialize(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"),
					                       xmlWriter);
				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (local_returnTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return"));

				elementList.add(local_return == null ? null : local_return);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static GetActiveSessionsResponse parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                      throws java.lang.Exception {
				GetActiveSessionsResponse object = new GetActiveSessionsResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"getActiveSessionsResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (GetActiveSessionsResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "return").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.set_return(null);
							reader.next();

							reader.next();

						} else {

							object.set_return(SessionsWrapper.Factory.parse(reader));

							reader.next();
						}
					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class WebappUploadData implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had
		 * name = WebappUploadData
		 * Namespace URI = http://mgt.webapp.carbon.wso2.org/xsd
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for DataHandler
		 */

		protected javax.activation.DataHandler localDataHandler;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localDataHandlerTracker = false;

		public boolean isDataHandlerSpecified() {
			return localDataHandlerTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return javax.activation.DataHandler
		 */
		public javax.activation.DataHandler getDataHandler() {
			return localDataHandler;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DataHandler
		 */
		public void setDataHandler(javax.activation.DataHandler param) {
			localDataHandlerTracker = true;

			this.localDataHandler = param;

		}

		/**
		 * field for FileName
		 */

		protected java.lang.String localFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFileNameTracker = false;

		public boolean isFileNameSpecified() {
			return localFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFileName() {
			return localFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FileName
		 */
		public void setFileName(java.lang.String param) {
			localFileNameTracker = true;

			this.localFileName = param;

		}

		/**
		 * field for Version
		 */

		protected java.lang.String localVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localVersionTracker = false;

		public boolean isVersionSpecified() {
			return localVersionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVersion() {
			return localVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Version
		 */
		public void setVersion(java.lang.String param) {
			localVersionTracker = true;

			this.localVersion = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this,
			                                                                                             parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://mgt.webapp.carbon.wso2.org/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":WebappUploadData",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "WebappUploadData",
					               xmlWriter);
				}

			}
			if (localDataHandlerTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "dataHandler", xmlWriter);

				if (localDataHandler != null) {
					try {
						org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localDataHandler,
						                                                                 null, true);
					} catch (java.io.IOException ex) {
						throw new javax.xml.stream.XMLStreamException("Unable to read data handler for dataHandler", ex);
					}
				} else {

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				}

				xmlWriter.writeEndElement();
			}
			if (localFileNameTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "fileName", xmlWriter);

				if (localFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localVersionTracker) {
				namespace = "http://mgt.webapp.carbon.wso2.org/xsd";
				writeStartElement(null, namespace, "version", xmlWriter);

				if (localVersion == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localVersion);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://mgt.webapp.carbon.wso2.org/xsd")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localDataHandlerTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "dataHandler"));

				elementList.add(localDataHandler);
			}
			if (localFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "fileName"));

				elementList.add(localFileName == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
			}
			if (localVersionTracker) {
				elementList.add(new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "version"));

				elementList.add(localVersion == null
				                                    ? null
				                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVersion));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static WebappUploadData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				WebappUploadData object = new WebappUploadData();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"WebappUploadData".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (WebappUploadData) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "dataHandler").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							object.setDataHandler(null);
							reader.next();
						} else {

							object.setDataHandler(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));

						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "fileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://mgt.webapp.carbon.wso2.org/xsd", "version").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExpireSessionsInWebapp implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "expireSessionsInWebapp",
		                                                                                       "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 * field for MaxSessionLifetimeMillis
		 */

		protected long localMaxSessionLifetimeMillis;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localMaxSessionLifetimeMillisTracker = false;

		public boolean isMaxSessionLifetimeMillisSpecified() {
			return localMaxSessionLifetimeMillisTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getMaxSessionLifetimeMillis() {
			return localMaxSessionLifetimeMillis;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaxSessionLifetimeMillis
		 */
		public void setMaxSessionLifetimeMillis(long param) {

			// setting primitive attribute tracker to true
			localMaxSessionLifetimeMillisTracker = param != java.lang.Long.MIN_VALUE;

			this.localMaxSessionLifetimeMillis = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":expireSessionsInWebapp", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "expireSessionsInWebapp", xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localMaxSessionLifetimeMillisTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "maxSessionLifetimeMillis", xmlWriter);

				if (localMaxSessionLifetimeMillis == java.lang.Long.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException("maxSessionLifetimeMillis cannot be null!!");

				} else {
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSessionLifetimeMillis));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}
			if (localMaxSessionLifetimeMillisTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "maxSessionLifetimeMillis"));

				elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSessionLifetimeMillis));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ExpireSessionsInWebapp parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                   throws java.lang.Exception {
				ExpireSessionsInWebapp object = new ExpireSessionsInWebapp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"expireSessionsInWebapp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExpireSessionsInWebapp) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "maxSessionLifetimeMillis").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException("The element: "
							                                                    + "maxSessionLifetimeMillis"
							                                                    + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMaxSessionLifetimeMillis(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setMaxSessionLifetimeMillis(java.lang.Long.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExpireSessions implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "expireSessions", "ns3");

		/**
		 * field for WebappFileName
		 */

		protected java.lang.String localWebappFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localWebappFileNameTracker = false;

		public boolean isWebappFileNameSpecified() {
			return localWebappFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getWebappFileName() {
			return localWebappFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WebappFileName
		 */
		public void setWebappFileName(java.lang.String param) {
			localWebappFileNameTracker = true;

			this.localWebappFileName = param;

		}

		/**
		 * field for SessionIDs
		 * This was an Array!
		 */

		protected java.lang.String[] localSessionIDs;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localSessionIDsTracker = false;

		public boolean isSessionIDsSpecified() {
			return localSessionIDsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String[]
		 */
		public java.lang.String[] getSessionIDs() {
			return localSessionIDs;
		}

		/**
		 * validate the array for SessionIDs
		 */
		protected void validateSessionIDs(java.lang.String[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SessionIDs
		 */
		public void setSessionIDs(java.lang.String[] param) {

			validateSessionIDs(param);

			localSessionIDsTracker = true;

			this.localSessionIDs = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            java.lang.String
		 */
		public void addSessionIDs(java.lang.String param) {
			if (localSessionIDs == null) {
				localSessionIDs = new java.lang.String[] {};
			}

			// update the setting tracker
			localSessionIDsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localSessionIDs);
			list.add(param);
			this.localSessionIDs = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
					                                                                           ":expireSessions",
					               xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "expireSessions",
					               xmlWriter);
				}

			}
			if (localWebappFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "webappFileName", xmlWriter);

				if (localWebappFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localWebappFileName);

				}

				xmlWriter.writeEndElement();
			}
			if (localSessionIDsTracker) {
				if (localSessionIDs != null) {
					namespace = "http://org.apache.axis2/xsd";
					for (int i = 0; i < localSessionIDs.length; i++) {

						if (localSessionIDs[i] != null) {

							writeStartElement(null, namespace, "sessionIDs", xmlWriter);

							xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSessionIDs[i]));

							xmlWriter.writeEndElement();

						} else {

							// write null attribute
							namespace = "http://org.apache.axis2/xsd";
							writeStartElement(null, namespace, "sessionIDs", xmlWriter);
							writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					// write the null attribute
					// write null attribute
					writeStartElement(null, "http://org.apache.axis2/xsd", "sessionIDs", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
					xmlWriter.writeEndElement();

				}

			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localWebappFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName"));

				elementList.add(localWebappFileName == null
				                                           ? null
				                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWebappFileName));
			}
			if (localSessionIDsTracker) {
				if (localSessionIDs != null) {
					for (int i = 0; i < localSessionIDs.length; i++) {

						if (localSessionIDs[i] != null) {
							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "sessionIDs"));
							elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSessionIDs[i]));
						} else {

							elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "sessionIDs"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "sessionIDs"));
					elementList.add(null);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ExpireSessions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
				ExpireSessions object = new ExpireSessions();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"expireSessions".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ExpireSessions) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list2 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "webappFileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setWebappFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "sessionIDs").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
							list2.add(null);

							reader.next();
						} else {
							list2.add(reader.getElementText());
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// Ensure we are at the EndElement
							while (!reader.isEndElement()) {
								reader.next();
							}
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement() && !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "sessionIDs").equals(reader.getName())) {

									nillableValue =
									                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
									                                         "nil");
									if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
										list2.add(null);

										reader.next();
									} else {
										list2.add(reader.getElementText());
									}
								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setSessionIDs((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ChangeDefaultAppVersion implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME =
		                                                         new javax.xml.namespace.QName(
		                                                                                       "http://org.apache.axis2/xsd",
		                                                                                       "changeDefaultAppVersion",
		                                                                                       "ns3");

		/**
		 * field for AppGroupName
		 */

		protected java.lang.String localAppGroupName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localAppGroupNameTracker = false;

		public boolean isAppGroupNameSpecified() {
			return localAppGroupNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAppGroupName() {
			return localAppGroupName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AppGroupName
		 */
		public void setAppGroupName(java.lang.String param) {
			localAppGroupNameTracker = true;

			this.localAppGroupName = param;

		}

		/**
		 * field for FileName
		 */

		protected java.lang.String localFileName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method
		 * for this attribute. It will be used to determine whether to include
		 * this field
		 * in the serialized XML
		 */
		protected boolean localFileNameTracker = false;

		public boolean isFileNameSpecified() {
			return localFileNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFileName() {
			return localFileName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FileName
		 */
		public void setFileName(java.lang.String param) {
			localFileNameTracker = true;

			this.localFileName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
		                                                  final org.apache.axiom.om.OMFactory factory)
		                                                                                              throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource =
			                                              new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                              throws javax.xml.stream.XMLStreamException,
		                                                                                                              org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName, javax.xml.stream.XMLStreamWriter xmlWriter,
		                      boolean serializeType) throws javax.xml.stream.XMLStreamException,
		                                            org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://org.apache.axis2/xsd");
				if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               namespacePrefix + ":changeDefaultAppVersion", xmlWriter);
				} else {
					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
					               "changeDefaultAppVersion", xmlWriter);
				}

			}
			if (localAppGroupNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "appGroupName", xmlWriter);

				if (localAppGroupName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localAppGroupName);

				}

				xmlWriter.writeEndElement();
			}
			if (localFileNameTracker) {
				namespace = "http://org.apache.axis2/xsd";
				writeStartElement(null, namespace, "fileName", xmlWriter);

				if (localFileName == null) {
					// write the nil attribute

					writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);

				} else {

					xmlWriter.writeCharacters(localFileName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(java.lang.String namespace) {
			if (namespace.equals("http://org.apache.axis2/xsd")) {
				return "ns3";
			}
			return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
		                               javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                          throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
		                            java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                  throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace, java.lang.String attName, java.lang.String attValue,
		                            javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                       throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
		                                 javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                             throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                    throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix + ":" +
					                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
				}

			} else {
				xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames, javax.xml.stream.XMLStreamWriter xmlWriter)
		                                                                                                        throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite.append(prefix)
							             .append(":")
							             .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						} else {
							stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
						}
					} else {
						stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace)
		                                                                                                               throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
					prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
		                                                                                      throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAppGroupNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "appGroupName"));

				elementList.add(localAppGroupName == null
				                                         ? null
				                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppGroupName));
			}
			if (localFileNameTracker) {
				elementList.add(new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "fileName"));

				elementList.add(localFileName == null
				                                     ? null
				                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
			                                                                            attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object
			 * Precondition: If this object is an element, the current or next
			 * start element starts this object and any intervening reader
			 * events are ignorable
			 * If this object is not an element, it is a complex type and the
			 * reader is at the event just after the outer start element
			 * Postcondition: If this object is an element, the reader is
			 * positioned at its end element
			 * If this object is a complex type, the reader is positioned at the
			 * end element of its outer element
			 */
			public static ChangeDefaultAppVersion parse(javax.xml.stream.XMLStreamReader reader)
			                                                                                    throws java.lang.Exception {
				ChangeDefaultAppVersion object = new ChangeDefaultAppVersion();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
						java.lang.String fullTypeName =
						                                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
						                                                         "type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

							if (!"changeDefaultAppVersion".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
								return (ChangeDefaultAppVersion) ExtensionMapper.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "appGroupName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setAppGroupName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement() &&
					    new javax.xml.namespace.QName("http://org.apache.axis2/xsd", "fileName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
						if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {

							java.lang.String content = reader.getElementText();

							object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

						} else {

							reader.getElementText(); // throw away text nodes if
													 // any.
						}

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.WebappAdminArtifactMetadataException param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.WebappAdminArtifactMetadataException.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp param,
	                                           boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp.MY_QNAME,
			                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory,
	                                                      org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp param,
	                                                      boolean optimizeContent, javax.xml.namespace.QName methodQName)
	                                                                                                                     throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
			emptyEnvelope.getBody()
			             .addChild(param.getOMElement(org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp.MY_QNAME,
			                                          factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	/**
	 * get the default envelope
	 */
	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory) {
		return factory.getDefaultEnvelope();
	}

	private java.lang.Object fromOM(org.apache.axiom.om.OMElement param, java.lang.Class type,
	                                java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault {

		try {

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopAllWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummary.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedFaultyWebappsSummaryResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStoppedWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStoppedWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetActiveSessionsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARs.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsUnpackWARsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabled.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.IsDefaultVersionManagementEnabledResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllStartedWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ChangeDefaultAppVersion.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.WebappAdminArtifactMetadataException.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.WebappAdminArtifactMetadataException.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebapp.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.UploadWebappResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireAllSessions.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebapp.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStartedWebappResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandler.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DownloadWarFileHandlerResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartAllWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteFaultyWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfiguration.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetBamConfigurationResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.SetBamConfiguration.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapp.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllWebApps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteStartedWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummary.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetPagedWebappsSummaryResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StartWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ExpireSessionsInAllWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.ReloadAllWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteAllFaultyWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.StopWebapps.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebapp.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.GetStoppedWebappResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp.class.equals(type)) {

				return org.wso2.developerstudio.eclipse.carbonserver.base.webapp.uploader.WebappAdminStub.DeleteWebapp.Factory.parse(param.getXMLStreamReaderWithoutCaching());

			}

		} catch (java.lang.Exception e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
		return null;
	}

}
